'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/','title':"旷淇元个人博客首页",'section':"首页",'content':"Hello World! #  "});index.add({'id':1,'href':'/about/resume/','title':"resume",'section':"Abouts",'content':"下面是针对个人简历的一些补充说明。\n如需简历详情，可电邮索取。s+resume#simonkuang.com (注意替换 # 为 @ 符号)。\n 这样介绍自己 #  旷淇元，八零后，生于成都市，现居于成都市。是一名程序员。\n重庆大学（985 \u0026amp; 211）毕业，受过良好的工科工程训练。在校期间系统自学部分计算机科学课程，获得国家信息产业部“系统设计师”水平考试证书。其后从事互联网技术相关工作逾十七年。一直保持持续学习的状态。与人为善，律己和利他主义者，猫头鹰型。\n大学毕业后有过一段创业和北漂的经历。曾在凤凰网、腾讯（北京）、中移物联网等企业任职，主要从事大流量高并发场景下的系统架构、开发和交付方面的工作。个人能力主要是以后端开发 + 运维为主，以前端 + 产品为辅。大约十年前开始做技术管理相关的工作，始终以建设“阶梯型成长团队”、“交付”、“质量”等关键字作为自己和团队的目标。\n我给自己的定位首先是“软件工程师”，时刻拿工程的标准来要求自己。\n美国专业发展工程师会（ECPD）对“工程学”的定义 有创意的应用科学定律来设计或发展结构物、机器、装置、制造程序、或是利用这些定律而产生的作品，或是在完整了解其设计下建构或设计上述的物品、或是在特定运作条件下预测其行为，所有所做的都是为了其预期的机能、运作的经济性或人员及财产的安全。   除了专业方面，我也刻意多了解一些社会学、心理学、管理学相关的知识，希望做一名能够带领自己和团队持续交付确定性的软件工程师。积极在学识方面投入和产出。\n 过去三年知识付费投入超过万元，重点在得到与极客时间这两个平台。极客时间关注专业领域知识，得到重点是破圈。 在『在行』APP 注册行家，就产品研发的话题服务过若干学员，得到一致好评。 参与架构师论坛，形成互助小组，并受邀发表讲演。  了解技术 #  可以通过我的 博客和 专栏对我的技术和架构风格有个粗评。\n索取简历 #  我在求职期间会打开这个页面。如果你能看到这个页面，这段时间我应该在看机会，欢迎联系。\n我在这里不会列出自己的工作经历等信息。如果需要了解我的工作履历，请电邮联系。\ns+jobs#simonkuang.com (请注意将 # 更换为 @ 符号)\n微信号：juma-1994 （字母和数字中间是英文字符的横线）。\n我一般会在晚上集中处理消息，有延误请见谅。\n来信烦请告知贵司名称（网址最好）和详细 JD，以便我能快速对合作前景做个预判。如果能附上上级对这个岗位角色的期望更好。\n我会第一时间恢复。谢谢。\nQ \u0026amp; A #  下面我只会罗列一些我和企业在沟通过程中，经常被问到的问题。这些问题通常在面谈中沟通效率不高，所以直接写在这里。\nQ1. 你的擅长语言是什么？ 老实说，我虽然觉得开发工作更重要的是对计算机模型的深刻理解，功能设计、设计模式、数据结构这些，开发语言从来不是重点。可现实中免不了总被问到这类问题。对项目所用到的语言越熟悉，上手的速度越快。企业招人看候选人熟悉的开发语言，好像也在情理之中。\n我用过的语言很多，熟悉的几种主流开发语言按照顺序如下。\nPHP \u0026gt; Python \u0026gt; Shell \u0026gt; JS \u0026gt; C++ \u0026gt; Flutter \u0026gt; Java \u0026gt; Golang。\n其中 Java 可以能够无障碍阅读代码，开发迭代老项目，查阅手册能用来开发新项目。\nPython 曾经通过阅读语言源码，解决项目中一个掉坑里面的问题。\nGolang 我很有兴趣，平时有关注，写了一些小工具，不过一直没有机会在项目中用到过。\n这样介绍，排在 Java 之前的语言和排在 Java 之后的语言，我掌握到一个什么样的水平，应该就比较清楚了。\n  Q2. 你熟悉哪些数据库？ 关系型数据库最熟悉是 MySQL，入行开始到现在一直有在使用。其次是 PostgreSQL，有在至少两个项目中用到，主要用做 GEO 检索。\nNoSQL 从 memcached（KV 型）算起，至少也有十五年了。熟悉的包括 Redis、MongoDB、Riak 等等。\n项目中有用过 ElasticSearch 和 Neo4j，不过只是部署、使用，没有经历过上量后优化的全流程，遇到的问题不多，因此不敢说熟悉。\n  Q3. 你熟悉哪些数据处理工具？ 做互联网广告技术时，用到的是根据 Google 四驾马车（GFS、Borg、MapReduce、BigTable）仿制基础设施，在此基础上实现业务功能开发。搭建物联网云平台时，是基于 MQ 自研的 CEP（Complex Event Processing，复杂事件处理）系统。\n三年前重构一个车联网平台时，用到了 Apache Storm。当时的业务强调实时性，否则应该会选择 Spark。而假如放到今天，则会选择 Flink。\n对数据流批处理的原理非常清楚，也有过深入实践，能够给出针对性的优化方案。对现在流行的数据流批框架有一定了解，在项目中也用到过，但缺乏像在腾讯时那样的大数据量场景。\n个人经历上以应用的功能开发为主。此外缺乏当前几个主流框架的使用经验。不过原理都差不多。\n  Q4. 好像你的履历中，架构师的工作不太明显？ 简单说，我从 2008 年开始涉及架构设计的方面的工作，到 2013 年，已经有过独立设计云平台架构的经验。我的架构设计经验不输其他架构师。\n给人一种我做架构很少，或者特点不突出的印象，我归结是两方面造成的。\n首先是我的个人经历中，做架构的经历和做管理的经历基本是重叠的。作为架构师的输出成果被视为管理成果。\n二者重叠的经历也是一种幸运，让我从一开始就有机会做『面向交付的架构』，而非仅仅面向需求做架构。\n我的理解中，软件系统是需要交付给用户/客户，在用户/客户使用软件的过程中产生价值的。因此交付是软件架构的一环，面向交付做架构，也是为了用用户/客户能够更加高效率使用软件，让软件高效且持续产生价值。\n这样的架构价值观让我谈到架构工作的成绩时，总喜欢谈到交付的成绩，以及给企业带来的收益。结果是让很多人误解我跑题了，好像谈的是管理，而非架构。此其一。\n其次，在之前面试沟通中，遇到有面试官持一种观点，认为只有用 Java 的工程师做的设计才叫架构。用其它开发语言的，特别我这样一个 PHP 用得比 Java 熟练的人，根本没有架构可言。\n关于这点，我的观点肯定是架构和开发语言无关。架构本身是关于设计的，设计的基础是数据结构、算法、devops 和各种基础设施，更底层是冯·诺依曼的数据结构。\n我个人认可的架构存在是否优美的判断。有些架构简洁，稳定，还留有足够的成长空间，就像几何里面的三角形。这样的架构谁看着都舒服。反之，繁复的设计，存在大量不解决现实问题的模块，这样的架构即便充斥着流行元素，也不是好的设计。\n这种设计的理念落到实际工作中，做出来的就是架构。这跟语言是毫无关联的。\n拿我自己举例。\n 十多年前在腾讯，我参与设计的一套 PHP 框架，用 yaml 实现 BPMN 的方式，达成了快速响应业务变更的需求。业务网站从需要一周开发（可能引入 bug），到只需要几个小时写配置（几乎无 bug，清晰明了）。\n七年前，我用 Openresty + redis 快速搭建一套 A/B Test 体系，完成灰度发布的功能。这套系统稍微改一改，结合 redis 实现令牌桶，可以限制用户访问频次，或者用来做大型秒杀活动的前置堡垒，非常高效。\n五年前创业，用 PHP 实践了微服务 + 虚拟化的架构，并且收益很明显。项目闲暇之余还调研了 Service Mesh，探讨架构演进，如何更好的 scale-out。\n三年前在一个项目中用边车模式改造了一个现网运行的老旧系统，解决原系统代码腐烂的问题。新模块引入 CEP 引擎，搭建了任务调度等基础设施，用数据流引擎代替了业务中大量的 OLTP 逻辑，实现了高并发下的数据实时处理，和随时 scale-out 的灵活性。\n最近几个月在一个 CRM 系统中，用一个 UDP server + Updater 的模式，两个工作人日，解决了高并发场景（测试机 2C 4G 下，QPS 达到 4W）的性能问题。未来使用这套设计，很容易实现切出瓶颈，做持续改进。\n 架构设计从来和具体的开发语言是无关，只和是否追求卓越，是否交付能为用户创造价值的产品有关。\n  Q5. 看你做技术管理这么久，还写代码吗？ 当然写代码。技术管理的权限是对架构的有效辅助，缺乏技术管理的觉悟，架构很难落地，更实现不了面向交付的架构。\n除了主要的开发语言，参与核心代码的 review 和开发之外，一般还承担调研、devops、dev-test 等工作。都是需要 coding 的。\n比方上一个问题 Q4 末尾提到的案例，基本上都是我负责设计和落地。项目中，除了全程参与核心功能开发外，新架构的开箱、性能的调优、技术攻坚、反馈信息的收集处理、拟定迭代计划，这些也都是我在负责。\n  Q6. 你的职业规划是什么？  在一个具体的行业扎根，成为行业的技术专家。 继续产品技术领域的沉淀输出，传播经验，形成价值。 通过 devops 的形式，倡导工具文化，通过提高研发团队效率的方式交付价值。 最理想的情况，能与企业共同成长，相互促进，相互成就。    "});index.add({'id':2,'href':'/topics/','title':"专栏",'section':"首页",'content':"以下专栏针对特定技术或场景撰写。  2018 年我在网上找到知道创宇的《 研发技能表 v3.1》，以列表的形式，阐述了知道创宇对研发工程师技能的要求。虽然我对其中部分内容不甚赞同，但这种形式激励了我。\n2019 年看到 Phodal 做的 devops 元素周期表，从 UI 上看非常震撼。用可视化方式把 devops 的抉择变得直观。\n今年又从 左耳朵耗子的博客上看到一篇文章介绍 Google SRE 评分卡，极为惊艳。\n所有的这一切让我也有一种把自己的经验输出出来的冲动。\nTo be continued \u0026hellip;\n  "});index.add({'id':3,'href':'/posts/2020/02/09/%E5%9C%A8-MacOS-%E4%B8%AD%E7%94%A8-launchd-%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B/','title':"在 MacOS 中用 launchd 管理进程",'section':"Posts",'content':"在 Linux 上有一个大家用惯的 systemd，在 MacOS 上有一个与之相对应的工具，launchd。\nLinux 下，systemd 的 pid 是 1，系统启动后，它是第一个被拉起来的，其它进程都是它的子进程。所以在 Linux 下，用 systemd 来做 supervisor 是最稳妥的办法。因为如果 systemd 挂掉了，整个系统都 crash 了。\nMacOS 下面也有一个这样的超级进程，所有的其它进程都是它产生的，挂为它的子进程、孙子进程…… 它就是 launchd。launchd 对应的管理工具就是 launchctl。\n1. 原理 #  通过后缀名为 .plist 的配置文件追加 launchd 的管理项。添加和删除，都是用 .plist 文件来完成的。\n.plist 文件存在于下面的文件夹中，分别是。\n   类型 路径 说明     User Agents ~/Library/LaunchAgents 为当前登录用户启动   Global Agents /Library/LaunchAgents 为当前登录用户启动   Global Daemons /Library/LaunchDaemons root 或者通过 UserName 配置指定的用户   System Agents /System/Library/LaunchAgents 当前登录用户   System Daemons /System/Library/LaunchDaemons root 或者通过 UserName 配置指定的用户    按照需要将你要监控的程序放到不同等级的目录中。\n2. 配置 #  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple Computer//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.simonkuang.macos.coredns\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;Disabled\u0026lt;/key\u0026gt; \u0026lt;false/\u0026gt; \u0026lt;key\u0026gt;KeepAlive\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;ProcessType\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Background\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;/usr/local/bin/coredns\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;-conf\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;/usr/local/etc/Corefile\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;UserName\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;root\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;GroupName\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;wheel\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; 上面的例子是启动一个 coredns 进程。启动的命令如下。\n/usr/local/bin/coredns -conf /usr/local/etc/Corefile\n配置中的项目包括。\n Label: 应该是唯一的 package name。 Disabled: 是否不生效（launchd 忽略，不执行） KeepAlive: 意外挂掉的话，是否由 launchd 重新拉起。 ProcessType: 进程类型。 ProgramArguments: 程序参数。 UserName: 启动进程的用户。 GroupName: 启动进程的用户组。  因为 coredns 会启动 53/udp 端口的监听，53 \u0026lt; 1024，因此我们需要给它 root 用户的权限。因为 dns 是基础网络服务，因此以系统进程的方式启动。所以该配置文件按下面的路径保存。\n/Library/LaunchDaemons/com.simonkuang.macos.coredns.plist\n请注意，文件名和 Label 保持一致。\n3. 操作 #  # 加载配置 launchctl load -w /Library/LaunchDaemons/com.simonkuang.macos.coredns.plist # 卸载配置 launchctl unload /Library/LaunchDaemons/com.simonkuang.macos.coredns.plist # 修改配置后重载配置 launchctl unload /Library/LaunchDaemons/com.simonkuang.macos.coredns.plist \u0026amp;\u0026amp; \\ launchctl load -w /Library/LaunchDaemons/com.simonkuang.macos.coredns.plist -w 参数的意思是，无论配置中 Disabled 项是 true 还是 false，都启动进程。这个参数对调试配置和进程特别有效。\n加载成功的服务，系统重启后会按照配置运行，达到 supervisor 的目的。\n4. 更多 #  # 查看所有的 plist 服务 launchctl list # 禁用服务 launchctl disable /Library/LaunchDaemons/com.simonkuang.macos.coredns.plist # 启用服务 launchctl disable /Library/LaunchDaemons/com.simonkuang.macos.coredns.plist # 杀死进程（不优雅地杀，直接杀进程）并重启服务。对一些停止响应的服务有效。 launchctl kickstart -k /Library/LaunchDaemons/com.simonkuang.macos.coredns.plist # 在不修改 Disabled 配置的前提下启动服务 launchctl start /Library/LaunchDaemons/com.simonkuang.macos.coredns.plist # 在不修改 Disabled 配置的前提下停止服务 launchctl stop /Library/LaunchDaemons/com.simonkuang.macos.coredns.plist "});index.add({'id':4,'href':'/posts/2019/10/23/%E9%92%88%E5%AF%B9-DNS-%E5%85%A8%E7%90%83%E4%BC%98%E5%8C%96%E5%81%9A%E7%9A%84-CoreDNS-%E9%A2%9D%E5%A4%96%E9%85%8D%E7%BD%AE/','title':"针对 DNS 全球优化做的 CoreDNS 额外配置",'section':"Posts",'content':"发现最近基于 DNS 做访问优化的大企业越来越多。今天从 mirrors.aliyun.com 的 pypi 上更新 package，发现竟然速度只有几十 KB/s，太惊人了。反应了很久才想起来，可能是 DNS 解析的问题。aliyun 对从国外 DNS 服务器回溯的请求，给出的是国外 CDN 节点的 IP。我在国内，去连接国外的 CDN，当然慢了。有了设想，简单证实一下，分别从四个一和 dnspod 解析 mirrors.aliyun.com 这个域名，果然不一样。印证了我的猜想。\n不止阿里云，亚麻，azure，这些云服务商，甚至苹果这种做产品的企业，也都有类似基于 DNS 的全球网络优化。\n之前 用 CoreDNS 做防毒的方案，并没有考虑到这一点，所以在这里补充一下更新后的配置。更新后的配置考虑到几个常用的服务，这几个服务会走国内的 DNS 服务器做解析，以便获取到厂商在国内的服务器 IP，加快访问的速度。\nPS：新版的 CoreDNS 新增了对 tls:// 协议的支持。tls:// 应该会默认走 tcp 可靠连接。对外连接的时候，用了 tls:// 协议，实现防毒的目标。\naliyun.com apple.com github.com fastly.net githubusercontent.com binary.com amazonaws.com azk9s.com qcloud.com { forward . 223.5.5.5 119.29.29.29 114.114.114.114 223.6.6.6 { max_fails 3 expire 5s health_check 3s policy sequential } } company.com { hosts /etc/hosts { fallthrough } forward . 192.168.1.103 119.29.29.29 114.114.114.114 { max_fails 3 expire 5s health_check 3s policy sequential } } # ---- global conf .:53 { hosts /etc/hosts { #127.0.0.1 a.com fallthrough } forward . tls://8.8.8.8 tls://9.9.9.9 tls://1.1.1.1 119.29.29.29 223.5.5.5 { force_tcp max_fails 3 expire 10s health_check 5s policy sequential except company.com } prometheus cache 120 reload 6s log errors } 更新配置后要重启 CoreDNS。试验了一下，阿里云下载 pypi，能达到 3-5 MB/s 的速度。瞬间回血。\n"});index.add({'id':5,'href':'/posts/2019/06/11/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E7%9A%84%E6%9C%9F%E6%9D%83%E6%80%9D%E7%BB%B4%E5%85%A8/','title':"工作中的期权思维（全）",'section':"Posts",'content':"最近在《得到》APP 听万维钢老师的《精英日课 III》收获挺多的。有一种『自己冥思苦想数载，还说不清道不明，别人轻描淡写数语，说得通透清晰』的感觉。\n先是关于博弈论的话题，其次是最近关于期权思维的话题，都讲得我恍然大悟。\n这两天讲一讲万维钢老师《期权的智慧》这个系列文章的读后感。\n1. 什么是期权思维 #  期权（option）是指一种选择的权利。不是选择『A/B/C/D』不同选项的权利，而是选或不选的权利。\n有点绕。拿吃安眠药举例。一个人有失眠的毛病，晚上躺下担心睡不着，可是越担心越睡不着。怎么办呢？就是吃安眠药。头两次，安眠药效果特别好，吃了药躺下，立马能睡着，于是这个人再也不用担心失眠了。因为药放在家里，万一失眠，随时可以吃，睡觉时再也没有了担心，所以更加容易入睡。这样，晚上睡觉前吃安眠药，就成了可选项(option)，也就是期权，可以选择吃，也可以选择不吃。option 是一种权利，而非义务。\n权利常常伴随着义务。像谈婚论嫁这种事。古代，家长为自己孩子定了一门亲事，对方家条件不错——这桩亲事既是权利，也是义务。撕毁婚约的道德风险太高。定亲就是不可选项。而今天的一个女神，如果身边有个备胎随时愿意跟她结婚，但是女神也可以选择别人，这才叫可选项（option）。\n（比如美国）股票市场中，有两种类型的期权，一种叫看涨期权（call option），一种叫看跌期权（put option）。因为英文表意更为准确，对延伸理解期权帮助更大，因此后面涉及概念，我都用英文。\ncall option 的含义是，它允许你在约定的时间，以约定的价格，买入一只特定的股票。call 代表买入，option 代表这是可选项。期权到期，买或者不买这只股票，是你的权利，是可选项（option）。\nput option 的含义是，它允许你在约定的时间，以约定的价格，卖出一只特定的股票。put 代表放出。期权到期，卖或者不卖这只股票，是你的权利，是可选项（option）。\n我做了一张图来帮助你理解其中的含义。\n 期权也是一种保险，对抗波动的保险。\n比如，你持有一家公司的股票，你长期看好它，希望长期持有。可是最近大形势不太好，你感觉有下跌的风险，但是你又不想卖，怎么办？\n用股票期权的办法，你可以买这只股票的 put option。如果股票当真跌了，因为你有 put，有一个被承诺的 put 价格，因此它跌再多，跟你都没关系。期权到期你总可以用当初约定的价格卖出它。你的损失最多也就是当初买 put 的那点钱。你的损失有一个上限。\n同样道理，如果你手里的股票最近太热了，它可能在一个高点，你想再等等，可是又怕蒙受损失。那你应该买交割价格比当前价高一些的 call option。如果股票真的下跌，你卖掉的 call option 会变得不值钱，买你 call 的人就不会行使他的权力，你等于白赚了 call 的钱。如果股票反而涨上去了，那你不得不把股票卖出去，不过交割价格比你卖 call 时候的价格还高，你还是赚了一笔。\n卖 option 的时候，卖出一种权力，得到一些收益，同时也卖出了（对抗波动的）风险。这就是期权的概念。\n 讲了这么多期权的概念。那么什么叫期权思维呢？就是利用期权的原理，重新解释生活中的现象。\n2. 万老师的洞见 #  万老师就期权思维提出了几个洞见，非常发人深省。对以前没怎么接触过期权，更不要说具备期权思维的人，这些洞见的触动非常大。\n2.1. 『期权只是权利，而非义务』 #  首先你得认识到，期权是权利，而非义务。 你购买了期权，其实是购买了一种权利，期权到期时，根据波动的情况，你可以选择行权，也可以选择弃权。\n第一个是房地产的案例。有家开发商在新规划的地块上建房，现在一切还在图纸上，一年后才能交房。现在可以跟开发商先签约，谈好价格，一年后再买入。开发商为确保你不违约，要求你缴纳一笔抵押金（ 万老师这里用『抵押金』一词，我理解『保证金』更符合我们的直觉。是笔误？还是美国的房产市场跟中国不一样？ ）。用期权思维，这相当于用抵押金买了一个 call。如果一年后房子升值，你有权以当初的低价买入这套房子；如果房价跌了，你大可违约，无非就是损失掉那一点抵押金。因此，正确的操作是多签几份合约，等房屋升值，再把这些合约转手卖出去。万一房屋没有升值，你损失的，也就是买 call 的钱，也就是那点抵押金。但房屋升值，你的收益上不封顶。\n上面这个例子，我理解万老师讲的是美国房产市场。在中国，你跟开发商签订的合约，实际上没办法转手卖出去。开发商不会允许你赚走本来应该由他来赚的溢价。开发商不需要你给他的收益上保险。因为在中国，房价上涨是大概率事件。期房合约是一个无法交易的 call。\n因为 option 是权利，所以买入 option 需要付代价。例如，买入股票期权，代价就是钞票。你需要购买期权。\n实际中，期权既可能被当做杠杆，放到股票的价格波动，又被当做是股票价格的保险，帮股票持有者提前锁定收益，或者对抗风险。这两种属性，投机和对抗风险，是期权顺（标的价格趋）势操作和逆（标的价格趋）势操作时，达成的不同效果而已。\n与期权对应的，是股票。与期权思维对应的，是股票思维。\n2.2. 『期权是一种特权』 #  第二个例子，是俱乐部买足球运动员的例子。俱乐部买卖成年球星，就像是买卖股票，买卖后，无论涨跌都得自己承受。而俱乐部签一个青少年球员，却像是买期权，支付很少的价格，就可以把他锁定。如果他将来能踢出来，俱乐部有优先购买权，到时候再把他变成股票，连转会费都省了。如果他不是当球星的料，俱乐部最多损失一点青训的钱，和巨额转会费相比，微不足道。\n你看，俱乐部以有限的损失上限（青训的钱），去搏一个很大的获利上限（青少年球员中踢出球星来），这是一个不对称的关系。波动上行，你的收益上不封顶；波动下行， 你的损失只是固定的一点点。期权，是一种特权。 用纳西姆·塔勒布在《反脆弱》一书中的提法，这就是『反脆弱』。风险的不对称性，就是反脆弱的数学原理。\n只有当你手里有期权的时候，你才谈得上『拥抱不确定性』。如果你手里只有股票，你得考虑承担一切下行的波动风险。\n如果你就是年轻的球员，那你手里握着的不是期权，而是股票。你没有特权，一切波动下行的风险，都需要由你来承担。你的收益虽然也是上不封顶，可是你的损失下不封底。想一想，这真是太可怕了。\n期权的价格，由下面几个因素决定。1）股票的当前价格；2）期权的到期时间；3）期权规定的履约价格；4）固定的银行利率；5）股票波动性。银行利率考虑的是期权的流动性，我们这里忽略。其它几个因素，应该都比较好理解。1 和 3 决定了对股票价格波动程度的期望，5 代表既往的波动程度，2 代表波动向预期方向走的机会大小。\n手握期权的人，有特权，拥有不对称性。他们未来的损失固定，收益却上不封顶。因此他们希望使劲折腾，他们喜欢极端。他们期待『万一成功了呢』。\n相对应的，是手握股票的人。波动的上行和下行，都需要他们自己来承担后果。他们的风险很高，他们不希望折腾。\n 期权 = 不对称性 + 理性选择 自己开公司是股票思维，风险投资是期权思维。 奋斗是股票思维，演化是期权思维。 结婚是股票思维，暧昧是期权思维。 供给侧是股票思维，需求侧是期权思维。  期权万般好，为什么还是有人买股票呢？万老师给出的解释是，买股票——也就是亲自承担下行的全部风险——才是 skin in the game，才是利益攸关，才有资格出手干预。\n2.3. 非线性和反脆弱 #  非线性是最近两年提得比较多的流行词。什么是非线性呢？就是结果和输入的关系不是直线，不成比例。\n第三个例子，喝啤酒，喝一瓶很愉快。那喝两瓶呢？是喝一瓶啤酒的愉快程度乘以二吗？不是。喝啤酒这样的事情，是边际效应递减的事儿。随着喝啤酒瓶数的增加，愉快程度是越升越慢的，达到一个峰值以后还会下降，下不封底。如下图。\n 数学上，脆弱就是指这样一个上凸下凹的非线性曲线，英文叫 concave。它代表上行利益有限，天花板低；下行的危险却是无底的。 脆弱的东西边际效应递减，容易出现黑天鹅事件。\n反脆弱与之相对应，指的是上凹下凸的曲线，英文叫 convex。它代表短期收益下行，但长期看，收益上不封顶。 例如学习说相声。刚开始学，很难会有什么显著效果，但坚持下来，随着水平的进步，说不定有一天说相声的本领强过郭德纲。反脆弱曲线，是一条边际效应递增的曲线。\n用数学中的『琴生不等式』来解释脆弱和反脆弱的曲线。对脆弱曲线（concave），函数的平均值小于平均值的函数；对反脆弱曲线（convex），函数的平均值大于平均值的函数。通俗来说，对于脆弱的东西，你希望把输入弄得均匀一点，因为『平均值的函数』比较温和；对于反脆弱的东西，你希望把它的输入弄得极端一点，因为先取『函数』获利最多。\n比如城市交通，就是脆弱的。我们不希望有早高峰晚高峰，太极端，我们希望尽量均匀一点。最好是每个小时上路的汽车，都保持均量，这样就不会堵车了。\n比如软件开发，是脆弱的。项目内风险、项目外风险一大堆，一丁点儿意外情况就会延期。因此，我们也希望它能均匀一点。最好是每天都能完成一部分，每天能验收一部分，如果风险一定会发生（墨菲定律），那我们也希望风险每天发生一点，这样我们每天解决一点，项目整体的风险更小。这样更不容易延期。修桥修路也是同理，分段施工，保持输入均匀。\n再比如上面提到的俱乐部选球星，也是反脆弱的。俱乐部才不在乎一个球员是不是语数外全面发展，他们只在乎这个球员能不能踢好球。一名偶尔能踢出世界波的球员，要比一名平均水平跟他差不多，但是表现稳定的球员，价格更贵。因为俱乐部要的是球员踢出好球。俱乐部有特权。\n我再补充一个，韩寒也是这个道理。高考不喜欢韩寒，韩寒偏科太厉害。可是人们喜欢韩寒，因为韩寒写得一手好文章。人们需要好文章，他们才不管写出好文章的韩寒，他的数理化课程有多差，那跟韩寒的好文章没关系。高考很脆弱，它选通才，希望考生成绩平衡一些。人们有 option，人们有特权。\n学习也是一个反脆弱的过程。你得保持开放的态度，什么都愿意了解，但是不不想给每个领域平均分配学习时间。把大部分时间用于一本特别难的书，你才能有巨大的收获。你需要大胆开始，无情放弃。\n塔勒布据此提出『杠铃原则』：大部分资源用在最低风险的东西上，少量资源用于追逐最高的风险。如果健身是反脆弱的，我们就应该时而放松，时而猛练；如果健康饮食是反脆弱的，我们就应该时而节食好几天，时而大吃一顿。\n2.4. 度量现在和未来的重要性 #  确实，老百姓们谈起『不确定性』、『机会』、『风险』这些词，都是泛泛而谈。说的可能都是主观感觉。而我们需要一个理性的、量化的、可操作的框架。金融理论恰好提供了这么一套框架。\n万老师从 一篇博文中受到启发，用期权思维来解释人类历史的发展。\n首先普及一个概念，因子delta。delta 代表当前股价的波动净值，被对应期权的波动净值除，所得之商。（波动后的期权价格 - 波动前的期权价格）除以（波动后的股价 - 波动前的股价）。delta 总在 0 到 1 之间波动，代表的是期权对股价波动的的敏感程度。delta 趋于 0，期权对当前股价的波动最不敏感，这个期权是反脆弱的；delta 趋于 1，期权对当前股价的波动非常敏感，期权对股价的长远表现毫不在意，只在意现在。最极端，delta = 1，这不是期权，这就是股票。\n 宁欺白须公，莫欺少年穷。\n 中国人讲一个人的功过，身后才可盖棺定论，在世时，永远有翻盘机会。说的就是这个道理。期权思维来讲，就是离到期时间越远，变数越大，看涨/看跌的机会越高，所以期权的价格也越高。白须公人生时日唔多，人生成就基本已成定数；少年路还长，变数还多，不可以当下好坏评价。\n 对待变革中的人\n 股票价格波动越大，当下股价对期权的影响因子（delta）越小。换句话说，股价越折腾，当下怎样，越不重要。 这也是一种期权思维。\n对于变革中的人，比如创业者，或者只身闯荡大城市的人，他的未来有无限种可能，只要他是个敢闯敢拼的人，现在如何一点不重要。手握期权的人，看好他，你可以买他一个 call；不看好他，可以买他一个 put。但无论如何，你投资他的这个 option，delta 值都不大。\n既然 delta 低，我们身处变革中的时候，要尽快做一些能把自己往好的方向变革的事情，比单纯改善现在的境遇，有用得多。\n 生逢乱世\n 有一种比较极端的人生波动，比如生逢乱世，颠沛流离，没有基本的安全感，缺乏抗风险的条件，成败得失，波动带来的利益得失都得自己兜着。\n用期权模拟这种极端情况，相当于你即买了自己的 call，又卖了自己的 put。你不是在对冲风险，你是在体验风险。股价上行，你能赚钱；股价下行，你得赔钱。而且输赢在很大程度上都不保底。\n万老师讲，数学上可以证明，这个即买 call 又卖 put 的组合，总 delta = 1。简单说，你不仅完全持有自己这只股票，还被禁止与外界做期权交易。所以，正确的策略是只在乎现在，完全不在乎未来。\n这和很多贫穷家庭的孩子行为模式一致。今朝有酒今朝醉。\n3. 生活和工作中的期权思维 #  除了万老师举的例子，我还发现生活和工作中，有很多可以用期权思维去理解的例子。\n3.1. 工作中的责任感 #  万老师前面已经提过，创业是持有股票，股东承担股票波动的收益和风险，因此股东希望股票平稳变化。老板是股票思维。\n打工是持有期权，对下行波动的风险有限制，同时享受上行波动带来的收益，上不封顶。实在不行，还能行使特权，换个工作。员工是期权思维。\n吴军也说过这个问题，最佳的企业管理方式就像开车，组织下层（员工）应该是引擎，创新的动力从下层来；而组织上层（老板）负责打方向和踩刹车，他们适度给引擎降降温，给整辆车指明方向。用期权思维和股票思维来理解，也能得出同样的结论。员工是期权思维，他希望企业做大做强，他能享受企业上行带来的收益。企业万一做不好，他的损失很小，或者就没什么损失。企业做不好的损失由股份持有人承担，由老板承担，所以老板关注的是，万一企业做不好怎么办，他们承担企业下行波动的风险，他们做决策更多考虑风险。\n老板盯问题，审风险，员工谋发展。\n看，这是不是挺反直觉的？跟我们的直觉恰好相反。\n现实中有些企业就跟我们的直觉一致，跟股票和期权的思维相反。这样的企业里面，老板累死累活劳心劳力，恨员工木木然。这样的企业，用期权思维来看，症结就很简单了。员工不持有期权，员工享受不到企业上行带来的收益，企业的波动跟他们没关系，员工只是出卖工作时间的劳动力而已。在这样的企业里面，做事对得起这份薪水就好，不值得奋斗。\n3.2. 2VC 创业模式崩溃 #  创业是一件成功概率比较低的事，VC（Venture Capital，风险投资）利用期权思维，以早期注资、提供协助的方式，帮助创业者专注于产品和业务，提高创业成功的概率。VC 做的是以小博大的生意，他们买创业者的 call，帮创业者的损失上保险。创业者输了也不要紧，不需要承担失败的经济损失。这是 VC 的基本逻辑。\n国内从十多年前，出现一波 2VC（to VC，面向风险投资）的『创业』逻辑，也叫『PPT 创业』。他们的逻辑是，做一份 BP（商业计划书），找到 VC 投资。投资到位以后，像模像样的拉队伍、做产品。迅速把钱烧光以后，跟 VC 报告，做个结项，再继续下一轮写 BP 拉融资的周期。\n这种创业方式中，VC 投资创业者，买了创业者的 call，他们是期权思维。创业者也是期权思维，他们投资了行业 + 资本这个组合的期权，他们空手套白狼，他们买行业和资本的 put。\n当行业和资本市场行情不错的时候，VC 打工，PPT 创业者赚钱，行业和资本赔钱。做多行业的人受累，做空行业的人赚钱，这就是泡沫。\n3.3. 创业，到底是股份思维还是期权思维 #  这个话题很有意思。过去几年，常能看到对穷忙的创业者。他们喜欢折腾，喜欢冒险，不讲方法，一把梭，就是干。看上去很享受尝试的过程，对结果不在意。就像在瞎忙。\n万老师不是说创业者是股票思维吗？可是这类创业者，为什么这么喜欢折腾呢？折腾是期权思维的特征啊。这些创业者，他们是傻子吗？是基因变异？还是他们不懂经济理论，所以做法不能表达自己的想法呢？\n创业，到底是股票思维，还是期权思维？\n我思考了一下，觉得答案在于：你的代价是什么，你输不输得起。\n如果下行波动带来的损失，你承担不起，那你应该用股票思维，多考虑下行波动的风险。你的损失超过你的承受范围，你要尽量避免损失。相反，如果下行波动带来的损失，你承担得起，你的代价不大， 那你就应该用期权思维，使劲折腾。万一折腾出个动静来，收益可是上不封顶。万一折腾失败了，也没关系，损失你兜得住。\n3.4. 创业是否应该 all in #  首先得定义下，什么叫 all in。\n有些创业者是时间 all in。年轻的他们，最不缺的就是时间，这种方式的 all in 对他们简直就是零风险零损失。如果能积累下经验和人脉，不亏还赚。不使劲折腾，对不起人生，对不起青春。这样的 all in，何乐而不为呢？\n有些创业者拿出十万元跟人合伙开蛋糕店，这些钱是他东拼西凑来的，是他的全部家当，一家人都指望他的蛋糕店能赚钱养家。虽然十万不多，但这个损失，他承担不起。这次创业对他来说，妥妥的是股票思维。下行波动带来的风险，他得全部承担。这样的 all in，应当审慎。\n吴军在他的《信息论 40 讲（第 17 讲）》里面提到，在信息论中，任何硬性的决定（hard decision）都要损失信息，而且这样的损失是巨大的，下不封底，补都补不回来。这里讲的补不回来的损失，我理解就是前面提到的，承受不起的损失。\n所以再有人跟你说创业要 all in，你静静地看着他，笑笑就好了。当你生活无虞，也可以投入自己最不值价的资源，玩一把 all in。\n3.5. 战略懒惰和战术勤奋 #  雷军说过一句话，不要用战术上的勤奋，掩盖你的战略上的懒惰。\n什么样的人，才会用战术勤奋，去掩盖战略懒惰？\n是期权思维的人。\n期权思维的人有特权，他们享受风险不对称带来的特权，他们不用承担下行波动带来的风险，所以他们更愿意以战术勤奋的方式来折腾。\n那为什么会战略懒惰呢？我猜，是因为他们的期权不充分，他们享受不到企业上行波动带来的收益。享受不到上行波动的收益，最大的问题是，个人和企业的目标就会不一致。个人面临二选一，要么为企业投入，要么为个人投入。难两全。\n举个例子。\n华杉讲《孙子兵法》，第一篇五事七计，华杉就强调，这里的『计』是计算的『计』，不是奇谋巧计的『计』。指战前要做好基本面的计算，基本面上有了胜算才能开打，先胜后战，而不是先打起来，再去想怎么胜利。这是做人做事的基本道理。\n现实中有些老板就是好像不理解，好多决策都抱着『做做试试嘛』。这个领域的专家告诉他，这样做不行，他也不放弃，坚持要试。结果呢，一败涂地。难道是这个老板傻，不明事理？我看不是。只能说明，这个老板思考事情，用的是期权思维。他对损失的预判，远远小于事成以后，收益对他的诱惑。风险的不对称性，这种特权，使他宁愿违背市场规律，违背逻辑去做事，去赌一把运气。\n3.6. 亲子，朋友和师长 #  十几岁的孩子叛逆，很多孩子抱怨父母思维僵固，不思进取，束缚自己手脚，不让尝试这个，也不让尝试那个，胆小如鼠。\n用股票思维，孩子是父母的股票，父母首先考虑的，是股价的下行波动，其次才是希望这只股票大涨，一飞冲天。孩子这只股票的任何下行波动，父母都要完全承担，而有些损失，真的是补不回来的，承担不起。因此也就能理解，为什么父母对孩子的选择，经常束手束脚，不予支持。\n师长同学的关系，和亲子关系不同。从入学开始，大家就知道，这段关系会维持几年时间。老师希望这几年你健康平安，学有所成。同学至少希望能跟你和平相处，有摩擦最好尽快消除，以免往后难堪。大家总体还是会注意一个损失的底线。在上学的那几年，师长关系是持有对方的股份，无论好坏你都逃不开，上行波动和下行波动你都得承受。\n朋友关系又不同。交朋友，更注重的是对方的长处，而非底线。我们很少因为这人不太坏，选择跟他交朋友吧。跟人交朋友，大多数时候是因为对方某方面有特长，吸引到自己。交朋友是期权思维，是特权。对方有特长，你选择和他做朋友。你期望从他的特长方面获得他的帮助。期望他的特长能帮他更成功。你跟他交朋友是买了他的 call。你希望他发挥所长，使劲折腾。\n3.7. 职场上下级 #  今天听云计算领域大佬，飞总，讲他的职场故事。他曾经的一个大领导，就在他职场发展最关键的时候，干了件等于背后捅他一刀的事。想当年，我比飞总还傻逼。当年按下不表，说点职场关系中的期权思维。\n职场中上下级的关系，首先是共进退的关系。彼此会承受一定程度对方的下行风险，这个下行风险带来的损失可能大到让自己付出惨痛代价，但不会下不保底。因为实在太差，对方就该被公司清除出队伍了。同时，我们也享受对方上行带来的收益。这个收益通过团队传给自己。而上行收益也是有个限制的。太突出的人，公司一定会委以重任，他会走到很高的 level 去，离你比较远，跟你也就没关系了。\n概括起来，职场中的关系，下有保底，上有封顶。是一种比较特别的 option。\n现实中，我们常常辅以私人间的关系。比如领导看一个下属有潜力，他可以买他的 call。平时对他多加点拨，利益分配时多照顾他一些，多给他一些展示自己的机会。等等。这个 call 是人与人之间的连接，而不只由工作关系来维系。这位领导离职了，去到新公司，下属对他的感情依然会存在。\n反之，如果一个领导看某个下属不顺眼，常用的办法可能是，找个机会，尽快让他从自己的 team 中滚蛋。这等于卖了这个下属的 put。这种交易很可能是要付出代价的。比如旁边的 team B 接收了这个不讨上级喜欢的下属，条件是原 team A 要帮 team B 承担绩效考核中的两个 C 名额。\n处职场，最理想的情况，是让领导买自己的 call，办法是你得让你的领导看到，你现在的股价高（能力不错），波动性强（能折腾，会来事儿），到期时间长（年轻嘛），信誉好能兑付（信用好，知恩图报）。\n如果和领导不对付，处不好，那就让领导不看好你，让领导卖自己的 put。领导不看好你，卖 put 可以提前锁定收益，何乐而不为。\n最最糟糕的情况，是雪藏。没错，就是娱乐圈常用的那个词，雪藏。雪藏的逻辑是，我要让你在我这里，股价归于零。从领导角度看，有点同归于尽的意思。能被雪藏的下属，一定干了什么让领导痛恨的事情。\n4. 结语 #  其实还有很多现实中的例子，是可以用期权思维来解释的。就不再啰嗦了。大家可以自己去发现。\n现代社会大体上，是一个商业社会，陌生人的连接频率和深度，明显多于传统乡土社会中，乡里乡亲之间的频率和深度。年轻人闯荡大城市，首先要学习的，就应该是商业社会的精神和逻辑。可是，课堂上，没有这样的课程教授。甚至基本的个人财务管理知识，都不教授，却要在走出象牙塔的那一刻，让一个年轻人独立面对所有的诱惑、诡计和机遇，独立去做抉择。\n我以前听人说，现代文明随着西方文化扩散，走入商业社会，对中国这样的乡土文化国家，是不公平的。我们的文化骨子里不熟悉商业社会那一套理论，我们吃亏了。西方自古是商业社会，他们更占便宜。\n可是吃的什么亏？吃了多大亏？没人讲得清楚。这种提法听起来像在抱怨，后来也就没人再提了。\n随着对西方文化的理解加深，对科技，对经济，对社会学，等等学科的知识理解加深，虽然看到不小的差异，也越来越能看清楚西方文化和商业社会的底层规律，越觉得其实万变不离其宗。落到人类对自由、幸福、健康的追求，东西方都是一样的。有差别的，是从生活中的一些微小的共识开始。\n所以其实不难，多接触多观察，多换位思考，我们也能很好地融入这个大的环境，过好国际化的生活和工作。\n这里举个例子。半个多月前，看了《美国陷阱》一书，对于作者在书中一边批评美国司法不公正，一边又赞扬美国司法体系透明的逻辑，表达了不理解。后面立刻有网友激烈评论到，说美国就是在利用自己的世界霸主地位，利用不平等的博弈，压制本国企业的竞争对手（作者是法国人，受到美国的司法指控）。我知道这位网友是借此影射中美贸易摩擦中，美方的做法。对他的反应，我完全能理解。但我觉得很奇怪的是，他没搞清楚什么叫平等博弈。\n博弈是一场棋局（playground）下，双边或者多边的策略游戏（play）。博弈有这么个前提，就是假设玩家（player）都是理性的，会从为自己负责的角度，做出理性选择。我认为对于一场博弈，只要双方都有出牌的机会，这场博弈就是平等的。历史上以小搏大、以弱胜强的博弈多得很。如果一定要双方实力相当，才能博弈，这世界恐怕弱势的一方恐怕永远没有翻盘机会。美国虽然强大，但是美国没有压制对手的出牌机会。特朗普一边加关税，一边呼吁领导人会谈。加关税不过是为了增加博弈筹码，不算不公平。再说，中国后来不也选择了加关税作为回应嘛。难道美国人也要说中国是在跟美国不平等博弈？\n多说一句。有聪明的读者这里可能会想到。仅仅保留对方的出牌机会，博弈就是平等的吗？那如果对方作弊呢？一方作弊的情况下，也算平等的博弈吗？\n答案是，算的。也是平等的博弈。只要大家还在牌桌上，手里还有牌，还有大家还有出牌机会，这就是平等的博弈。作弊是违反规则，没错。可是仔细想想，规则是什么？规则是前面若干次博弈的过程中，双方达成共识的协议。是之前若干次博弈的结果。如果现在形势变了，之前博弈中形成的均衡关系变了，强的一方变弱，弱的变强了，对应的规则是不是可以改变呢。否则哪里还需要新的博弈，哪里还需要谈判外交，甚至都不会发生世界大战。所谓作弊，不过是没有通知对方，单方面打破规则而已。万老师在《博弈论》最后一讲中，提到过最高级的博弈，就是制定新规则。讲的就是这个逻辑。\n所以你看，打小的文化熏陶，还是挺重要的。我们受中国传统文化的教育，活在商业社会里面，真的很吃亏。\n我们是从乡土文化中成长起来的。我们承认自己对商业社会的底层逻辑有不足。我们愿意多花时间，努力学习，争取迎头赶上。\n好消息是，万维钢老师在提到最近解读《范围》一书的时候，反复提到，没有『赢起跑线』的说法。人生是一场无限游戏，除了死亡，没有终点。所以无论什么时候，只要努力，都有机会翻盘。所谓赢起跑线，不过先发优势，不过是给后来者树立的一道门槛而已。\n再强调一句，期权思维真的很有用。希望你也能在工作和生活中，学会使用它。\n"});index.add({'id':6,'href':'/posts/2019/06/10/%E6%AF%8F%E4%B8%AA%E6%9E%B6%E6%9E%84%E5%B8%88%E9%83%BD%E5%BA%94%E8%AF%A5%E7%A0%94%E7%A9%B6%E4%B8%8B%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B/','title':"『每个架构师都应该研究下康威定律』",'section':"Posts",'content':"InfoQ 中国在 2016 年，发表过一篇文章， 杨波的《 每个架构师都应该研究下康威定律》。这篇文章对当时的我，触动是非常深刻的。一些说不清道不明的经验，被别人用浅显易懂的道理，讲得一清二楚。\n康威定律是很早就听说过的，后来陆续又有一些接触，每次时隔一段时间再做了解，就会有非常深的触动。我理解，原因无他，因为它聚焦在组织架构和系统设计的关系上，而这两者，一个是架构师目标，一个是架构师的手段/工具。文中用很简短的一句话，讲清楚了这中间的关系。\n 系统架构的目标是解决利益相关者的关注点。\n 这句话简直太重要，太精妙了。\n1. 架构师的目标，是各个利益相关者的关注点 #  很多人对架构师的误解，都以为是架构师是技术执行，是 top-level coder，对 coding 的结果负责。这就犯了以表象取人的问题。为什么？我后面再提。\n架构师首先应该关注的，是项目中，各个角色，各个利益相关者，他们的利益诉求，他们在项目中的焦点。根据这些焦点，得到一个权衡的方案，并取得最大限度的支持。\n2. 架构是权衡的艺术 #  权衡的英文表述比较准确一些。trade-off 。利益交易和平衡。\n权衡的方法是博弈，无论是纳什均衡还是帕累托最优，权衡目标是达成一个相对稳定的博弈结果。这个结果，就是架构的目标需求。\n所以你看，脱离实际场景谈『架构』，本来就是虚空的。\n3. 架构首先是业务架构，其次才是技术架构 #  道理很简单，业务架构往往涉及最直接的利益分配，从市场到产品到后勤保障，通常都对业务指标虎视眈眈。产品技术指标他们并不关心。\n从工作流程上来讲，业务架构决定产品设计，产品设计决定技术设计。说业务架构是技术架构的前置步骤，一点不为过。\n唯一的例外，可能就是大厂里面做平台产品研发的案例了。从无到有形成一个平台，比如阿里 IaaS 云。商业模式不清晰，业务架构反而受制于技术架构。不过这种机会今后出现的可能性，越来越小。\n4. 技术架构是工具/手段 #  确定了各个 stakeholder 的 key points，剩下就是怎么做的事情了。技术手段、技术架构，不过是实现平衡的工具而已。通过技术架构，将权衡的方案，表达出来，这是一个称职的架构师，秀于外的工作。\n我个人对架构师的定义是，以权衡项目中各个利益相关方的利益关注点为目标，以技术设计为工具和手段，以持续的产品技术服务为交付物的产品研发决策者。\n所以回过头去看，架构师的工作中，技术架构的部分，优先级排不到前列，称得上是最基础、最『本分』的技能。技术好，技术设计灵活，不是一名架构师值得炫耀的资本。架构师值得炫耀的，是他能够在复杂纷扰的环境中，仍然可以理出线头，正确判断形势，做出合理的架构设计。\n比方说，一名做 ToB 业务的 SaaS 平台架构师，既往工作中，以项目经理/甲方的利益诉求为主，以己方销售的利益诉求为辅，养成了习惯。一个需求做不做，怎么做，第一问己方销售/甲方，其次问项目经理，总可以得到答案。有一天，他去到一家做 toC 产品的公司任架构师，他面临的 stakeholders 发生了翻天覆地的变化，『甲方』成了成千上万的个体，怎么去问每个个体，他们的 key points 是什么？所以这位架构师的转变是，以直接上级的利益诉求为主，以产品经理的利益诉求为辅。那么，这个架构师，很明显就犯了最低级的失职。即便他的技术实力再强，首先目标就错了，谈何取得胜利？\n雷军讲的，以战术上的勤奋，掩盖战略上的懒惰，大概也是说这个意思。\n啰嗦一句。无论是 toC 产品还是 toB 产品，架构师首先应该予以重视的 stakeholder，都应该是财务上销项对应的一方。也就是为公司提供入账的一方。有人可能会觉得奇怪，toC 产品不应该是用户为首要的 stakeholder 吗？真不一定。如果是付费用户，那么他们是公司账上销项对应的一方，他们算首要的 stackholder。如果用户是免费使用公司服务，那么应该把他们看做产品/服务的一部分，把他们看做产品/服务的资源，而不是 stackholder。既然是资源，能为己所用就可以；既然是产品的一部分，只要产品不散就可以。不需要过多考虑免费用户的诉求和偏好。\n有些免费产品讲情怀，前提是他们活着不成问题。没干爹可抱的企业，先把自己的财务账算清楚，努力维持公司现金流为正，先有资本活下去，才是正道。别人在山顶为踏足云顶做赋，那是情怀，你在山底谈云，那是浮云。\n5. 架构不止『偏技术』，不是每一名架构师都需要『偏管理』的搭档 #  架构师的责任，是交付能够让至少大多数 stakeholder 满意的架构方案，并且落地执行，交付一个 predictable 的结果。\n一个需要对交付结果负责的人，就不能是一个不懂『管理』的人。沟通、协调、跟进、攻坚…… 任意一个环节，都离不开管理相关的工作。给架构师配一名『偏管理』的搭档，我猜是望文生义的误会。\n有些项目庞大，架构师的职责由一个团队承担，架构师团队中，有一名首席架构师兼任团队的管理协调。但并不是说，非首席架构师，就不需要懂管理。真要是不懂管理，最多算研发骨干，肯定达不到架构师的要求。\n此外，一名好的架构师，一定是一位 nice 的 listener，否则怎么去沟通和判断各个 stakeholder 的 key points 呢。一名『偏管理』的搭档，究竟能帮这位又 nice 又善于倾听的架构师做点什么呢？真的很难讲。\n6. 架构师是一个团队的工作 #  架构师需要沟通，需要协调，需要以技术方案为工具，需要完成设计，再交流，然后 sell idea，获得大多数 stakeholder 认可。还需要落地项目，交付给大家一个 predictable 的结果。这样的工作，绝不是一个人能搞定的。需要一个主心骨，具备较强的主人翁精神/企业家精神，以及相对较大的（临时）授权。架构师的工作，远不是单打独斗的宅男可以完成的。他需要一个团队。\n在架构师的选择和授权上，其实就是一个择人任势的过程。架构师在他下属团队的建设上，也是一个择人任势的过程。两部分，前者属于宏观层面，择人为重；后者属于中观层面，择人和任势并重。\n7. 康威定律是连接组织架构和技术设计的桥梁 #  康威定律的意义在于，告诉我们，把 stakeholder 的 key points 转化为技术设计时，需要遵循的一个规则。\n举个例子，一家以市场推广为主导的互联网金融公司，建设 SaaS 平台，架构师的第一反应应该是，市场/推广/获客相关的功能，占比要比其它功能模块重，要更复杂和全面。这就是康威定律的具体体现。公司以市场为主导，市场相关的 stakeholder 话语权很重，架构设计必须要得到这些 stakeholder 的认可，才能算过关。聪明的架构师，会先跟市场部领导和骨干沟通，获取他们的利益诉求，架构设计中把市场相关的功能放在最前面，予以强调。反之，架构师以技术炫技为架构设计的亮点，出来的方案一定不会获得市场部相关领导的认可。最后做出来，很大概率会被市场部同事 diss，连带架构师在直属领导心目中也会扣分。\n我曾经试图找康威定律的反例，很可惜，越想找这样的例子，越发觉康威定律是颠扑不破的真理。原因就在于分工界面上。以分工界面划分细分工的岗位，为这些岗位分别制定工作流程和质量评价标准，几乎成了每个现代化组织的必选项。通俗来说，就是按照岗位，把大家伙儿分个类。每个岗位都有独立的工作流程，和考核指标。岗位和岗位之间，由工作流程中设计的『工件』（也叫交付物）来连接。大家在脑子里面想一想，其实这就是一个模块化的系统。对不对？模块化设计的思想，在这里也是适用的。低耦合，高内聚。高内聚先不说。低耦合意味着，分工界面一定要足够简洁。对应在系统架构里面，一个主要功能模块，一定会对应一个/一类岗位的责任人。这样算下来，一个岗位，一定会对应一组边界清晰的系统模块。否则，这个岗位的分工界面上，一定会发生工件难以验收，工作难以考核的情况。\n多说两句。过去讲康威定律，举例大多是反过来的。例如 维基百科『康威定律』词条中的一个例子。\n 如果你有 4 个团队在做一个编译器，你会得到一个 4 遍处理的编译器。\n 我觉得这种认识在现实中恰好相反。\n因为有什么样的组织架构，就会有什么样的系统设计。这是过去几十年那个时代的特征。同时代的特征还有，对代码空间复杂度或者时间复杂度的极致追求。那时的软件研发中，硬件成本占比高，人力成本占比相对较低，且计算机程序员数量远不如现在多，程序员的成果最好能尽量复用。所以才会有组织架构决定系统设计的逻辑。\n现在是人力成本占大头，程序员数量供过于求的时代。特别是在中美贸易战之后。在这样的现实中，什么样的组织架构不重要，系统设计符合产品特点，交付的服务能让公司内外部客户都满意，才最重要。所以反过来，需要做什么样的产品，权衡出什么样的系统设计，研发团队也需要做相应的调整，以组织架构匹配技术架构的设计。如此才能职责清晰地完成工作。\n8. 胜可知而不可为 #  刚听了华杉老师的得到直播，《跟华杉学品牌营销》开学典礼。华山老师很厉害，《孙子兵法》快成了他个人品牌的超级符号。\n直播中，看到华与华公司的最大的会议室，名字叫『知胜』，取自孙子兵法中『胜可知而不可为』这一句。听到这里时，给我很大的启发。\n华杉老师说，他们做品牌营销，也是可以知胜的。一个品牌案子做出来，能不能成，他们是可以知道的。怎么知道？直播中华杉老师没细讲，我记得大意是说，他们会通过周会，周报的形式，做 list 的形式，把战略目标缩减为 1 个，把关键动作缩减到 1-3 个，然后执行。《华杉讲透孙子兵法》中更详尽一些。我写一些，不仅对指导架构师工作，对所有需要自我管理的岗位，都非常有意义。\n 他（指东汉史学家荀悦）说要确立一个策略来决胜，无论是战争还是搞改革，公司要做什么事，主要有三个要点。\n第一是形，是大体得失之数。就是判断大体行不行。\n第二是势，是临时之宜、进退之机。到了现场随机应变、顺势而为，就是讲势。\n第三是情，是感情的情。用我们现在的话来说，应该是意志力，看你的意志够不够坚定。对于主帅来说是看你的意志力，对于团队来说是看你的士气。\n 上面是讲以什么维度『知胜』。\n （《孙子兵法》对于势，）记住四个字最关键：先胜后战。我们把它翻译一下，就是赢了再打。\n……\n 『孙子曰：昔之善战者，先为不可胜，以待敌之可胜。不可胜在己，可胜在敌。』\n ……\n 『孙子曰：故善战者，能为不可胜，不能使敌之可胜。故曰：胜可知，而不可为。』\n ……\n一句话，人管得了自己，管不了别人，先管好自己再观察别人，别人如果无懈可击，我们是没有办法取胜的。\n 我们管好自己，可以保证自己立于不败之地，敌人也无法战胜我们。 这是关于从哪里知胜的。先做到不败，再等待敌人给我们送来胜利。\n做架构师的工作，见效的周期往往很长。像华为飞总那样的大拿，一个项目要一年以上见收益，半年一次述职/考核，这样的架构师，最重要的是确保自己的工作是正确的，能保证不败是第一步。所以有趣的一点，真正的架构师，特别是做大架构的架构师，做出来的架构通常都是四平八稳的，技术设计上反而很少亮点。因为要控制风险。一个小风险经过这么长的时间跨度，这么复杂的执行流程，都很容易放大。经过历史检验的老技术更稳妥。做大架构，就是图个『能为不可胜』。炫技的大多是菜鸟。\n"});index.add({'id':7,'href':'/posts/2019/06/10/%E4%BB%8E-hexo-%E6%90%AC%E8%BF%81%E5%88%B0-hugo/','title':"从 hexo 搬迁到 hugo",'section':"Posts",'content':"说是第一篇文章，其实是转到 Hugo 以后的第一篇文章。\n至于转到 hugo 的原因，见下面的两篇文章。\n  hexo 又报 package 的依赖问题了  hexo 又成了技术流的玩具  总的来说，就是 npm 对 package 的依赖管理松散，再加上 hexo 社区对一些常用 plugins 惰于升级维护，导致 dependencies 经常冲突。升级不是，不升级也不是。最后干脆什么都用不了。\n以前是重新安装一个 hexo 环境，还有几率能解决依赖的问题（部分 plugins 会降级安装）。但既然已经不是第一次遇到这种情况，问题的根源解决不了，没准儿以后还会遇到，干脆下定决心弃坑 hexo。\nhugo 早就听说大名，golang 也是我喜欢的。基本上没调研其它 blog service，直接开始研究起 hugo 来。\n1. 安装 hugo #  我用 MacBook Pro，装了 HomeBrew，安装 hugo 相对简单。\nbrew install hugo 2. 建立站点 #  hugo new site my-blog 完成以后，my-blog 目录下会有以下子目录。\n archetypes: 下面有一个 default.md 的模板，是新建文章的时候，会用到的模板。 config.toml: TOML 格式的配置文件。 content: 放文章源文件，.md 文件的地方。 themes: 主题目录。具体用哪个主题，参照 config.toml 里面的配置。 static: 静态文件的目录。这里的文件，会被 hugo 原样拷贝到 public 目录中。 public: 编译后的目录。这里的文件通过你在 config.toml 中设置的 baseURL 直接访问。发布的博客，编译后，把这个目录的内容直接发布到外网即可。  3. 主题 #  3.1. 安装主题 #  cd \u0026lt;my-blog\u0026gt; git init git clone https://github.com/rujews/maupassant-hugo themes/maupassant 修改 config.toml 中下面的配置。\ntheme = \u0026#34;maupassant\u0026#34; 3.2. 配置主题 #  config.toml\nbaseURL = \u0026#34;http://i.am.simonkuang.com/\u0026#34; languageCode = \u0026#34;cmn-Hans\u0026#34; title = \u0026#34;旷氏淇元\u0026#34; theme = \u0026#34;maupassant\u0026#34; preserveTaxonomyNames = false # false 的话，分类名称会自动小写。默认是 false disablePathToLower = false # true 的话，防止 hugo 自动将 url 转小写。默认是 false #googleAnalytics = \u0026#34;UA-45245769-1\u0026#34; [author] name = \u0026#34;Simon\u0026#34; [params] author = \u0026#34;Simon\u0026#34; subtitle = \u0026#34;旷淇元的个人博客\u0026#34; keywords = \u0026#34;\u0026#34; description = \u0026#34;\u0026#34; customJS = [\u0026#39;baidu.js\u0026#39;, \u0026#39;mermaid.js\u0026#39;] 3.3. 友情链接 #  config.toml\n[[params.links]] title = \u0026#34;agentzh 的 Nginx 教程\u0026#34; name = \u0026#34;agentzh 的 Nginx 教程\u0026#34; url = \u0026#34;http://openresty.org/download/agentzh-nginx-tutorials-zhcn.html\u0026#34; [[params.links]] title = \u0026#34;gitflow-cheatsheet\u0026#34; name = \u0026#34;gitflow-cheatsheet\u0026#34; url = \u0026#34;http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html\u0026#34; [[params.links]] title = \u0026#34;Laruence\u0026#34; name = \u0026#34;Laruence\u0026#34; url = \u0026#34;http://www.laruence.com/\u0026#34; 3.4. 自定义菜单 #  config.toml\n[menu] [[menu.main]] identifier = \u0026#34;books\u0026#34; name = \u0026#34;新书\u0026#34; url = \u0026#34;/books/\u0026#34; weight = 2 [[menu.main]] identifier = \u0026#34;archives\u0026#34; name = \u0026#34;归档\u0026#34; url = \u0026#34;/archives/\u0026#34; weight = 3 [[menu.main]] identifier = \u0026#34;about\u0026#34; name = \u0026#34;关于\u0026#34; url = \u0026#34;/about/\u0026#34; weight = 4 3.5. 文章归档操作 #  hugo new content/archives/index.md content/archives/index.md\n--- title: \u0026#34;归档\u0026#34; date: 2000-06-10T11:41:46+08:00 description: 小旷的个人博客。记录生活学习和工作的二三事。 type: archives --- 3.6. 其它静态文件 #  有些不需要我们转化的静态文件，比如 robots.txt、我们上传的附件等，这些不需要 Hugo 进行处理，可以直接放在 static 目录下，编译阶段，Hugo 会原封不动的拷贝到 public 目录下，方便一起部署。\n4. Mermaid 插件 #   Mermaid 还是必要的。必须保留，不然没法儿画图。\ncd \u0026lt;my-blog\u0026gt; mkdir -p static/js mkdir -p layouts/shortcodes static/js/mermaid.js\n;;(function() { var _mermaid_init = function() { mermaid.initialize({ startOnLoad: true, theme: \u0026#39;forest\u0026#39;, // themeCSS: \u0026#39;.node rect { fill: red; }\u0026#39;,  logLevel: 3, flowchart: { curve: \u0026#39;linear\u0026#39; }, gantt: { axisFormat: \u0026#39;%m/%d/%Y\u0026#39; }, sequence: { actorMargin: 50 }, // sequenceDiagram: { actorMargin: 300 } // deprecated  }); }; var hm = document.createElement(\u0026#34;script\u0026#34;); hm.src = \u0026#34;//unpkg.com/mermaid@8.0.0/dist/mermaid.min.js\u0026#34;; hm.onload = _mermaid_init; var s = document.getElementsByTagName(\u0026#34;script\u0026#34;)[0]; s.parentNode.insertBefore(hm, s); (function() { var codelist = document.querySelectorAll(\u0026#39;code.language-mermaid\u0026#39;); if (codelist \u0026amp;\u0026amp; \u0026#39;length\u0026#39; in codelist \u0026amp;\u0026amp; codelist.length \u0026gt; 0) { for (var i = 0; i \u0026lt; codelist.length; i++) { var div = document.createElement(\u0026#39;div\u0026#39;); div.className = \u0026#39;mermaid\u0026#39;; div.setAttribute(\u0026#39;align\u0026#39;, \u0026#39;center\u0026#39;); div.innerHTML = codelist[i].innerHTML.replace(/\u0026amp;amp;/g, \u0026#39;\u0026amp;\u0026#39;); codelist[i].replaceWith(div); } } })(); })(); layouts/shortcodes/mermaid.html\n\u0026lt;div class=\u0026#34;mermaid\u0026#34;\u0026gt; {{ .Inner }} \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//unpkg.com/mermaid@8.0.0/dist/mermaid.min.js\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; config.toml\n[params] customJS = [\u0026#39;mermaid.js\u0026#39;] # static/js/mermaid.js 会被添加到所有页的 footer 位置 如此这般，以后画图，可以用下面的方式操作。\n ```mermaid sequenceDiagram participant Publisher participant Broker participant Subscriber Publisher-Publisher: Store(Msg) Publisher-Broker: PUBLISH(QoS2, Msg) Broker-Broker: Store(Msg) Broker-Publisher: PUBREC Publisher-Broker: PUBREL Broker-Subscriber: PUBLISH(QoS2, Msg) Broker-Publisher: PUBCOMP Publisher-Publisher: Delete(Msg) Subscriber-Subscriber: Store(Msg) Subscriber-Broker: PUBREC Broker-Subscriber: PUBREL Subscriber-Subscriber: Notify(Msg) Subscriber-Broker: PUBCOMP Broker-Broker: Delete(Msg) Subscriber-Subscriber: Delete(Msg) ```  得到的效果如下。\nsequenceDiagram participant Publisher participant Broker participant Subscriber Publisher-\u0026gt;\u0026gt;Publisher: Store(Msg) Publisher-\u0026gt;\u0026gt;Broker: PUBLISH(QoS2, Msg) Broker-\u0026gt;\u0026gt;Broker: Store(Msg) Broker-\u0026gt;\u0026gt;Publisher: PUBREC Publisher-\u0026gt;\u0026gt;Broker: PUBREL Broker-\u0026gt;\u0026gt;Subscriber: PUBLISH(QoS2, Msg) Broker-\u0026gt;\u0026gt;Publisher: PUBCOMP Publisher-\u0026gt;\u0026gt;Publisher: Delete(Msg) Subscriber-\u0026gt;\u0026gt;Subscriber: Store(Msg) Subscriber-\u0026gt;\u0026gt;Broker: PUBREC Broker-\u0026gt;\u0026gt;Subscriber: PUBREL Subscriber-\u0026gt;\u0026gt;Subscriber: Notify(Msg) Subscriber-\u0026gt;\u0026gt;Broker: PUBCOMP Broker-\u0026gt;\u0026gt;Broker: Delete(Msg) Subscriber-\u0026gt;\u0026gt;Subscriber: Delete(Msg) 当然，按照 hugo shortcodes 的语法，写成下面这样也没问题。就是太啰嗦，一点不 markdown。\n \u0026#x007B;\u0026#x007B;\u0026#x007D;\u0026#x007D; sequenceDiagram participant Publisher participant Broker participant Subscriber Publisher-Publisher: Store(Msg) Publisher-Broker: PUBLISH(QoS2, Msg) Broker-Broker: Store(Msg) Broker-Publisher: PUBREC Publisher-Broker: PUBREL Broker-Subscriber: PUBLISH(QoS2, Msg) Broker-Publisher: PUBCOMP Publisher-Publisher: Delete(Msg) Subscriber-Subscriber: Store(Msg) Subscriber-Broker: PUBREC Broker-Subscriber: PUBREL Subscriber-Subscriber: Notify(Msg) Subscriber-Broker: PUBCOMP Broker-Broker: Delete(Msg) Subscriber-Subscriber: Delete(Msg) \u0026#x007B;\u0026#x007B;\u0026#x007D;\u0026#x007D;   参考如下。\n  从Hexo迁移到Hugo-送漂亮的Hugo Theme主题  把博客生成工具从 Hexo 迁移到 Hugo \u0026mdash; 配置与设置  Create Your Own Shortcodes  Mermaid Migration Example from Theme Learn  "});index.add({'id':8,'href':'/posts/2019/06/10/hexo-%E5%8F%88%E6%8A%A5-package-%E7%9A%84%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98%E4%BA%86/','title':"hexo 又报 package 的依赖问题了",'section':"Posts",'content':"因为 hexo 的 package 的依赖问题，特别是对彼此版本的依赖问题，折腾过两三次，一直没有特别好的解决办法。\nnode 本质上仍然是脚本语言，不像编译型语言，实在不行，还可以把 package 一个一个打成 binary，逐个消除 package 的依赖问题。node 做不到。当两个以上的 package 声明的依赖相互冲突时，这个项目基本上也就废了。没法儿正常使用了。\n有人会问，怎么可能出现这样的情况？开发者发现不了吗？\n开发者可能还真发现不了。首先，开发者的环境是既有的，是缓慢生长起来的，不是什么问题都能发现的。其次，CI 也不一定能发现问题。有些基础的 package 为了自身兼容性，对不同 node 环境做了兼容处理，在不同版本的 node 下，逻辑代码不同。再次，npm 的 peerDependencies 对 package 之间的依赖关系进行了解耦，有些依赖关系非强制，实际上是允许了冲突的存在。最后，node 的环境隔离方案，类似 pyenv 这样的，也有，非主流，而且治标不治本，仍然解决不了 package 之间的冲突。\n之前我遇到的问题是 peerDependencies 导致的。今天遇到的问题，则是对 node 版本的声明导致的。\n error nunjucks@3.1.3: The engine \u0026ldquo;node\u0026rdquo; is incompatible with this module. Expected version \u0026ldquo;\u0026gt;= 6.9.0 \u0026lt;= 11.0.0-0\u0026rdquo;. Got \u0026ldquo;12.4.0\u0026rdquo; error Found incompatible module\n 我的 node 是通过 HomeBrew 安装的，latest，当前版本 v12.4.0。\n对 node 一直有一点担心，然后这种担心在 2016 年左右，逐渐成了现实。那就是 npm 对 package 的依赖管理策略。越松散，越自由，就越极客，越小众；越独裁，越限制，就越方便，越大众。npm 很明显走前者的路线，而且偏向极端。我知道稍微有点能力的公司，用 RN/Vue/Angular…… 都是自己搭 package server，自己造 package。包括一些基础的 package。没别的，就为一条，质量可控。\n我一个小小 blogger，只是 hexo 用用 node，都这么不爽，能体会到前端工程师的辛苦。\n算了，及早拥抱 Hugo 吧。省得折腾。\n"});index.add({'id':9,'href':'/posts/2019/05/27/Mac-%E4%B8%8B-VirtualBox-%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%B1%95%E4%B8%8D%E5%85%BC%E5%AE%B9%E7%9A%84%E9%94%99%E8%AF%AF%E4%BF%AE%E5%A4%8D/','title':"Mac 下 VirtualBox 系统扩展不兼容的错误修复",'section':"Posts",'content':"Mac 上升级 VirtualBox 6.0.8，遇到一个报错，一直搞不定。大意是 system extension incompatible。提示框不是 warning 或者 error 图标，就是普通的 performance 图标，而且只出现一次，再安装，不会出现。\n网络上没有结论，大多是说在 Performance 里面做安全授权。然后我遇到的并不是这个问题，Performance 里面没有授权提示。于是自己试着用降级的办法，安装 5.2.30，还是不行，同样的错误。再降级，到 5.2.28，终于行了，安装成功。\n打开 5.2.28，发现有个提示，说有磁盘镜像失效，打开管理工具，发现是之前装的 Nox，在 VirtualBox 的配置中写入了 Nox 自己的镜像。卸载 Nox 的时候，Nox 没有从 VirtualBox 的配置中删除 Nox 的磁盘镜像。于是手动确认删除 Nox 相关的两个镜像。再进入 VirtualBox 就好了。\n今天忽然想起来，也许就是因为失效镜像，导致升级失败呢。于是再安装 VirtualBox 试试。果然，就行了。\n结论 #  对 VirtualBox 的失效镜像，一定要自行观察，手动清除，不能听之任之，容易造成潜在的问题。有一些模拟器啥的，安装的时候容易，卸载的时候麻烦，只能靠自己多留个心眼。\n"});index.add({'id':10,'href':'/posts/2019/05/23/%E5%A4%96%E8%B4%B8/%E8%B7%A8%E5%A2%83%E7%94%B5%E5%95%86/%E4%BB%A3%E8%B4%AD/%E5%85%A8%E7%90%83%E8%B4%AD/%E6%B5%B7%E6%B7%98%E9%80%82%E7%94%A8%E7%9A%84%E4%BC%98%E6%83%A0/','title':"外贸/跨境电商/代购/全球购/海淘适用的优惠",'section':"Posts",'content':"Vultr 是一款国外比较好的 VPS（虚拟服务器）的服务商。服务还算稳定，线路相对比较稳定，重点是，价格便宜。Vultr 在国外主要的节点城市都有自己的机房。日本、新加坡、阿姆斯特丹、巴黎、法兰克福、伦敦、美国东西海岸、多伦多、悉尼。\n Vultr 最近有一个活动，第一次注册、付费超过 $25 的新用户，能获得 $50 的试用金，等于一台 1 Core/2G RAM 的服务器免费用 5 个月。牛逼。\n对于做外贸、跨境电商的朋友，可以用 Vultr 配合 Cloudflare 免费版做图床，做 EDM 定时任务等等。或者其它做国外业务，希望自己需要一台可操控主机的，vultr 都适合你们。\n"});index.add({'id':11,'href':'/posts/2019/02/28/hexo-%E5%8F%88%E6%88%90%E4%BA%86%E6%8A%80%E6%9C%AF%E6%B5%81%E7%9A%84%E7%8E%A9%E5%85%B7/','title':"hexo 又成了技术流的玩具",'section':"Posts",'content':"其实写这篇文章，心情不太痛快。hexo 是我找了好久才确定下来，能用 markdown 写 blog 的系统。之前试过的如 jekyll 太复杂，而且定制化程度太低，不灵活。刚开始用 hexo 的时候发现它简直是尤物，轻便简洁，扩展性还不错，官方收录了 很多 plugins，足够码农用了。\n结果没过几年，hexo 也快成了技术流的玩具。\n问题一。npm 依赖存在缺陷 #  首先是 \u0026quot;hexo@3.8.0\u0026quot; 某个依赖 \u0026quot;hexo-fs@0.2.2\u0026quot;，后者依赖 \u0026quot;chokidar@1.2.7\u0026quot;，而 chokidar 又依赖 \u0026quot;fsevents@1.1.3\u0026quot;。好了，最后这个 \u0026quot;fsevents@1.1.3\u0026quot; 是被 deprecated 的版本，包含原生库，已经不存在 binary 下载，从源码编译也会报错。错误的大意是跟 node 的版本不兼容。\n下面我把这个关系链重新理一下。\ngraph LR; A[\u0026quot;hexo@3.8.0\u0026quot;]--\u0026gt;B[\u0026quot;hexo-fs@0.2.2\u0026quot;]; B--\u0026gt;C[\u0026quot;chokidar@1.2.7\u0026quot;]; C--\u0026gt;D[\u0026quot;fsevents@1.1.3\u0026quot;]; D--\u0026gt;E[\u0026quot;(HELL)\u0026quot;]; 除了上面的问题以外，大量已经停更的 plugins 依赖的 \u0026quot;hexo-cli@1.0.3\u0026quot; 等旧库，也多对 \u0026quot;fsevents@1.1.3\u0026quot; 存在间接依赖。\n用一句话来说后果，在 MacOS 下，用 hexo-cli new + npm i 的方式，根本安装不上 hexo。\n问题二。插件的停更、老化 #  像上面提到的，停更的插件，其间接依赖的第三方库若是被废弃，插件本身也就不可用了。这是一种情况。\n第二种情况，hexo 本身在发展，某些停更的第三方插件没有跟着做适配，结果是 hexo 的使用体验受到了影响。\n第三种情况，最常见的。哪怕是官网列表中的插件，质量也是有高有低，对那些技术不灵光的用户实在麻烦。\n解决方法 #  针对安装不上的问题。我也不知道怎么解决 :( 我用撞大运的办法，hexo-cli new 一个项目以后，手动修改 package.json，将 \u0026quot;hexo@3.8.0\u0026quot; 这个依赖指向自己 fork 的 hexo repo，这个 forked repo 里面已经修改了 hexo-fs 是指向一个 forked hexo-cli repo。最后在这个 forked hero-cli repo 里面，把对 chokidar 的引用上升到 \u0026quot;chokidar@1.7.0\u0026quot; 以后。\n挺复杂的，对吧。不懂点开发，还真办不了。\n针对插件停更、老化的问题，只有一个办法，就是自己 fork 做二次开发。项目的依赖中直接写上自己的 git repo。\n别问我有没有现成的。我也很无奈。\nPS：这就是 npm 生态带来的问题。left_pad 事件发生后，有人说 nodejs 程序员懒到『 连最简单的代码都不想写』，只想引用。我不太赞同这个评论的态度，不过 npm 社区的程序员的确是把代码复用做到比较极致的地步。\n UPDATE(2019-02-28)\n发现在新 new 的项目里面，\u0026quot;hexo@3.8.0\u0026quot; 的发布版好像是依赖的 \u0026quot;hexo-fs@0.2.3\u0026quot;，已经升级到间接依赖 \u0026quot;fsevents@1.2.7\u0026quot;。\n挺无语的。真的。还有点懵圈，没太搞懂。\n昨天我可是 rm -rf ./node_modules/* \u0026amp;\u0026amp; npm i 操作的，按说缓存应该没影响才对。如果是 npm 自己的 cache（我设置到了 ~/.npm/cache 目录），新 new 出来的项目应该也会受影响才对啊。\n好吧，不折腾了。下次再遇到，所有缓存，全部清理得了。\n"});index.add({'id':12,'href':'/posts/2019/02/26/%E4%B8%8D%E8%BF%87%E6%97%B6%E7%9A%84%E6%8A%80%E6%9C%AF/','title':"不过时的技术",'section':"Posts",'content':"最近两天被极客时间的新课刷群刷屏。刷屏的标题大多是“学了这么多年 Java，却连 singleton 都不会用”、“面试总被问高并发，你真的会么”这一类标题党。内容千篇一律是推荐极客时间打新的课程，《Java 并发编程实战》。\n高并发哥又不是没做过，随手找了一下，发现陈皓在 2009 年的一篇文章就提到了正确的解法，以及背后的原因。《 深入浅出单实例 SINGLETON 设计模式》。\n文中给出几种功能上正确的 singleton 写法。\n// version 1.4 public class Singleton { private volatile static Singleton singleton = null; private Singleton() {} public static Singleton getInstance() { if (singleton == null) { synchronized (Singleton.class) { if (singleton== null) { singleton= new Singleton(); } } } return singleton; } } 请留意私有变量的描述词 volatile，目的是不让编译器对指令进行重排序优化。\n// version 1.5 public class Singleton { private volatile static Singleton singleton = new Singleton(); private Singleton() {} public static Singleton getInstance() { return singleton; } } 这是自动加载版本。每次加载类的时候，实例就生成了。所以加载类的过程可能会很慢（特别是有很多继承、引用的情况）。\n// version 1.6 public class Singleton { private static class SingletonHolder { private static final Singleton INSTANCE = new Singleton(); } private Singleton() {} public static final Singleton getInstance() { return SingletonHolder.INSTANCE; } } 这是对上面 1.5 版本的修正。SingletonHolder 是个私有类，并且在 Singleton 加载的时候才会被调用，INSTANCE 才会被真正创建。\n这段代码是即确保了线程安全，又实现了懒加载的较优办法。\n还有一个所谓最优（优雅？代码最少？）的办法，不过不建议大家使用，可读性实在不太高。有点奇技淫巧的意思，大大牺牲了代码的可读性。\npublic enum Singleton{ INSTANCE; } 利用了 enum 的创建是线程安全这一特性。\nPS：PHP 中没有 singleton 的困扰，因为 php 语言特点决定的。php-fpm 本身就是 accepter-worker 并发模式，程序员写的 PHP 程序其实只是 worker，worker 与 worker 之间由 fpm 完成资源隔离和协调，PHP 程序员并不需要从内存数据的层面考虑并发的情况。所以有句话讲得不错，singleton 在 PHP 语言中不是一个好实践（practice）。PHP 的 singleton 用简单的工厂模式就够了。\n 今天抽空找了下 MQTT 的 QoS2 实现方式，记录如下。原科普文链接《 MQTT QoS 深度解读》。\n 无论是 QoS2 还是 transaction，原理都是一样的：通过一次代价非常小、成功概率足够高的操作，作为最后确认的依据。这样做并不是说绝对不出错，而是出错的概率足够低，实践中可以忽略。\n sequenceDiagram participant Publisher participant Broker participant Subscriber Publisher-\u0026gt;\u0026gt;Publisher: Store(Msg) Publisher-\u0026gt;\u0026gt;Broker: PUBLISH(QoS2, Msg) Broker-\u0026gt;\u0026gt;Broker: Store(Msg) Broker-\u0026gt;\u0026gt;Publisher: PUBREC Publisher-\u0026gt;\u0026gt;Broker: PUBREL Broker-\u0026gt;\u0026gt;Subscriber: PUBLISH(QoS2, Msg) Broker-\u0026gt;\u0026gt;Publisher: PUBCOMP Publisher-\u0026gt;\u0026gt;Publisher: Delete(Msg) Subscriber-\u0026gt;\u0026gt;Subscriber: Store(Msg) Subscriber-\u0026gt;\u0026gt;Broker: PUBREC Broker-\u0026gt;\u0026gt;Subscriber: PUBREL Subscriber-\u0026gt;\u0026gt;Subscriber: Notify(Msg) Subscriber-\u0026gt;\u0026gt;Broker: PUBCOMP Broker-\u0026gt;\u0026gt;Broker: Delete(Msg) Subscriber-\u0026gt;\u0026gt;Subscriber: Delete(Msg) 简单一点的模型，如果不需要中间的 broker，则流程如下。\nsequenceDiagram participant Publisher participant Subscriber Publisher-\u0026gt;\u0026gt;Publisher: Store(Msg) Publisher-\u0026gt;\u0026gt;Subscriber: (1) PUBLISH(QoS2, Msg) Subscriber-\u0026gt;\u0026gt;Subscriber: Store(Msg) Subscriber-\u0026gt;\u0026gt;Publisher: (2) PUBREC Publisher-\u0026gt;\u0026gt;Subscriber: (3) PUBREL Subscriber-\u0026gt;\u0026gt;Subscriber: Notify(Msg) Subscriber-\u0026gt;\u0026gt;Publisher: (4) PUBCOMP Subscriber-\u0026gt;\u0026gt;Subscriber: Delete(Msg) Publisher-\u0026gt;\u0026gt;Publisher: Delete(Msg) 从简化以后的模型可以看到，publisher 和 subscriber 有两次交互。第一次，publisher 把 msg 推送给 subscriber，对应 PUBLISH/PUBREC 指令。第二次，publisher 等于是询问 subscriber，“你是不是收到一次”，对应 PUBREL/PUBCOMP 指令。\n如果没有第 (3)/(4)步，PUBREL/PUBCOMP 指令，实际就是 QoS1，至少收到一次。\n再少一点，如果没有 (2)/(3)/(4) 步，只剩第 (1) 步，实际就是 QoS0，至多只发送一次。\n科普文里面提问，为什么 MQTT QoS2 是两次“握手”，而不是像 TCP 一样，三次握手。我觉得这个问题太教条了。为什么 negotiate 就一定要想到 TCP 呢？当然，如果一定要回答，最本质的区别就是，MQTT QoS2 通讯是单向的，而 TCP 连接的通讯是双向的。单向的只需要一方取信于另外一方即可，而双向通讯需要两方都取信于对方。\n"});index.add({'id':13,'href':'/posts/2018/12/26/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E5%92%8C%E4%BC%98%E7%9B%98%E4%B8%8D%E6%98%AF%E7%A8%B3%E5%81%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%BB%8B%E8%B4%A8/','title':"固态硬盘和优盘不是稳健的数据存储介质",'section':"Posts",'content':"说到固态硬盘（SSD）和优盘，恐怕很多人心里面有个潜在的印象，就是数据放在这里面，很安全，比在机械硬盘里面安全。最近两个朋友找我，帮找恢复数据的解决方案。两位都是数据放优盘或移动硬盘里面，遇到存储芯片故障。\n其实长期不用的数据，放在固态硬盘里面，真的不一定是安全的。固态硬盘的存储原理是往浮栅晶体管上加/放电子，使晶体管的通电性能发生变化，形成通路/闭路，对应数字 1/0，从而达到记录数据的目的。这里就有个问题，浮栅中的电子会存在泄漏的情况，也就是说，记录的数据会丢失。通常，这种数据的丢失受电压（包括静电）、环境温度、以及存储时间的影响。希捷曾经有工程师在报告中讲，温度每上升 5 摄氏度，数据存储的时间就短一半。不通电不读写的情况下，保存在 Nand Flash（SSD、SD Card、TF Card、U Disk……）介质中的数据最多也就两年的存储寿命。最糟糕的情况是像移动硬盘、优盘这样的设备，插入电脑 USB 口的一瞬间，假如遇到静电，Nand Flash 芯片被瞬间高电压击穿，那不管当时环境温度多少、你有没有经常使用，你的数据都完蛋了。\n记住，要保存数据，一定用机械硬盘。这是目前最稳妥的方法了。机械硬盘丢数据的风险，都是可以人为规避的。保存得当，存里面的数据，保存十年二十年没问题。不要再傻傻被 SSD、优盘骗了。等到数据都恢复不回来，再后悔。\n"});index.add({'id':14,'href':'/posts/2018/10/19/MacOS-%E4%B8%8B%E5%AE%89%E8%A3%85-flutter-%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/','title':"MacOS 下安装 flutter 遇到的一个依赖问题",'section':"Posts",'content':"最近在 MacOSX 上安装 flutter 也遇到一些问题。不是 MacOS Mojave 的问题，而是 flutter 依赖的一个开源库，它的依赖树出现版本不兼容问题。\n运行 flutter doctor 出现如下提示。\n [!] iOS toolchain - develop for iOS devices (Xcode 10.0) ✗ libimobiledevice and ideviceinstaller are not installed. To install, run: brew install \u0026ndash;HEAD libimobiledevice brew install ideviceinstaller ✗ ios-deploy not installed. To install: brew install ios-deploy ✗ CocoaPods not installed. CocoaPods is used to retrieve the iOS platform side\u0026rsquo;s plugin code that responds to your plugin usage on the Dart side. Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS. For more info, see https://flutter.io/platform-plugins To install: brew install cocoapods pod setup\n 按照提示，运行 brew install --HEAD libimobiledevice 出现如下提示。\n checking for libusbmuxd \u0026gt;= 1.1.0\u0026hellip; no configure: error: Package requirements (libusbmuxd \u0026gt;= 1.1.0) were not met:\nRequested \u0026lsquo;libusbmuxd \u0026gt;= 1.1.0\u0026rsquo; but version of libusbmuxd is 1.0.10\nConsider adjusting the PKG_CONFIG_PATH environment variable if you installed software in a non-standard prefix.\nAlternatively, you may set the environment variables libusbmuxd_CFLAGS and libusbmuxd_LIBS to avoid the need to call pkg-config. See the pkg-config man page for more details.\nREAD THIS: https://docs.brew.sh/Troubleshooting\n brew 发现 usbmuxd 这个库最高版本就是 1.0.10，github 上最新 release 版本也是 1.0.10。压根儿就没有 1.1.0 这个版本存在。\n不过细看，发现 usbmuxd 这个库的最新版本，就是这个 1.0.10 是 2014 年发布的，算是老古董了。\n所以安装 usbmuxd 的 head 版本试试。\nbrew unlink usbmuxd # 否则会 reinstall 失败 brew reinstall --HEAD usbmuxd # 直接从 github 的 master HEAD 安装 brew install --HEAD libimobiledevice 然后，就成了。囧rz\u0026hellip;\n依赖树的问题，万一遇到，还是得手动一个一个解决。没办法。\n一个结论就是，要用 brew install —HEAD，就要忍受 nightly 的不稳定，这是必然付出的代价。flutter 现在还是 beta 版本，依赖 nightly 的开源库也情有可原。遇到问题，就自己撸起手解决吧。\n"});index.add({'id':15,'href':'/posts/2018/10/09/CentOS7-%E4%B8%8B%E5%AE%89%E8%A3%85-DNF-%E7%9A%84%E6%96%B9%E6%B3%95/','title':"CentOS7 下安装 DNF 的方法",'section':"Posts",'content':" NOTE(simon): 讲啰嗦一点，方便搜索引擎收录关键字。需要解决方案的同学，可以直接拖到后半部分。\n 旧办法不灵 #  不知道什么原因，CentOS 7 下面安装 dnf 总是要出错，各种各样的问题与不兼容。CentOS 直到现在，还没有正式支持 dnf。相反，Fedora 22 开始就已经正式支持 dnf 作为默认的包管理工具了。差距啊。\n之前试过用一个半官方的 dnf repo( rpmsoftwaremanagement/dnf-nightly Copr) 在 CentOS 7 下面安装 dnf，一直都是可以的。也可以正常升级。以前通过这个办法安装过 dnf 的系统，已经升级到 2.8.5。用起来很顺。\n但是不知道为什么，最近用这个库，在全新的 CentOS 7 下面安装 dnf，遇到一个麻烦，就是包版本有冲突。类似的错误信息如下。\n# yum install -y dnf-2.8.5-0.101g0f20917d.el7.centos Loaded plugins: fastestmirror Loading mirror speeds from cached hostfile * base: mirrors.shu.edu.cn * epel: mirrors.yun-idc.com * extras: mirrors.163.com * updates: mirrors.163.com Resolving Dependencies --\u0026gt; Running transaction check ---\u0026gt; Package dnf.noarch 0:2.8.5-0.101g0f20917d.el7.centos will be installed --\u0026gt; Processing Dependency: python2-dnf = 2.8.5-0.101g0f20917d.el7.centos for package: dnf-2.8.5-0.101g0f20917d.el7.centos.noarch --\u0026gt; Running transaction check ---\u0026gt; Package python2-dnf.noarch 0:2.8.5-0.101g0f20917d.el7.centos will be installed --\u0026gt; Processing Dependency: rpm-plugin-systemd-inhibit for package: python2-dnf-2.8.5-0.101g0f20917d.el7.centos.noarch --\u0026gt; Running transaction check ---\u0026gt; Package rpm-plugin-systemd-inhibit.x86_64 0:4.11.3-32.el7 will be installed --\u0026gt; Processing Conflict: python2-librepo-1.9.2-2gc670c6b.el7.x86_64 conflicts python2-dnf \u0026lt; 2.8.8 --\u0026gt; Finished Dependency Resolution Error: python2-librepo conflicts with python2-dnf-2.8.5-0.101g0f20917d.el7.centos.noarch You could try using --skip-broken to work around the problem You could try running: rpm -Va --nofiles --nodigest 重点在这句，librepo-1.9.2-2gc670c6b.el7.x86_64 conflicts python2-dnf \u0026lt; 2.8.8。\n版本依赖关系树中提到的 python2-dnf 2.8.8，在 repo 中尚未发布。很明显的，dnf 2.8.5 依赖 python2-dnf 2.8.5 才对。事实也是，python2-dnf 最新的版本号是 2.8.5。\n无论如何也解决不了这个难题。毕竟人家是 nightly，夹带一点私货也正常。\n难道只能 build from source？不科学。dnf 是自展的，编译 dnf 需要用到 dnf。可手里是全新 CentOS 7。\n 半官方的 dnf nightly repo。FAILED build from source。FAILED  解决办法 #  然后，在找 dnf 2.7.5 rpm 的时候，被我发现一个隐藏的 repo。也算是半官方的吧。亲测可用。完美。用法如下。\n NOTE(simon): 2018-10-09 亲测有效\n cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/yum.repo.d/another-dnf.repo [another-dnf] name=Another DNF Repo by CentOS. baseurl=https://cbs.centos.org/repos/configmanagement7-dnf-common-release/\\$basearch/os/ type=rpm-md skip_if_unavailable=True gpgcheck=0 repo_gpgcheck=0 enabled=1 enabled_metadata=1 EOF yum clean all yum makecache fast yum install -y dnf dnf-conf dnf-automatic dnf-plugins-core 这是个 ConfigManagement SIG 的社区项目，但是没有用 ConfigManagement SIG 的 GPG 证书签名，也没有出现在社区 wiki ( SpecialInterestGroup/ConfigManagementSIG - CentOS Wiki) 中，我理解属于边缘项目。不过依赖有效，能直接安装。\n啥都不说了，只希望这次这个 dnf 的 repo 坚持久一点。\n思考 #  为什么 dnf 这么棒的工具在 Fedora 里面有，在 CentOS 里面就没有？我猜测，主要还是考虑稳定性。毕竟 CentOS 一直的策略都是以降级保稳定。dnf 还没过官方的考验期，所以一直没予以替换。既往所有的 repo 都是非官方的，最多也只能算是半官方的。\n"});index.add({'id':16,'href':'/posts/2018/09/11/MacOS-%E4%B8%8B-flutter-run-%E9%81%87%E5%88%B0%E5%A2%99%E7%9A%84%E9%97%AE%E9%A2%98/','title':"MacOS 下 flutter run 遇到墙的问题",'section':"Posts",'content':"最近调研 flutter，甚是大爱。\n虽然 flutter 非常友好提供了针对中国用户的镜像( Using Flutter in China · flutter/flutter Wiki · GitHub)，解决了一些不可说的难题，但偶尔还是会遇到类似的问题。比如我今天就遇到了，在 VS Code 调试编译的时候，遇到 “Download Failed” 的问题。Could not resolve all files for configuration ':image_picker:lintClassPath'. 具体原因是 Connect to d29vzk4ow07wi7.cloudfront.net:443 [d29vzk4ow07wi7.cloudfront.net/13.33.69.104, d29vzk4ow07wi7.cloudfront.net/13.33.69.3, d29vzk4ow07wi7.cloudfront.net/13.33.69.38, d29vzk4ow07wi7.cloudfront.net/13.33.69.111] failed: Read timed out 。\n原来是碰上了墙外面的老朋友，CDN 服务商 cloudflare 的域名。\n中间还是比较曲折，最后解决的办法是用 proxychain4 解决问题。\nbrew install proxychains-ng sed -i \u0026#39;.bak\u0026#39; \u0026#39;s@^\\(socks4.*\\)@#\\1@g\u0026#39; /usr/local/etc/proxychains.conf echo -e \u0026#34;socks5\\t127.0.0.1 1080\u0026#34; \u0026gt;\u0026gt; /usr/local/etc/proxychains.conf proxychains4 curl ip.gs 等等，好像不对，IP 是本市的。\n$ proxychains4 curl ip.gs [proxychains] config file found: /usr/local/etc/proxychains.conf [proxychains] preloading /usr/local/Cellar/proxychains-ng/4.13/lib/libproxychains4.dylib Current IP / 当前 IP: 118.XXX.XXX.XXX ISP / 运营商: ChinaTelecom City / 城市: Chengdu Sichuan Country / 国家: China IP.GS is now IP.SB, please visit https://ip.sb/ for more information. / IP.GS 已更改为 IP.SB ，请访问 https://ip.sb/ 获取更详细 IP 信息！ Please join Telegram group https://t.me/sbfans if you have any issues. / 如有问题，请加入 Telegram 群 https://t.me/sbfans /\\_/\\ =( °w° )= ) ( // (__ __)// 哪里不对？\n原来 MacOS X 10.11 以后的版本，还需要禁用 SIP，proxychains 才能正常工作。因为它会修改可执行文件本身，而位于 /usr/bin 下面的 curl 并不能被修改。见这里—— Proxychains 是不是不支持 10.11 了？ - V2EX。\n我不想禁用 SIP。安全方面，我还是比较强迫症的。所以用了另外一种方式，就是把可执行文件，从受系统保护的目录里面移出来。\ncd /Volumes/RamDisk cp /usr/bin/curl ./ proxychains4 ./curl ip.gs 这下终于行了。\n$ proxychains4 ./curl ip.gs [proxychains] config file found: /usr/local/etc/proxychains.conf [proxychains] preloading /usr/local/Cellar/proxychains-ng/4.13/lib/libproxychains4.dylib Current IP / 当前 IP: XXX.XX.XXX.XX ISP / 运营商: xxxxx City / 城市: Osaka Osaka Country / 国家: Japan IP.GS is now IP.SB, please visit https://ip.sb/ for more information. / IP.GS 已更改为 IP.SB ，请访问 https://ip.sb/ 获取更详细 IP 信息！ Please join Telegram group https://t.me/sbfans if you have any issues. / 如有问题，请加入 Telegram 群 https://t.me/sbfans /\\_/\\ =( °w° )= ) ( // (__ __)// 用在 flutter 上面试试看。\n$ proxychains4 flutter run [proxychains] config file found: /usr/local/etc/proxychains.conf [proxychains] preloading /usr/local/Cellar/proxychains-ng/4.13/lib/libproxychains4.dylib Launching lib/main.dart on BLN AL10 in debug mode... Initializing gradle... 0.8s Resolving dependencies... 0.8s Running \u0026#39;gradlew assembleDebug\u0026#39;... FAILURE: Build failed with an exception. * What went wrong: Could not resolve all files for configuration \u0026#39;:image_picker:lintClassPath\u0026#39;. ............ BUILD FAILED in 2m 3s 123.9s Gradle build failed: 1 还是不行？\n考虑到上面 curl 遇到的问题，确认 flutter 可执行文件权限和路径没问题，试试用绝对路径。\n$ proxychains4 ~/workspace/flutter_development/flutter/bin/flutter run [proxychains] config file found: /usr/local/etc/proxychains.conf [proxychains] preloading /usr/local/Cellar/proxychains-ng/4.13/lib/libproxychains4.dylib Launching lib/main.dart on BLN AL10 in debug mode... Initializing gradle... 0.8s Resolving dependencies... 0.8s Running \u0026#39;gradlew assembleDebug\u0026#39;... 11.8s Built build/app/outputs/apk/debug/app-debug.apk. Installing build/app/outputs/apk/app.apk... 3.8s ^C 欧耶！终于成了。\nPS：^C 是我终止了 flutter build 的过程。\n看得出来，proxychains 通过独特的方式来让 command 程序走代理。虽然不是很方便，但总归解决了问题。还是值得点赞。\n"});index.add({'id':17,'href':'/posts/2018/05/04/CoreDNS-%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84-DNS-%E6%9C%8D%E5%8A%A1%E5%9C%A8-MacOS-%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/','title':"CoreDNS - 轻量级高性能的 DNS 服务在 MacOS 下的安装部署",'section':"Posts",'content':"DNS 的原理相信大家都了解。树形结构，根服务器，递归溯源，UDP 协议（现在也有 TCP 协议甚至 http 协议的）。搭建一台自己的 DNS 也是稀松平常的事情。\n我遇到的场景是这样的。\n 公司有内网机房，研发用，研发环境和测试环境都在内网机房； 公司的域名是『company.com』，在公司内网有专门的 DNS（bind 搭建）做解析； 研发/测试环境的服务器也用顶级域名指向，例如：test1.mod-a.company.com。这类解析都是通过 bind 实现的。公司外网解析不到这个地址； 我自己需要一个安全的 DNS 环境，对 DNS 服务器溯源这个细节，优选 TCP 协议； 对『company.com』顶级域名的解析还是走公司内部的 DNS 服务器，即 bind； 之前用 ss 的 chinadns，可以实现第 4 条，但是无法实现第 5 条。  找了一圈，发现 CoreDNS 挺好的。推荐之。\n一、安装 #  CoreDNS 是 golang 写的，所以只需要下载对应操作系统的二进制文件，到处拷贝，就可以运行了。\n下面统统以 MacOS 为例作讲解。\ncd ~/Downloads curl -LO \u0026#34;https://github.com/coredns/coredns/releases/download/v1.1.2/coredns_1.1.2_darwin_amd64.tgz\u0026#34; \u0026amp;\u0026amp; \\ tar zxf coredns_1.1.2_darwin_amd64.tgz \u0026amp;\u0026amp; \\ mv ./coredns /usr/local/bin/ 这里补充一句，CoreDNS 的二进制版本已经安装了所有的插件（plugins），不需要你自己编译。推荐下载二进制版本。\n二、配置 #  要深入了解 CoreDNS，请查看其 文档，及 plugins 的介绍。\ncat \u0026lt;\u0026lt;EOF \u0026gt; /usr/local/etc/Corefile . { hosts { fallthrough } forward . 1.1.1.1 8.8.8.8 119.29.29.29 223.5.5.5 { force_tcp max_fails 3 expire 10s health_check 5s policy sequential except company.com } cache 120 reload 6s log errors } company.com { hosts { fallthrough } forward . 192.168.88.101 119.29.29.29 114.114.114.114 { max_fails 3 expire 5s health_check 3s policy sequential } } EOF 其中 192.168.88.101 是公司内网 DNS 服务器（bind）的 IP 地址。\n对配置中的一些选项稍作解释。\n hosts：hosts 是 CoreDNS 的一个 plugin，这一节的意思是加载 /etc/hosts 文件里面的解析信息。hosts 在最前面，则如果一个域名在 hosts 文件中存在，则优先使用这个信息返回； fallthrough：如果 hosts 中找不到，则进入下一个 plugin 继续。缺少这一个指令，后面的 plugins 配置就无意义了； forward：这是另外一个 plugin。. 代表所有域名，后面的 IP 代表上游 DNS 服务器的列表。按照什么顺序溯源，由下面的 policy 指令决定； force_tcp：强制使用 TCP 协议溯源。这要求上游 DNS 必须支持 TCP 协议； expect：指定哪些域名不按照本 plugin 配置溯源； cache：溯源得到的结果，缓存指定时间。类似 TTL 的概念； reload：多久扫描配置文件一次。如有变更，自动加载； log：打印/存储访问日志； errors：打印/存储错误日志； company.com { }：另外一个『服务』，只服务针对『company.com』的域名解析；  我讲一下我自己的理解。\n 配置文件类似于 nginx 配置文件的格式； 最外面一级的大括号，对应『服务』的概念。多个服务可以共用一个端口； 往里面一级的大括号，对应 plugins 的概念，每一个大括号都是一个 plugin。这里可以看出，plugins 是 CoreDNS 的一等公民； 服务之间顺序有无关联没有感觉，但 plugins 之间是严重顺序相关的。某些 plugin 必须用 fallthrough 关键字流向下一个 plugin； plugin 内部的配置选项是顺序无关的； 从 plugins 页面的介绍看，CoreDNS 的功能还是很强的，既能轻松从 bind 迁移，还能兼容 old-style dns server 的运维习惯； 从 CoreDNS 的性能指标看，适合做大型服务。  三、运行 #  # 前台运行方式 /usr/local/bin/coredns -conf /usr/local/etc/Corefile  NOTE(simon): 新增 -log 参数，将日志打到 stdout，日志集中处理。\n  UPDATE(simon): 更新 coredns 到最新的 1.2.2 版本，已经没有 -log 这个参数了。日志默认也是直接打到 stdout 上面。\n 如果没有问题，这时候应该看到 CoreDNS 持续运行。\n四、部署 #  在用 chinadns 的时候，遇到过 chinadns 崩掉的情况。作为基础服务，DNS 还是要能稳定持续提供服务的。此外，开机自动启动也是个必要的功能。\n综合考虑，熟悉的 supervisor 是个好的选择。\n ```bash ~~# 安装 supervisor brew install supervisor 设置服务配置目录 #  mkdir -p /usr/local/etc/supervisord.ini.d\n修改 supervisor 配置 #  sed -i .bak \u0026rsquo;s@files = .@files = /usr/local/etc/supervisord.ini.d/.ini@g' /usr/local/etc/supervisord.ini\n为 supervisorctl 做映射 #  alias supervisorctl='/usr/local/bin/supervisorctl -c /usr/local/etc/supervisord.ini' cat \u0026laquo;EOF \u0026raquo; ~/.bash_profile alias supervisorctl='/usr/local/bin/supervisorctl -c /usr/local/etc/supervisord.ini' EOF\n为 CoreDNS 写配置文件 #  cat \u0026laquo;EOF \u0026gt; /usr/local/etc/supervisord.ini.d/coredns.ini [program:coredns] command=/usr/bin/sudo /usr/local/bin/coredns -conf /usr/local/etc/Corefile ;process_name=%(program_name)s ; process_name expr (default %(program_name)s) numprocs=1 ; number of processes copies to start (def 1) directory=/usr/local ; directory to cwd to before exec (def no cwd) ;umask=022 ; umask for process (default None) ;priority=999 ; the relative start priority (default 999) autostart=true ; start at supervisord start (default: true) autorestart=unexpected ; whether/when to restart (default: unexpected) startsecs=1 ; number of secs prog must stay running (def. 1) startretries=9999 ; max # of serial start failures (default 3) ;exitcodes=0,2 ; \u0026lsquo;expected\u0026rsquo; exit codes for process (default 0,2) stopsignal=QUIT ; signal used to kill process (default TERM) ;stopwaitsecs=10 ; max num secs to wait b4 SIGKILL (default 10) ;stopasgroup=false ; send stop signal to the UNIX process group (default false) ;killasgroup=false ; SIGKILL the UNIX process group (def false) ;user=chrim ; setuid to this UNIX account to run the program ;redirect_stderr=true ; redirect proc stderr to stdout (default false) stdout_logfile=/usr/local/var/log/supervisor/coredns.stdout.log ; stdout log path, NONE for none; default AUTO stdout_logfile_maxbytes=1MB ; max # logfile bytes b4 rotation (default 50MB) stdout_logfile_backups=10 ; # of stdout logfile backups (default 10) stdout_capture_maxbytes=1MB ; number of bytes in \u0026lsquo;capturemode\u0026rsquo; (default 0) stdout_events_enabled=false ; emit events on stdout writes (default false) stderr_logfile=/usr/local/var/log/supervisor/coredns.stderr.log ; stderr log path, NONE for none; default AUTO stderr_logfile_maxbytes=1MB ; max # logfile bytes b4 rotation (default 50MB) stderr_logfile_backups=10 ; # of stderr logfile backups (default 10) stderr_capture_maxbytes=1MB ; number of bytes in \u0026lsquo;capturemode\u0026rsquo; (default 0) stderr_events_enabled=false ; emit events on stderr writes (default false) ;environment=A=\u0026ldquo;1\u0026rdquo;,B=\u0026ldquo;2\u0026rdquo; ; process environment additions (def no adds) ;serverurl=AUTO ; override serverurl computation (childutils)\nEOF\n设置 supervisord 开机自启动 #  brew service start supervisor\n查看 CoreDNS 是否正常运行 #  supervisorctl status\n\u0026lt;/strike\u0026gt; \u0026gt; NOTE(simon, 2018-05-30): \u0026gt; 放弃使用 supervisor 的原因是，MacOS 作为生产力工具，supervisor 最友好方式的安装还是通过 brew。而 brew 安装的 supervisor 启动时，是当前用户权限，不是 root 身份。试了下，也没办法通过配置，提权到 root。再则，supervisor 的配置中，大量文件写到 `/usr/local` 目录下，如果以 root 身份启动 supervisord 进程，这些文件势必也是 root 权限的。而按照 brew 的指导意见，`/usr/local` 下还是要保留当前用户权限的，否则 brew 可能会挂。 \u0026gt; 所以兜兜转换，又用回到老的土办法。毕竟，稳定就好。 \u0026lt;strike\u0026gt; ```bash cat \u0026lt;\u0026lt;EOF \u0026gt; ~/.bash_profile # CoreDNS COREDNS_PROCESS_COUNT=$(ps aux | grep coredns | grep -v grep | wc -l) [ ${COREDNS_PROCESS_COUNT} -lt 1 ] \u0026amp;\u0026amp; \\ nohup sudo /usr/local/bin/coredns -conf /usr/local/etc/Corefile \u0026amp; EOF   NOTE(simon, 2018-11-20): 更新一下脚本，实现下面几个功能：\n coredns 进程的 stderr 输出转到 stdout； coredns 进程不绑定到当前 tty 上，运行 jobs 命令不显示 coredns 进程； 显式指定 nohup 将 coredns 进程的 stdout 输出打到 ~/nohup.out 文件；   COREDNS_PROCESS_COUNT=$(ps aux | grep coredns | grep -v grep | wc -l) [ ${COREDNS_PROCESS_COUNT} -lt 1 ] \u0026amp;\u0026amp; \\  (2\u0026gt;\u0026amp;1 nohup sudo /usr/local/bin/coredns -conf /usr/local/etc/Corefile \u0026gt;\u0026gt; ~/nohup.out \u0026amp;) 五、验证 #  nslookup www.qq.com 127.0.0.1 nslookup www.facebook.com 127.0.0.1 nslookup test1.mod-a.company.com 127.0.0.1 公司内网 IP 几乎秒出。非死不可也能出。\n搞定。\n六、系统设置 #  在『系统偏好设置』-\u0026gt;『网络』中，把 DNS 里面添加一行，127.0.0.1，并把新增这项移动到最前面，即可。\n"});index.add({'id':18,'href':'/posts/2017/11/04/react-native0.50.1-%E5%BC%80%E5%A7%8B%E4%BE%9D%E8%B5%96%E4%BA%8E%E4%B8%80%E4%B8%AA%E7%89%B9%E5%AE%9A%E7%89%88%E6%9C%AC%E7%9A%84-boost-%E5%BA%93/','title':"react-native@0.50.1 开始依赖于一个特定版本的 boost 库",'section':"Posts",'content':"react-native@0.50.1 依赖的是 facebook 精简之后的 boost_1_63_0 版本，而不是官方在 sourceforge 上发布的那个版本。\n官方发布的版本是这样的。\ncurl -Lo boost_1_63_0.tar.gz \\  https://sourceforge.net/projects/boost/files/boost/1.63.0/boost_1_63_0.tar.gz shasum -a1 boost_1_63_0.tar.gz # macOS, = 2cecf1848a813de55e5770f324f084c568abca0a sha1sum boost_1_63_00.tar.gz # Linux, = 2cecf1848a813de55e5770f324f084c568abca0a 而 Facebook 自己改过的版本是这样的。\ncurl -Lo boost_1_63_0.tar.gz \\  https://github.com/react-native-community/boost-for-react-native/releases/download/v1.63.0-0/boost_1_63_0.tar.gz shasum -a1 boost_1_63_0.tar.gz # macOS, = c3f57e1d22a995e608983effbb752b54b6eab741 sha1sum boost_1_63_00.tar.gz # Linux, = c3f57e1d22a995e608983effbb752b54b6eab741 这是个比较大的坑。\n依赖第三方开源 lib，文件名与第三方官方 release 的文件名一致，内容却是自己修改过的。稍不注意就会上当。\n因为之前有习惯先通过别的途径下载这个大文件，手动放置到 ~/.rncache 缓存目录下，所以发现了这个问题。\n 补充说明，为什么说这是一个坑。\nreact-native run-ios 在模拟器上运行 ios 版本的时候，脚本会首先编译 ios 版本的 app 出来。从安装脚本 node_modules/react-native/scripts/ios-install-third-party.sh 文件最后部分可以看到，会下载编译 ios 版本所需要的几个第三方库并编译。其中就包括了 boost_1_63_0.tar.gz 这个第三方库。\n在一个多月前，大约 react-native@0.48.x 版本的时候，facebook 还是依赖的官版 boost_1_63_0，可能是发现某些国家的码农反映比较强烈，因此转成依赖自己精简过后的 boost_1_63_0。官版的 boost_1_63_0.tar.gz 文件有 93MB 之大，某些国家的码农无论访问 sourceforge（boost 官版的发版平台）还是 github 都很慢，几乎所有要在新环境运行项目（包括想要尝鲜）的码农们都遇到过下载这个大文件失败的情况。一个第三方依赖库下载失败，错误信息常常隐藏在大段大段的日志中，尝鲜的人容易漏掉，并且造成一种『ReactNative 不成熟，「Hello World」都不容易跑起来』的第一印象。有经验的码农们能发现这个问题，也不容易解决。即便有能力找到快速的源预先下载好依赖，自动化构建的过程被破坏了，也是一种非常糟糕的体验，对一个开源的框架来说，不能容忍。\n所以，从前段时间开始，大约是 react-native@0.50.x，Facebook 开始使用一个精简版的 boost 库。就像 google 自己的 boringssl 库 一样，facebook 以社区的名义为了这事儿维护了一个自己的版本。好在，目前来看，仅仅是一个精简官版的工作，还不涉及到修改。\n出发点是一个好事儿，但是这么一来，增加了项目管理和维护风险。起步的小伙伴们，要小心一点。\n"});index.add({'id':19,'href':'/posts/2017/09/05/%E4%B8%BA%E4%BA%86%E6%89%93%E4%B8%AA%E5%B9%BF%E5%91%8Acoding-pages-%E5%8F%98%E5%BE%97%E5%A5%BD%E9%82%AA%E6%81%B6/','title':"为了打个广告，coding pages 变得好邪恶",'section':"Posts",'content':" Coding Pages 是我的博客承载平台。我的博客是用 Hexo 做的， Markdown 语法书写，编译成静态 html 后上传到 Coding Pages 和 Github Pages 上面去，供大家访问。之所以用两个不同的 Pages 服务，是因为 之前 Github 被 GFW 墙了，包括 Pages 在内的服务都访问不顺畅，彼时正好 gitcafe pages（ 后来被 Coding 收购）也提供 Pages 服务，所以在国内做了个镜像。这样墙里面的网友不仅不用看 GFW 的心情，还因为服务器在国内，国内网友访问时更快一些。谷歌上一搜『hexo github coding』就能有很多结果，例如这篇『 将hexo博客同时托管到github和coding』。\n但是好像从上个月（八月）开始，coding pages 开始劫持我的博客访问，穿插进他们自己的企业版 coding 的广告，播放五秒之后，再跳转进入我的博客。这很优酷、很爱奇艺，很 APP。广告页面上甚至连一个倒计时的控件都看不到，就右上角（好像是）一行很小的字，跟你讲：你没访问错，这个页面只是广告。\n看了 coding 的解释，你要不花钱买它的会员（金牌会员），就要在你的博客页脚上加『hosted by coding pages』的字样。如下图。\n 大家注意截屏上方的绿色警示框：这是我的 pages 通过审核之后的状态。下面标红的复选框需要你在添加脚标之后自行选中，之后就会有专人给你审核开通免广告插入。\n我猜测这是 coding 为了给自己网站做 SEO 的小伎俩。考虑到用了 coding 免费服务有一年多两年，人家要求也不过分，虽然网上很多人吵着要离开 coding 转 github，我还是决定给人加一个脚标。做人要懂感恩嘛。\n 这之后，痛快了几天。\n真的只有几天。\n然后，coding pages 抽风了。表现症状是，我输入域名访问我的博客，它不显示我的博客，甚至不显示广告，义无反顾跳转到他们家企业版的首页。我的博客看不了了。如下图。\n 不知道 coding 家到底有多想要做 SEO、做 PR。人家 OSChina 比你们家的 PR 还低，人家也没想 SEO 想到这个份儿上。\n自此，我毅然决然，跟 coding 划清界限。\n暂时的解决方案是，用 OSChina Pages 顶上，国内用户走 码云，国外用户还是走 Github Pages。希望码云靠谱点，别让大家失望。码云之后也有备选方案，例如： 七牛、 BAE，没验证过，也不希望到那一步。\n UPDATED (2017-09-05):\n 码云的 Pages 原来不支持自定义域名。我设置了 cname 试，结果是 403。用码云的话，我只能用 oschina.io 的二级域名： http://simonkuang.oschina.io/。这很不好。\nSo，先放弃吧，全解析到 Github Pages 上面去。懒得再折腾啦。\n UPDATED 2 (2017-09-05):\ncoding 万分邪恶的地方：把我的博客强制跳转到企业版首页时， 使用了 301 跳转，还特么不带 cache 相关的控制参数。从效果上来讲，按照 crhome 现行策略， 客户端的缓存，从服务器端，是无论如何也清除不掉了。stackoverflow 最佳答案最后给的办法行不通（Chrome 60），已经试过。唯一可行的办法是客户端自己清除所有缓存。这不科学。\n说简单点，coding 这是劫持了我的域名给自己网站导流，做得还挺绝，都不给自己留道歉的机会（因为服务器端根本没法儿补救）。心里有句 MMP，不知当讲不当讲。\n真心不会再跟 coding 打交道。都别劝我，擦！\n"});index.add({'id':20,'href':'/posts/2017/08/31/%E4%BB%8E%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%88%B0%E6%9E%B6%E6%9E%84%E7%8B%AE%E7%9A%84%E8%BD%AC%E5%8F%98/','title':"从程序猿到架构狮的转变",'section':"Posts",'content':"从程序员到架构师的成长，变化就像从小学生到高中生一样巨大。\n不仅是对能力有要求，更重要是对视野的要求，对认知能力的要求，对沟通能力的要求，对组织能力的要求，对适应能力的要求，对执行力和韧性的要求…… 远不是说技术能力成长了，就达到了架构师的要求。更加不是说技术能力有了，培养培养，就可以成为架构师了。架构师都是摔打出来的。\n看到过对做架构有一个不错的定义： 系统架构的目标是解决利益相关者的关注点。\n所以你看，做架构的架构师，其实是解决人的利益问题，目标是让各方利益尽可能达成一致，做 trade off 的工作，权衡。技术只是实现这个目标的一种手段，一种重要的手段，手段之一，不是全部，甚至于不是最重要的。执行层面成长起来的、技术能力过关的工程师，想要成长为架构师，首先考验的是你听 + 说的能力，也就是沟通表达的能力。沟通能力才是一个合格的架构师最重要的能力。\n一、听的能力 #  这个很有学问。\n我们常常假设与我们沟通的都是理性人，他们清楚自己说的是什么意思，他们也确实想要表达这个意思。实际上，几乎不存在这样的理性人。为了避免尴尬、隐藏真实想法，大家说的往往是加以润色的话。即便死党之间畅无不言，潜意识也会偷偷在话里打掩护，顾左右而言他。若是拿别人告诉你的话当个准，九成九会遇到『当初我怎么知道』的情况。\n工作中也是如此，系统架构牵扯利益，各方都希望架构师做出有利于己方的设计，所以表达己方利益关切的时候，明明可以『关注』的，他可能用『严重关切』来表达。你没法儿指责他说谎，也许他的表达习惯就是如此，也许是大家对轻重缓急的表达方式不同。但作为架构师，你自己心里就得有个判断：他的话我到底该不该信？信几分？可信的部分在我的架构中轻重缓急怎么判断？\n所以，听的能力非常重要。\n首先，学会听别人的话外音。 #  职场上，大部分人是理性的，他们对自己手头的事情能有理性的判断。大多数时候，他们也能清楚知道自己想要什么。只是，他们往往会委婉地表达自己的目的。旁推侧击、敲山震虎、隔山打牛、杀鸡儆猴…… 就是不会直来直去。\n作为架构师，你得学会听懂别人背后表达的意思，这是最基本的功力了。\n其次，听懂别人背后的意图。 #  再聪明的人也有犯糊涂的时候。有些时候，跟你沟通的某人，会忽然卡壳，不知道接下来要怎么表达/表达什么。他隐约觉得自己想要个小功能，但就是不知道怎么表达出来。这时候如果架构师对这个人有一定了解，知道他关心的点，知道他的风格，就有可能顺着他的思路去提醒他。\n倒不是让架构师去做别人肚子里面的蛔虫。这样做至少有两点好处。\n 架构师主动提，比一个有明确利益偏向的人来提，提出来的方案合适得多。他讲不清楚的时候，你能讲清楚，还照顾到他的关切，他接受你的方案的概率也很高； 如果架构师对利益方能达到这种程度的了解，可以把利益方的偏好尽可能纳入架构设计的考量中去，就可以做好预埋，防止无谓的需求变更。  最后，听懂别人没说出口的话。 #  有些话，不一定要说出口，就像上面提到的。另外有些话，说的时候还没想到，或者，说的时候就没怎么想，反正可以以后想到再说。\n对架构师，后面两种情况真的够呛。你遇到的是一个职场 baby，一个不能为自己的行为负完全责任的人。这种情况下，最好的解决办法是，你能帮他想好，反过来引导他，通过他的嘴讲出来。避免在系统评审会之后，频繁变更带来的成本开销。评审会之后变更架构设计的开销是客观的，成本存在压缩极限；而考虑提前量的开销是可控的，通过人为努力可以使成本逼近零。因此在系统架构设计阶段，尽可能多考虑一些未来的变化，从长远来看，是相当划算的。\n这种场景下，考验的是架构师的业务能力、经验和宽泛的倾听技巧。这种能力通过练习可以培养，但成长不会很快。属于二八原理中要花 80% 精力去积累的 20% 那部分。锻炼的时候，要有耐心和信心。\n说的能力 #  说，或者说表达，也是沟通中重要的一部分。对于架构师而言，架构设计就是最好的表达。相对的，就工程师成长起来的架构师，我更提倡学会倾听，而不是表达。\n如果硬要说在表达方面有什么建议或者窍门，就下面几句话。\n 先听别人说完，自己再说； 说之前，想清楚，尽量言简意赅。话说得太多，在别人耳朵里，就没什么效果了。不如一字千钧有威力； 想表达不同意见的时候，先停顿三秒，再说出口； 有理不在声高； 对事不对人，对过人的自己请客吃饭；  培养能力 #  沟通的能力也是可以靠锻炼来的，不是谁生下来就是《九品芝麻官》里面的包大人。关于沟通的锻炼方法，极限一点的，请自行谷歌销售技巧培训方法。哈哈\n最后补充一句，沟通 + 技术能力，是成为一个架构师的必要条件，还不是充分条件。这两条具备了，才可以说你达到了做架构师的最最基本的要求，有可能做出大家满意的架构设计。后面的，有机会再补充。\n"});index.add({'id':21,'href':'/posts/2017/08/27/%E5%90%90%E6%A7%BD%E8%A2%ABNodeJS%E7%94%A8%E6%BB%A5%E7%9A%84%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%93%B2%E5%AD%A6/','title':"吐槽被NodeJS用滥的软件设计哲学",'section':"Posts",'content':" NodeJS 真的很火，一把大火带热了一直被轻视的、几乎要被认为不是编程语言的前端语言 javascript。火是不是 NodeJS 烧起来的已经不重要，反正它在大火里面烧得火红火红。\nNodeJS 的包管理工具 npm（Nodejs Package Management）在这其中功不可没。\n直到 2016 年初，有一个很硬的程序猿 Azer，非常不满自己的权益没有被 npm 这个平台正确对待——具体说，就是 npm 收到另外一个用户的律师信之后，擅自删除了前面这个 Azer 的 package，把 package 的名字直接转让给发律师信的用户管理——一气之下将自己创建并管理的所有 npm 上的项目全部 unpublish 了。这种行为在游戏里面叫自杀。关键人家还说挺对的： 我解放了我所有的模块，因为我不会在一个某些人滥用特权的地方分享我的开源工作。结果就比较搞笑了，因为其中一个被删除的模块 left-pad 被大家广泛引用，导致 Babel、Ember、ReactNative 等等构建工具、框架，都不能正常使用。除了一些将 package 打包发布的应用，例如 Atom。这事儿在当时简直就是灾难，N 多前端程序猿被迫加班解决问题。\n从这件事情之后，有些人也开始反思，于是知乎上有人问『 如何看待 Azer Koçulu 删除了自己的所有 npm 库？』这一类的问题。直到后来终于有人问：难道一个只有十一行代码的功能你们都不能自己写了么？（PS：left-pad 只有十一行有效代码）问题才逐渐回归本源上。\n要我说，从我了解 npm 开始，就一直觉得它是 DRY（Donot Repeat Yourself）和 KISS（Keep It Simple, Stupid）的极端实践者。极端到什么地步呢，就像上面提到的，连一个十一行代码的功能都要找 npm 上面的 package 来实现，而不是自己写一份。层层叠叠，相互之间的引用关系堪比用 DNA 图谱勾勒人类进化史和迁移史。\n现在看来，哲学是好的，但做得有点儿过。\n 这两天被 npm 搞得够呛。\n一直用 hexo 写博客，好好的。手贱升级了 node 到 7.4.x，完了，发现不正常了，报类似下面的错误。\n Fatal error in ../deps/v8/src/api.cc, line 1051 Check failed: !value_obj-\u0026gt;IsJSReceiver() || value_obj-\u0026gt;IsTemplateInfo().\n 在 github 上找到答案，升级 node 到 8.4.0 之后解决了问题。可是，今天升级 hexo 到 3.3.8 之后，又出现上面的问题。\n从 github issue 和错误 stack 中已经知道是 fsevents 引发的问题，而且 fsevents 之前是经过大改的，版本有讲究。对这些历史了解很重要。\n删除 node_modules 和 npm cache 之后重新安装 npm 模块，不行。\nrm -rf .npm/ node_modules/ package-lock.json db.json rm -rf ~/.npm/.cache npm install 用 yarn 来安装。还是不行。\nrm -rf .npm/ node_modules/ package-lock.json db.json yarn.lock rm -rf ~/.npm/.cache yarn install 连错误都一模一样。\n直到用 npm ls | grep fsevents 命令，发现 fsevents 有两个版本，其中一个是 0.3.8——明显大改之前的。这时候，一个粗暴的办法出现在脑海里面。\n在 iTerm3 里面快速定位到使用 fsevents@0.3.8 的组件，原来是 hexo-github@1.0.1 依赖的 nunjucks 这个库。\nhexo-github 的作用是将 github 时间线展现在 blog 里面，非常适合程序猿出身的博主，但是我这会儿还没用上。所以先卸载吧。\nnpm uninstall --save hexo-github 好吧，其实我是删除 node_modules 之后修改 package.json，再重装来的。:-P\n总之，就好了。\nhexo-github 的依赖关系指明依赖 nunjucks@^1.3.4，这好像是 npm install --save nunjucks 时会自动添加进 package.json 文件中的格式。默认格式。现在 nunjucks 的版本是 3.0.1，已经不在 1.x.x 这条主版本线上。所以，除非 hexo-github 的作者手动更新依赖中 nunjucks 的主版本号，否则就被栓死在 1.x.x 主线上。\n万一真遇到 hexo-github 这样几乎已经不维护的 package，我真有自己 fork 一个库自己改的冲动。但这样又不 DRY 了，对吧？\n心好累啊。[捂脸]\n"});index.add({'id':22,'href':'/posts/2017/08/16/%E6%95%B0%E5%AD%97%E5%85%AC%E5%8F%B8%E6%97%97%E4%B8%8B%E7%9A%84-SSL-%E6%9C%8D%E5%8A%A1%E5%95%86%E5%A5%BD%E5%83%8F%E8%A2%AB-block-%E5%AE%8C%E4%BA%86/','title':"数字公司旗下的 SSL 服务商好像被 block 完了",'section':"Posts",'content':"刚知道， Apple 早在去年就开始 block Wosign 和 StartCom 作为根签发的 SSL 证书。\n继 Symantec 被 google 亲儿子 chrome 拉黑之后，感觉信息安全圈儿的很多事情忽然变了，有『忽如一夜春风来』的感觉。以前是知道有这么些事儿，藏着掖着谁都不说明白，资深的自己玩儿，小弟捡漏，群众连瓜在哪儿都不一定知道。现在是感觉被子掀开，太阳晒进来，虫子晒死一堆——还有大虫子，而侥幸活着的挪个地儿，继续往阴暗处爬。照这趋势，被子迟早彻底掀开，那会儿会怎么样，真不知道。就我知道， glibc 的 hostname resolve 漏洞和 openssl 心脏滴血都是开胃菜。想对隐藏的『大 boss』有直观感觉，请看斯诺登泄密的那些文件。\n开源可持续的其中一个前提是：大多数贡献者积极向善。就像最近很火的 区块链，确保账本正确、资金安全的前提是，不诚实节点掌握不了超过全网 50% 的运算力。否则，保存在全网区块链中的账本，被人篡改的几率就大大增加，账本不可信，资金不安全，你账户里面躺着的钱有一天会突然变成 TA 的。随着这些年技术门槛降低，互联网开始普及，互联网经济不再神秘，趋金的商人也越来越多走进来，捞钱。他们在互联网经济中所占的比例会越来越大，最后他们的影响力一定会超过作为『互联网原住民』的工程师。趋金不是个贬义词，由它引发的故事却往往是贬义的。这些故事，最终可能会毁了开源，或者说『进化』开源。\n阳光下的 M$ 这么多金，届时 M$ 会不会趁虚而入要了这只企鹅的命，还真不好说。\n看开点，随个缘咯。\n selinux 也是可怜的孩子，生不逢时。网上的小白教程讨论的都是『怎么关闭 selinux』，知乎上也只有『 为什么要关闭 selinux』这一类的问题。\n在技术发展水平不变的前提下，安全和方便是一体的两面，要想安全，一定会比较麻烦；想不麻烦，就会不安全。可以选择权衡，本质不会变。没有环境倒逼，恐怕很多企业都不会对安全太上心，这就是现状。安全是非功能需求，往往也是次要需求，安全对应的麻烦则被视为成本，追求『绝对安全』的动力不足，只要相对安全就好。而且，这种『相对』的标准，往往还是领导/客户心理上的相对，跟事实差好远。\n"});index.add({'id':23,'href':'/posts/2017/07/31/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%AA%E5%A4%87%E6%A1%88%E4%BA%91%E4%B8%BB%E6%9C%BA%E7%94%B3%E8%AF%B7-letsencrypt-ssl-%E8%AF%81%E4%B9%A6/','title':"阿里云未备案云主机申请 letsencrypt ssl 证书",'section':"Posts",'content':"用阿里云国内机房的主机有个『小问题』，备案。下面说的，一种情况是没有备案，另外一种情况是备案中，但是业务急于对外发布，等不及以周为单位的备案进程。\n访问绑定到阿里云 ECS 上的、没有备案的域名，阿里云机房会劫持你的 http（80 端口）上行流量，无视你实际的返回内容，将之篡改成一个页面 title 为『TestPage』的温馨提示（如下图）。\n 而一台不能提供 http 服务的阿里云 ECS 不是真正的服务器。解决这个问题的办法，将 http 换到 https 就可以了。\nhttps 选哪家 #  总所周知，自从 WoSign 被我大天朝数字公司收购之后，颇多周折， 跟同袍兄弟 StarSSL 一起被业界良心 chrome 拉黑。现在使用 WoSign 签发的 ssl 证书会被 chrome 直接判定为证书无效。\n最近连商务范儿最重的 Symantec 都被 chrome 一再警告之后拉黑。除了认为 chrome 真任性之外，也提醒我们选择 ssl 服务商时一定要慎重。\n目前来看，从个人到中小企业，最佳选择是 google 投资的 Let\u0026rsquo;s Encrypt。运用 ACME 协议自动签发、自动续期，技术宅最爱，不是技术宅也有现成工具简单操作即可。\n怎么生成 http ssl 证书 #  首先注明，申请 Let\u0026rsquo;s Encrypt 家的 http ssl 证书，不需要提前准备啥资料，不需要书面申请，这跟国内的『管理』方法不一样。你只需要证明这个域名归你所有，http ssl 的证书就可以签发给你使用。但是为了防止域名到期易主、中途转让等等原因，发生域名新主人拿不到 http ssl 证书的情况，所以 Let\u0026rsquo;s Encrypt 规定了每次签发的 http ssl 证书有效期只有三个月，证书生成一个月之后可以免费重签/续期，不用等到临近有效期再续签。\nLet\u0026rsquo;s Encrypt 验证域名的归属有两个办法，用过 Google Analytics，和用 G Suite 绑定过域名的朋友应该比较熟悉了。\n 网站验证。给你一个随机内容的文件，你把这个文件放在一个特定的位置，用待绑定的域名 + 特定 path 可以访问到这个文件，可以认为域名是你的； DNS 验证。给你一个随机字符串，你把这个字符串添加为待绑定域名某个 name 的 txt 值，只要能通过公网上的 DNS 服务器解析到这个字串，认为域名是你的。  很简单吧。\n在阿里云 ECS 未备案的情况下，第一种办法是不可行的，chanlledge 必须是用过 http 协议进行的（你是来申请 https 证书的，假设你还没有 https 服务，这完全正常，只能用 http 来 chanlledge），而你的 http 服务被阿里云劫持了，所以你才要申请 http ssl 证书。…… 这就是个死循环。\n第二种办法可行，它的具体步骤如下。\n具体操作 #   我先把要注意的事项写下来，免得走弯路。 嗯，其实就一条：使用 pip install certbot 命令安装 certbot，不要用 yum/dnf/apt/pkg/apk 等包管理工具安装。\n 第一步，安装 certbot #  pip install --upgrade certbot 如果已经通过包管理工具安装过 certbot，那么先卸载。假设在 CentOS 上，包管理工具是 dnf。\ndnf remove -y certbot 包管理工具安装的 certbot，其某些依赖包对应的版本比较低，存在兼容性问题，安装之后根本用不了。最好是用 pip 安装。\n第二步，提出签发 http ssl 申请 #  certbot --text --agree-tos --email \u0026lt;your@email.com\u0026gt; -d \u0026lt;your.domain.com\u0026gt; --manual --preferred-challenges dns --expand --renew-by-default --manual-public-ip-logging-ok certonly 注意，这时候会出现类似下面的内容。\n Please deploy a DNS TXT record under the name _acme-challenge.bristol3.pki.enigmabridge.com with the following value:\n667drNmQL3vX6bu8YZlgy0wKNBlCny8yrjF1lSaUndc\nOnce this is deployed, Press ENTER to continue\n 上面的内容意思是：\n 背景：假设你申请 http ssl 的域名是 bristol3.pki.enigmabridge.com，你对这个域名有管理权； 在上述域名下，设置名为 _acme-challenge 的 txt 类型的记录，值为 667drNmQL3vX6bu8YZlgy0wKNBlCny8yrjF1lSaUndc； 如果上述记录是新建的，那么等待大约半分钟，回到命令行，点击回车继续。  第三步，获取 http ssl 证书 #  完成之后，在 /etc/letsencrypt/live/\u0026lt;your.domain.com\u0026gt; 目录下，有这么几个文件。\n privkey.pem 证书的私钥； fullchain.pem 带完整认证链的证书。注意，说是 fullchain，其实 CA 是 letsencrypt 自家的 CA，在某些老的操作浏览器上仍然有 bug； chain.pem README 上面说法是给 nginx stapling 用的，其实里面就是 letencrypt CA 的证书； cert.pem 域名的 http ssl 证书公钥。  第四步，安装 #  以 nginx 为例。（别问我为什么是 nginx，我最熟悉它，懒，你懂）\n# 只贴出关于 ssl 的部分，其余部分就不贴了。 ssl on; ssl_certificate /etc/letsencrypt/live/your.domain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/your.domain.com/privkey.pem; # ssl_trusted_certificate /etc/letsencrypt/live/your.domain.com/fullchain.pem; ssl_trusted_certificate ssl/letsencrypt_full_chained.pem; ssl_stapling on; ssl_stapling_verify on; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers HIGH:!aNULL:!MD5:!EXPORT56:!EXP; ssl_session_cache shared:SSL:50m; ssl_dhparam ssl/dhparams.pem; ssl_prefer_server_ciphers on; 其中，ssl/letsencrypt_full_chained.pem 是让 ISRG ROOT X1 给 letsencrypt X3 做一个交叉认证的认证链，这是 CA 之间经常使用的一种提高自身兼容性的办法。这个交叉认证证书用如下办法生成。\ncurl -Lo \u0026#34;${HOME}/lets-encrypt-x3-cross-signed.pem\u0026#34; \\  \u0026#34;https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem\u0026#34; curl -Lo \u0026#34;${HOME}/isrgrootx1.pem\u0026#34; \\  \u0026#34;https://letsencrypt.org/certs/isrgrootx1.pem\u0026#34; sed -i \u0026#39;s@\\s*$@@g\u0026#39; \u0026#34;${HOME}/isrgrootx1.pem\u0026#34; # trip the carrige at the end of every line. cat ${HOME}/lets-encrypt-x3-cross-signed.pem ${HOME}/isrgrootx1.pem \u0026gt; \\  letsencrypt_full_chained.pem  PS: 上面的命令简单粗暴，原因是假设 certbot 生成的 fullchain.pem 里面有以下的规则。\n 域名 http ssl 都是由 letsencrypt CA 直接认证的，没有中间的 issuer； 签发证书的 letsencrypt CA 是 lets-encrypt-x3。  所以，当上面的配置出现错误时，快糙猛的办法是屏蔽掉『ssl_trusted_certificate』这行。 毕竟，在功能性面前，兼容性算个逑。\n ssl/dhparams.pem 由以下命令生成。\nopenssl dhparam -out dhparam.pem 2048 配置完成之后，reload nginx 即可。\n自此，阿里云 ECS 终于可以通过 https 协议访问了。舒心啦。\n"});index.add({'id':24,'href':'/posts/2017/07/25/%E7%94%A8-openresty-%E6%9D%A5%E5%81%9A-app-api-%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%AA%8C%E7%9C%9F/','title':"用 openresty 来做 app api 接口的验真",'section':"Posts",'content':"app 服务器端的开发中，有一个百年不变的小东西：api 访问的验真问题。因为 http 协议是无状态的，每次 app 发起请求，我都需要验证这次请求的确是由真实的、授权的 app 发起，以此来阻止不诚实用户发起的攻击、数据爬取，确保产品的安全，和用户在产品上的信息安全。\n JWT（JSON Web Token）是一个 http 之上的不错的 api 验真协议，结合 https，几乎可以安全地传输各种数据。最关键是，它原理简单，没用到啥黑科技，新瓶装老酒，但实用。\n openresty 是春哥做的一款神器，在 nginx 上挂了个 lua 引擎，可以用 lua 脚本指挥 nginx 做很多事情。了解 lua 的童靴都知道，lua 的执行性能堪比 C++/Java 这些编译型语言，大家在一个量级。能做到这步，已经相当感人。用 openresty 来实现 jwt 协议，做 api 访问的验真，可以降低后台系统的复杂程度，同时还能提高系统鲁棒性，防止被恶意攻击时系统雪崩。\n现在已经有 openresty 的 jwt 模块，叫 lua-resty-jwt 的，还有基于它做了二次封装的 openresty-nginx-jwt。\n有了这个 jwt 的 openresty 模块，可以在 http server 这一层对 api 访问做验真，业务系统接收到的请求理论上都是真实的，避免调用庞大的业务系统做验真。这在收到 api 攻击的时候效果最明显，那时每次调用庞大的业务系统，加载若干组件，仅仅做了一次验真，然后就释放资源，销毁请求。简直是罪过。\n话分两头说，直接上这个 jwt 模块存在一些风险。要在生产环境使用 jwt，还有一些工作必须做。\n secret 的策略。jwt 协议中，并没有规定 secret 怎么来的，实际操作中，不同的 secret 策略会有不同的效果。   整个系统使用一个固定的 secret。不诚实用户可以注册账户，暴力穷举或内存搜索，得到 secret 明文。存在系统性风险。风险高。 一台服务器使用一个 secret，secret 写到 openresty 的配置中。仍然有上述问题，还增加了做负载均衡的难度。风险高。 一个用户一个 secret，openresty 根据用户信息取 secret 编解码。风险低，复杂度高。  api 访问日志需要保存。特别对验真失败的访问，要能有手段及时处理日志，分析风险，对恶意用户可以屏蔽 IP 等手段规避。 经过验真的 api 访问日志结合静态资源访问日志，可以模拟真实用户的访问场景。结合 lazy load 等前端技术，甚至可以判断出用户究竟看了几页，资源加载速度快还是慢。这么好的资源，不能浪费。  接上面。第一点好解决，一个 subrequest，或者单独给 lua-resty-jwt 一个 redis 存用户的 secret，就行了。第二点和第三点说的其实是一件事情，记日志，而且是把验真失败和验真成功的日志分开记。验真失败的日志需要参与在线准实时的计算，验真成功的日志打包保存，用来做离线的大数据分析，统计用户访问指标，优化产品。\n一个小组件，挺好玩儿的一件事。\n"});index.add({'id':25,'href':'/posts/2016/10/30/%E7%94%A8%E6%88%B7%E5%B0%B1%E6%98%AF%E4%B8%AA%E6%95%B0%E5%AD%97%E5%A4%96%E4%B8%A4%E5%88%99/','title':"用户就是个数字（外两则）",'section':"Posts",'content':"这两天有种忙得不亦乐乎的感觉，倦怠了写博客。\n用户就是个数字 #  要说的是关于鹅厂邮箱的事儿。标题是很多大公司做产品的哲学，当然也包括鹅厂自己家的。\n我是鹅厂毕业，也算是鹅厂粉丝，但凡能鹅厂产品能满足要求的地方，就不会用别家的产品。企业邮箱就是一个例子。\n我的个人常用邮箱以自己的域名作为后缀，最初放在腾讯邮箱的『企业邮箱免费版』上，用了有两年左右的时间，一直很正常。一直到这周朋友给我发送邮件，被退回来，提示邮箱不存在一类的错误。我才注意到，原来我的免费版的企业邮箱被腾讯单方面终止了服务，正在使用中的邮箱无法收发邮件，甚至无法登陆，从管理后台登陆上去才了解到是域名无故被解绑。而在这之前，无论是我绑定了该企业邮箱的微信，还是企业邮箱本身，被抑或企业邮箱的管理账号，都没有收到任何相关的提示信息。\n我首先排除管理账号被盗、黑客为之的可能性。很简单，腾讯企业邮箱的那个管理账号我很长很长时间没有使用过，账号名是一个我从来没有在别的地方使用过的字符串，不存在被社工被钓鱼的可能性。而且管理后台中，我的企业邮箱绑定过三个域名，除开今年有一个因为域名到期没续费自动失效当即被清理，一个我一直在使用中的域名无故清除，只剩下一个绑定后几乎没有使用过的域名。如果是黑客捣鬼，为什么单独给我留一个没使用过的域名？这讲不通。\n后来有朋友在朋友圈中留言，了解到原来有朋友也遇到过，也是腾讯企业邮箱免费版，绑定的域名下有一个用来做客服的邮箱，经常在登录使用，也是毫无预警的情况下被清理，并且也是从后台直接解除了整个域名的绑定。\n不同的是，朋友用的邮箱在两个月前失效，我的邮箱是在一个月前失效。分批分次在清理免费邮箱——而且是不给你任何预警、提示、通告、宽限期、选择项…… 直接让你的邮箱和邮件消失掉的清理。\n到现在，这事儿几乎很明显是腾讯邮箱人为在清理的动作。因为太没底线了。按照腾讯一贯的价值观，这绝对不是一个『正直』的事情，这样的服务态度也不完全不符合『水和电』的特征，更加不『值得尊敬』。\n在大厂做过 2C 产品的同学都知道，用户不过是一个庞大的数字，和员工自身利益休息相关的 KPI 也是通过评价这些数字，来调节对员工的奖惩。对于每一个单一的用户，大厂的产品真的是多你一个不多少你一个不少。\n今天正好看到广研大 boss 张小龙在微信事业群管理大会上的一个演讲， 明确要求内部不要盲从流程和 KPI，要坚持用户价值导向。真的说得很好。他还特别举了 QQ 邮箱的例子，这是个大家都比较熟悉的例子。当年 QQ 邮箱从上不了邮箱服务 Top10 排名到后来逆袭压倒 Hotmail 和网易邮箱，方法是小团对敏捷开发，背后的思想仍然是坚持用户价值导向。如果企业邮箱的团队能够坚持用户价值导向，是一定不会做这么出格的事情。\n希望老东家能越来越好。千万守住自己的底线。\n 139 邮箱之乱象 #  又是邮箱的故事。\n我的 139 邮箱在 2014 年设置过一个别名，这样可以用英文名而不是手机号作为邮箱前缀，识别度更高。我拿 139 邮箱主要是在国企那段时间用来收发工作上的邮件。\n然而自开通邮箱别名开始，就经常收到一些莫名其妙的邮件，邮件经常开头有名有姓，称谓是我没听过的名字。刚开始以为是骚扰邮件，没有管，后面类似的邮件来得越来越多，我也听之任之，反正这个邮箱后来几乎就没有怎么用过了。\n这周忽然收到一封邮件，是 微博发送的，提醒我登录别名邮箱对应的微博账号。很奇怪，我不可能用 139 邮箱注册微博账号。担心邮箱帐密被盗用作什么不好的事情，于是通过微博的找回密码服务找回了账号对应的密码（后来知道，微博账号如果没有绑定手机，那么别人拿到你的邮箱，随便使用一个手机也能找回密码），发现是一个运营了三四年的企业微博，企业地址在上海。到此我才恍然大悟。\n在我设置 139 邮箱别名的时候，我设置的这个别名其实是有人在使用的。不知为何，139 邮箱仍然把这个别名分配给我。所以我经常收到本该属于另一个用户的邮件，而且猜想那个用户同时也能收到本该属于我的邮件吧。一个别名邮箱，我们俩都有在使用，不论谁发送邮件，我们俩都能收到。\n最后我给我们俩『共用』的别名邮箱发了消息，告诉他这个情况，并承诺把微博密码还给他。希望他能看到。\n邮箱作为互联网基础服务，服务的稳定性应该要有最基本的保障，安全和隐私也应该要能做到最基础的保障。这跟邮局里面申请一个邮箱一样的。可是一周内竟然遇到两次大乌龙，我也是醉了。\n所幸我还有一个 gmail 注册的企业邮箱。从今天起，免不了后续会逐步把常用邮箱换成那个。\n在天朝，用个邮箱都能吓死宝宝。\n 关于运维的笑话 #  有个运维跟中学同学聚餐，接了个电话，大家都吓尿了。。。。\n『喂，是我。』 『怎么回事？……卡在哪儿了？』 『不行就杀了吧，做事别磨磨唧唧的。先保证业务正常。』 『啥？找不到？杀不了？你不知道 killall 啊！把这个名字的全干了。』 『嗯。』 『诶？怎么还报警了！』 『你让胡总赶紧把警报先关了。你就在现场，报警有个屁用。』 『你跟他好好说一下，就说是我说的。这破事儿二十分钟内就能搞定，不要动不动就报警。』 『嗯。』 『对，挂了也要拉起来，就没什么不行的！他敢挂掉你就再拉一个。』 『擦！早不挂晚不挂，这会儿挂，真特么不是时候！』 『行了，我马上过来。都特么不给老子清净！擦！』 ………… (o_o) 『我不吃了，要去加个班。喂，你们都看着我干嘛…… 』\n"});index.add({'id':26,'href':'/posts/2016/10/22/%E4%B8%9C%E8%88%AA%E4%B8%A4%E9%A3%9E%E6%9C%BA%E9%99%A9%E7%9B%B8%E6%92%9E%E4%BA%8B%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%A3%9E%E8%A1%8C%E7%9F%A5%E8%AF%86/','title':"『东航两飞机险相撞』事件中的飞行知识",'section':"Posts",'content':"今天无意中打开 Maxthon，看到了推荐的一则旧闻—— 『东航两飞机险相撞』。我记得事件当天就有看到这则报道，当时的第一反应是：类似 荷兰皇家航空发生的空难（特内里费空难）在虹桥机场被避免了。今天看到的更多是后续报道，新闻报道的焦点几乎都在 V5 的机长和疏忽的管制员身上。\n俗话说，对航空航天没点儿兴趣的码农不是好的 CTO。凭借我多年积累的航空知识，和对航空事业发展的关注——其实就是对各城市机场航班老是延误的那点儿感性认知——跑道入侵征候（被规避了，不算空难）在今天不能算是罕见。不过这次这个事件号称是相差三秒相撞，事后也被定型为 A 类跑道入侵事件，说明事件本身还是非常严重的。\n下面摘自 澎湃新闻的后续报道。\n 通报称，这是一起塔台管制员遗忘飞机动态，违反工作标准而造成的人为原因严重事故征候。性质极为严重，属于A类跑道入侵，险些发生飞机相撞。当时两架飞机垂直距离仅19米，翼尖距13米，两机仅差约三秒就会发生碰撞。320机组果断处理，操纵正确，避免了一起事故。330机组接受了穿越跑道的错误指令后，虽然看到了飞机起飞，但并未提出质疑。\n通报认为，管制员违反相关规定，盲目指挥，双岗制责任落实不到位；专业人员资质是重中之重，自制能力要跟上；管理手段和工作流程存在问题，要系统思考原因，加以改进。\n通报还提到，330机组存在SOP的问题，观察不周，不按规定，关闭了应答机。带飞左副驾驶不知道东航穿越跑道程序。没有交叉检查，没有互相证实。但是机组没有机械听从塔台原地等待命令，加速穿越，避免了两机相撞，暴露了训练上的问题。320机组处理非常到位，临危决断，立了大功。副驾驶操纵迟疑，点了一下刹车，机长迅速接过操纵，以7.03度/秒的速率，带杆到机械止动位。\n 首先明确了这是一起人为因素造成的事故，而且是塔台管制员疏忽占主因、A330 机组占次因的事故。事后调查表明，A330 机组存在 SOP 问题，以及观察不周、关闭应答机等问题。\n其次，报道中提到了 A320 机组在事件中临机处置立了大功。7.03度/秒的速率，带杆到机械止动位，才避免了两机相撞的事故。当然，这其中还有一个明显的对比：『副驾驶操作迟疑，点了一下刹车』，后来『机长迅速接过操纵』，才避免了机毁人亡的悲剧。\n这其中有多个航空相关的知识，自己也是边看新闻边搜索，记下来，也给其他有兴趣的朋友科普一下。\n基础概念 #  跑道入侵 #  具体的知识见维基百科 跑道入侵条目。\n按照定义，很显然，本次事件中，A330 错误地出现在飞机起飞和降落的保护区域表面，是一起跑道入侵事件无疑。\n 据悉，通报指出，此次事件性质极为严重，属于A类跑道入侵。\n据业内人士介绍，“A类跑道入侵”非常罕见。目前，民航界把跑道入侵分为以下五个级：\nA类，间隔减小以至于双方必须采取极度措施，勉强避免碰撞发生的跑道入侵；\nB类，间隔缩小至存在显著的碰撞可能，只有在关键时刻采取纠正或避让措施才能避免碰撞发生的跑道入侵；\nC类，有充足的时间和（或）距离采取措施避免碰撞发生的跑道入侵；\nD类，符合跑道入侵的定义但不会立即产生安全后果的跑道入侵；\nE类，信息不足无法做出结论，或证据矛盾无法进行评估的情况。\n按照《民用航空器事故征候》标准，A类属于航空器严重事故征候，B类属于一般事故征候。据悉，根据新下发的文件，“A类跑道入侵”是指必须立即采取极端措施才能避免相撞的跑道入侵。\n——摘自 传送门 新民晚报\n 客机离地起飞的介绍 #  这里有一篇通俗易懂的科普文 《客机驾驶探秘Airline Pilot 3.3 起飞离地》。\n为简化阅读和防链接失效，同时把重点摘录整理如下。\nPFD #   PFD，直译过来就是『主飞行显示屏』，主要用来显示飞机的飞行状况，以及计算机给出的一部分飞行建议。\n 上图是波音 737 的 PFD。其中，紫色的倒 V 字型标识是 FD 指令条（Flight Director Command Bar），下面白色的倒 V 字型标识代表自己的飞机。按照例子中的状态解读：飞机需要执行拉起 +8 度抬头的操作。\n 上图是空中客车的 PFD。Flight Path Director (FPD) 线是计算机所给出的指令，Flight Path Vector (FPV) 表明飞机处于的方位，飞行员要控制飞机使 FPV 处于 FPD 的中心。此例中飞机左转时机头向下，应保持左转并拉起 +4 度抬头。\n起飞（taking off）过程中的几个关键速度 #   VMCG：最小地面控制速度。這個速度確保飛機的可控性，提供穩定的發動機推力，液壓系統，在偏離跑道、滑行道中心不超過30ft的情況下的穩定安全操作。 V1：決斷速度。在達到V1時刻后，起飛或終止起飛的決定不能修改。 VMU：最小分離（Unstick）速度。起飛抬頭到最大的速度。（如果飛機抬頭，超過這個速度就會離地。） VR：抬輪速度。它比VMU更大，因為它要確保即使有一台發動機故障，離地35ft后飛機速度仍然必須大於V2。 VMCA：最小空中控制速度。滿足飛機在空中實現控制的最小速度。 V2：安全起飛速度。在單引擎故障后，V2表達能保持飛機爬升的最小速度。在引擎無故障時，飛機的爬上速度比V2要稍快（+10）。在從V2 到 V2+10 過程中如果發生單引擎故障，則保持當前速度。\n作者：崔巍 链接：https://www.zhihu.com/question/49067829/answer/114121376 来源：知乎 著作权归作者所有，转载请联系作者获得授权。\n 离地起飞流程 #  PFD 中 FPV 保持水平 -10 度的状态，开始滑行。\n速度达到 60 节（约 111 km/h）之后，FD 会给出 +15 度的提示，但是因为此时速度还没有达到 Vr，所以此时还不能拉杆抬起机头。\nPS：请记住，+15 度是大多数客机的起飞攻角，这个数据对后面正确理解 2016 虹桥跑道入侵事件中，A320 机长做出的操作有帮助。\n速度达到 80 节（约 148 km/h）时，副驾驶会报告『80』，机长仍要左手向前轻压操纵舵，确保 FPV -10 度的位置，抑制机头抬起，确保飞机维持在跑道中央滑行。此时机长是通过脚舵控制前轮左右转向的。波音 737 的数据是前轮可以做左右 7 度的转向，飞机起飞、降落时机长用脚舵进行操作完全足够了。\nPS：也有例外。参考 今年三月南航在太极国出的事儿，操纵飞机紧急向左避让六米的 KE1958 机长应该不止用了脚舵。这出闹剧的主角 CZ8444 还有神奇的地方，后面再补充。在这里为 KE1958 的机长点个赞！！！\n 速度达到 84 节（约 156 km/h），（波音 737）PFD 上的模式显示会改变为『THR HLD，TO/GA，HDG SEL』。THR HLD 说明发动机自动推力值被锁定，发动机将会以这个油门推力一直飞到飞机离地 18 秒或者飞到离地面高度 400 英尺，这之后才允许改变推力。THR HLD 保证了起飞阶段对发动机不会因某种特殊原因突然降低油门，保障了飞机的安全性。在 Airbus 系列飞机中，也有类似的设定，叫『 Autothrottle』。\n飞机继续加速达到了起飞决断速度 V1，副驾驶继续报告『V1』，据说发音的规则是当速度显示到离 V1 还有 5 节是开始发音，而当说完『1』的时候要速度刚好显示在 V1 出才行。达到 V1 以后，飞机即使发生故障也不能再停车而要继续完成起飞动作，因此听到副驾驶的报告后，机长必须把一直放在发动机推力杆上的右手移动到操纵舵上开始两手操纵飞机起飞，或者放在扶手上。（这之前机长要时刻准备好万一发生意外时随时可以把发动机停下来，所以右手一直放在推力杆上。V1 以后为了防止错误操作油门，因此把右手移开可以提高安全性。）\n紧接着抬前轮速度 Vr 到了。副驾驶继续报告『Vr』。机长其实这时候也一直订着仪表，并不是等到副驾驶报告以后才进行操作，而是在飞机达到 Vr 速度的瞬间，也就是副驾驶报告 Vr 的同时，向后拉起操纵舵，使机头大概以每秒 3 度的速率抬升，把飞机拉起至 PFD 中 FD 指示条的 +15 度位置。因为这个动作的时机对于起飞滑行距离有很大的影响，稍微晚一些地面滑行的距离就会增大，所以在这里飞行员的操作一定要尽可能和 Vr 同时进行。\nPS：根据新闻，A320 机组确定情况紧急的时候，速度已经达到 130 节（约 241 km/h），知乎上一位答主的判断是： 已经非常接近 V1 起飞决断速度。\n机长继续保持飞机抬头姿态，与 FD 指示条保持一致，很快地就达到了 V2 速度，副驾驶再次报告『V2』。此时飞机的姿态是抬头 +15 度俯仰角，而刚才还在跑道上滑行的位于机身下的主起落架也开始腾空离地，机长的双脚也可以离开脚舵，这之后的操纵就主要靠操纵舵或者操纵杆，按照 FD 指示的方向，上下左右平滑的驾驶飞机了。\n本次事件的解读 #  塔台管制员 #  事件猪脚，调查后的责任比例划分没有问题。\n但个人觉得，遗忘飞机动态，违反工作标准这句话有些问题，本末倒置。遗忘是人的生理特点之一，不能因为这个来指责管制员。这就像你不能因为医生上班时间老是走神，拿来作为解释医疗事故的原因。违反工作标准才是主因。制定工作标准的作用之一就是为了防止『遗忘』的。\n当然，塔台管制员应该有一定职业素养，包括形成良好短时记忆习惯，而不是完全依赖电气设备。这次因为对电气设备的过度依赖，出现漏洞，险些酿成事故，暴露出管制员的职业素养较低，这是管理上的问题，不能算在管制员身上。\nA330 机组 #  带飞左座副驾驶最冤枉，本来很有机会近期就晋升机长，现在看来机会不大了，至少得要回炉重造。一名都不熟悉穿越跑道流程的副机长，这种状态下肯定是没办法晋升的，更不要说出了这个事件。\n同样，A330 机长也不会很利索。不管是故意还是疏忽，违反 SOP 的问题和背『瞭望不周』的锅，这两方面都躲不掉。\n最神奇的是，在报告给中队后，中队在下午三点左右才报告大队，而涉事飞机紧接着执飞了另外一条航线，导致舱内通话记录被覆盖，给后续的调查造成比较大的困扰。这么低级的错误在今年三月份南航 CZ8444 韩国跑道入侵事件中也出现过。短时间内反复发生类似的错误，实在是很难让人相信是非主观因素造成的。如果真有故意干扰事件调查处理的嫌疑，相关人员的职业道德恐怕会被拷问，后续在行业中恐怕难有发展。\nA320 副驾驶及中间座 #  新闻中只用了一句话来描述中间座：机长让中间座询问塔台（是否让其它飞机穿越跑道）。\n对副驾驶的描述也是一句话，不过偏负面：副驾驶操纵有所迟疑，点了一下刹车，多亏机长迅速接过操纵。\n个人觉得副驾驶不能算是有过错，毕竟经验不足，按照描述来看，机长接过操作之前副驾驶点过刹车，而机长确认 A330 在穿越跑道、决定继续起飞的时候，速度不过 130 节，而理论上 130 节可能逼近、肯定是不到 V1 起飞决绝速度的。基于此，副驾驶的行为最多也就算是鲁莽，经验不足，没有违规。\n新闻中一句话形容一个人，这句话还带负面腔调（用了转折词），实在是不公平。\nA320 机长 #  英雄无疑。救回来两架飞机和五百多口子人。乘客和机组就不说了，可以说是机长的责任，东航和虹口机场大大小小的领导、上海市政府有关部门的领导们，你们真的该排队去谢谢人家！真心诚意的！\n7.03 度/秒，带杆到机械止动位 #  7.03 度/秒是个什么概念，看看这里， 有视频帮助直观理解。这里还有一部是 波音 787-9 机型在 2014 年国际空展上的起飞极限演示（需翻墙）。\n根据 川航一篇文章给到的数据，A320 在主起落架完全伸出的起飞状态（零负载）下机尾擦地攻角 13.5 度，在主起落架完全压缩的起飞状态（满负载）下机尾擦地攻角 11.7 度。因为没有客观数据，只能瞎蒙，所以我们取平均值：12.6 度。\n7.03 度/秒，离地前最大 12.6 度的最大起飞攻角。相当于机长在短短不到两秒钟时间内迅速拉起机头，抬到一个最大允许的极限攻角（这点没有数据，只能从机长急于操纵飞机快速离地并爬升的意愿推断）。这种体验，经常坐飞机的朋友们可以脑补一下，反正我是相当醉的。\n机上乘客的心理阴影面积 #  A330 上据说有乘客（按示意图应该是左侧舷窗的乘客）看到一架飞机奔袭而来然后从自己头顶绝尘而去。心理阴影面积求不出来，我觉得应该是已经崩溃了。就算还有心情吐槽这事儿，也会被河蟹的。\nA320 飞机上倒是有乘客发了朋友圈，第一时间感谢机长。他们的心理阴影面积应该小得多吧。\n后记 #  现代空难，没有一例是单一原因造成的。最好的规避方法还是严格按照 SOP 执行。SOP 几乎都是血的教训总结出来的，没理由不去遵守。\n作为乘客，能做的就是在你登机之后离机之前，祈祷吧。\n"});index.add({'id':27,'href':'/posts/2016/10/17/%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7DNF/','title':"另一个包管理工具——DNF",'section':"Posts",'content':" 更新（2017-06-01）：repo 的 url 有变化，更新之。后附更新脚本。\n   DNF 起源于 YUM 的一个分支，最早用在 Fedora 18，在 Fedora 22 中默认安装，成为系统工具。 现在更是被广泛看作 YUM 的接班人。虽然 DNF 号称自己不错，但是幸好，至少从目前来看，都可以看做是对 YUM 的小修补。整体来说，DNF 对 YUM 的兼容做得很好，甚至于部分操作可以 yum 和 dnf 混合着来——当然，新旧掺杂绝对不是好习惯，我就这么一说，证明 YUM 和 DNF 的关联之亲近。用惯了 YUM 的朋友们一定不会抗拒换到 DNF，它们的 用法非常相似，而且 DNF 的更有现代语言风格。\n我常用的系统是 CentOS，虽然已经被 RedHat 收购，但是 CentOS 的品质和定位都没有变，这很难得。最新（截至 2016-10-16）的 CentOS 是 7.2.1511。下面的步骤在 CentOS 上尝试，对 Fedora/RHEL 理论上同样适用。Fedora 上应该还更加简单，下面的问题好多都不会遇到。\n闲话不说，安装步骤如下。\n一、手动安装全新的 yum repo #  新增一个 repo，从这个 repo 中用 yum 安装 DNF。这是因为 CentOS Base repo 中的 DNF 版本太低，只有 0.6.x，而最新的稳定版已经到 1.1.9。0.6.x 中的 libsolv 太低， 导致不能处理 .bz2 压缩包，所以只能采用 引入新 repo 来安装 DNF 的办法。\n ```bash cat /etc/yum.repos.d/dnf-stack-el7.repo [dnf-stack-el7] name=Copr repo for dnf-stack-el7 owned by @rpm-software-management baseurl=https://copr-be.cloud.fedoraproject.org/results/@rpm-software-management/dnf-stack-el7/epel-7-\\$basearch/ skip_if_unavailable=True gpgcheck=1 gpgkey=https://copr-be.cloud.fedoraproject.org/results/@rpm-software-management/dnf-stack-el7/pubkey.gpg enabled=1 enabled_metadata=1 EOF ```   Update (2017-06-03): 因为 rpm-software-management 提供的 repo 变更了 url，因此上述脚本也做了相应更新。如下。\n cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/yum.repos.d/dnf-stack-el7.repo [dnf-stack-el7] name=Copr repo for dnf-stack-el7 owned by @rpm-software-management baseurl=https://copr-be.cloud.fedoraproject.org/results/@rpm-software-management/dnf-centos/epel-7-\\$basearch/ skip_if_unavailable=True gpgcheck=1 gpgkey=https://copr-be.cloud.fedoraproject.org/results/@rpm-software-management/dnf-centos/pubkey.gpg enabled=1 enabled_metadata=1 EOF 对于已经用旧的脚本安装过 dnf repo 的系统，可以使用下面的命令 fix。\n[[ -f /etc/yum.repos.d/dnf-stack-el7.repo ]] \u0026amp;\u0026amp; \\  sed -i \u0026#39;s@/dnf-stack-el7/@/dnf-centos/@g\u0026#39; /etc/yum.repos.d/dnf-stack-el7.repo 二、安装 DNF #  yum install dnf dnf-conf dnf-automatic 三、验证及状态检查 #  安装完成后检查 DNF 的版本（如果报错，请看下一节）。\ndnf --version 截至现在（2016-10-16），通过 yum 安装的 DNF 最新的版本号是 1.1.9，也就是说，你安装的 DNF 不应该低于这个版本号，才是对了。\ndnf repolist all 这可以查看当前 DNF 用到那些软件库的资源。按照使用 YUM 的习惯，最重要的无非 Base、EPEL、Updates 这三个。\ndnf list installed 查看已经安装的应用。 PS：从第三列很容易看出，以前通过 YUM 安装的应用，都被划为 @System，即系统模块类别。这应该是为了能从 YUM 平滑过渡的一个折衷办法。\n四、部分问题的解决（更新中） #  1. 『Failed to open: \u0026hellip;..updateinfo.xml.bz2』错误 #  这是由于 低版本的 libsolv 库无法处理 bzip 压缩包形式的依赖关系造成的，解决的办法不是升级 libsolv 库，貌似库文件一起被封装成 python package，做到 rpm 里面了。所以正确的方法是，按照上面的步骤一、二重新安装 dnf。重新安装之前，必要的话应该删除旧的 DNF 及其依赖。\nyum erase dnf dnf-conf dnf-automatic python-dnf \u0026amp;\u0026amp; \\ yum install dnf dnf-conf dnf-automatic # python-dnf 会作为 dnf 的依赖自动被安装 2. DNF 无法使用 epel 库 #  yum erase -y epel-release \u0026amp;\u0026amp; dnf install -y epel-release 通俗来讲就是让 DNF 来维护索引。\n3. 『No such command: xxx. Please use /usr/bin/dnf \u0026ndash;help』 #  通常遇到这种情况，是没有安装 DNF 扩展导致的。用下面的命令安装上 DNF 扩展之后，问题就能顺利解决。\ndnf install -y dnf-plugins-core "});index.add({'id':28,'href':'/posts/2016/10/06/MacOS-Sierra-%E5%8D%87%E7%BA%A7%E4%B9%8B%E5%90%8E%E7%9A%84%E5%9D%91/','title':"MacOS Sierra 升级之后的坑",'section':"Posts",'content':"今年六月，Apple 宣布要 把 MacBook 的 OS 名称从 OSX 改名为 MacOS。为了体验第一代的 MacOS Sierra，我也是第一时间选择了系统升级。2012 mid 的 MBP，升级到 MacOS，感觉我也有点拼了。\n升级完之后总体感觉还好，几乎都在预期内。却是在升级完成后大约第三天遇到 Chrome 报错，而且是反复的、随机的报错：『ERR_NETWORK_CHANGED』和『ERR_CERT_DATABASE_CHANGED』，就这两个。第一个出现的时候，页面 load 失败；第二个错误出现一般都是 js 或者 css 等页面资源 load 不下来（但是在新窗口打开这些资源又都没有问题）。\n找了一圈，国外的网友们普遍表示情绪很稳定，没有遇到过。难道只是我大兲朝人民会遇到？\n一开始考虑过是最近倡导的 HTTP =\u0026gt; HTTPS 运动，有部分网站匆忙升级，可能在主站和资源站（相当一部分网站会把静态资源放到 CDN 上）之间的 key chains 路径有冲突所致。CERT_DATABASE_CHANGED 应该也是差不多的意思——原谅我懒癌发作，没去挖 chromium 代码。\n不过网站的配置有错，我也没辙。问题却总是要解决的，哪怕用什么讨巧的办法。于是，今天找到了 V2EX 上面的这个 issue 《MacOS Sierra 升级 CHROME 用 HTTPS 访问间歇性失败》。原来已经有朋友 发现了罪魁祸首，就是 Alipay 的安全控件。从评论区盆友们的反馈看，问题是已经解决了。\n评论区给出手动解决的办法。\n# 第一种办法：停用支付宝的安全控件 sudo launchctl remove com.alipay.DispatcherService # 第二种办法：彻底删除（手动卸载）支付宝安全控件 sudo rm -rf /Library/Application\\ Support/Alipay \u0026amp;\u0026amp; \\ sudo rm -rf /Library/LaunchDaemons/com.alipay.DispatcherService.plist \u0026amp;\u0026amp; \\ sudo rm -rf ~/Library/LaunchAgents/com.alipay.adaptor.plist \u0026amp;\u0026amp; \\ sudo rm -rf ~/Library/LaunchAgents/com.alipay.refresher.plist \u0026amp;\u0026amp; \\ sudo rm -rf ~/Library/Internet\\ Plug-Ins/aliedit.plugin \u0026amp;\u0026amp; \\ sudo rm -rf ~/Library/Internet\\ Plug-Ins/npalicdo.plugin 停用或者删除支付宝安全控件带来的安全隐患是，支付宝不能帮你『防止账户密码被木马程序或病毒窃取』。不过就像评论区里面另外一位朋友说的：\n 现在支付宝都在手机上用，我碰上这个问题估计是历史遗留问题，否则我也不会中 alipay 的插件，我记得 macos sierra 禁用了一些低安全协议，估计插件还在用这些协议，就体现到这个上来了。\n 支付宝产品安全策略的变化可以很清晰看出来，手机支付的方式越来越成为主流，而且相对也更为安全可靠。PC 端支付的机会越来越少，MacOS 上装不装、用不用支付宝安全控件，影响不大。跟 Chrome 抽风比起来，我更愿意卸载它。\n持续观察一段时间之后，再做评论。\n PS：忽然好担心 https 还能不能用 proxy 方式的做 sniffer？开发调试怎么办？囧\n"});index.add({'id':29,'href':'/posts/2016/09/29/%E7%BE%9E%E8%80%BB%E5%95%8A%E6%88%91%E4%BB%AC%E5%B1%85%E7%84%B6%E6%B2%A1%E6%9C%89%E6%95%8C%E4%BA%BA/','title':"『羞耻啊，我们居然没有敌人！』",'section':"Posts",'content':" 这篇文章阐述的是对我整个职场影响较深的思想之一。当年上大学，从《读者》上第一次读到这篇文章，觉得貌似很有道理，记住了。进入职场后，发现这简直就是某些看似不可思议、却又一遍一遍发生的事实的背后真理。后来知道它还有『鲶鱼效应』、『逃离舒适区』、『可以共苦不能同甘』等等不同的称谓。\n转载自 《南方周末》电子版。如有侵权请告知，会删除。\n 我曾经在随笔中谈到过有关的士司机的经历。与其他城市相比，这种经历以发生在纽约的最为有趣，原因有三。\n第一，纽约的司机来自世界各地，语言、肤色都各不相同；每个人都配有一张小牌子，上头写着自己的名字。因此，每次上车后，辨认他们究竟是土耳其人、马来西亚人、希腊人、犹太人还是俄罗斯人，就成了一件很有意思的事情。他们中的很多人总是通过“他们”自己的电台来相互联系，电台里说着他们的语言，播放他们的歌曲，因此，有时打的去中央公园就好像是打的在加德满都旅行。\n第二，在纽约没有人把的士司机作为终身的职业，而只是把它当作一份临时工作；因此，坐在的士方向盘前方的有可能是一名学生、一位失业的银行员工或是一个刚来不久的移民。\n第三，纽约的士司机总是成群结队地出现：在某个时期内，大部分司机都是希腊人，过一段时间后又变成了巴基斯坦人，之后又是波多黎各人，诸如此类。通过这一点我们可以观察到移民的浪潮以及各个种族的胜利：当某一群的士司机从这个行业消失时，就意味着他们碰到了好运气，声势壮大了，说明他们可能转移到烟草店、蔬菜店里工作，转移到城市的另一个区域生活，登上了一个新的社会台阶。\n因此，除了能够观察的士司机个体的心理差异（有癔病患者，有厚道热情者，有投身政治者，有反对某主义者）之外，出租车更是一个观察社会现象的绝好场所。\n上个星期，我碰到了这样一个司机：他是有色人种，名字很难拼，后来他告诉我他是巴基斯坦人。聊到这儿的时候，他问我是哪国人（纽约的外来人口相当多），我说我是意大利人，于是他就开始问我问题。看上去他似乎对意大利相当感兴趣，后来我才明白，他之所以有这么多问题，是因为他对意大利一无所知，既不知道意大利在哪儿，也不知道那里说什么语言（通常，当你告诉一个的士司机说在意大利人们讲意大利语时，他们都会感到很震惊，因为他们已经习惯性地认为全世界都在讲英语了）。\n我快速向他描绘了一下，说意大利是一个半岛，中部是绵延的山脉，而周围则被一圈海岸线包围，那里有许多美丽的城市。当聊到意大利的人口时，他惊讶于意大利的人口居然那么少。随后他又问我意大利人是否都是白种人，还是多种族混杂，我向他大致解释说：起初，所有的意大利人都是白种人，但现在也有一些黑人，不过数量总比美国要少。他当然也想了解意大利有多少巴基斯坦人。我回答说，可能有一些，但比菲律宾人和非洲人要少。听了我的回答，他显得不太高兴，或许在想为什么他的民族不愿意去意大利这个国家。\n我又傻乎乎地告诉他说意大利也有一些印度人，他立刻怒视着我：我不该把两个如此不同的民族相提并论，不该提起这个在他心目中如此低等的民族。\n最后，他问起谁是我们的敌人。我问：“什么？”于是他耐心地向我解释说他想知道意大利人目前正和哪个民族进行战争，不管是为了领土争端、种族仇恨，还是边界侵略等其他原因。我说我们没和任何民族打仗。他继续耐心地问我谁是我们历史上的敌人，也就是那些和意大利人相互残杀的民族。我再次重申我们没有这样的敌人。最近的一场战争发生在五十多年前，即使是在那场战争里，我们也没有搞清楚过究竟谁是我们的敌人，谁又是我们的盟友。他对我的回答很不满意，并坦白地告诉我说他认为我在撒谎。一个民族怎么可能没有敌人呢？\n那件事就到此结束了，我为本民族这种麻木的和平主义而多给了他２美金的小费。但我一下车就忽然想起了本应该在刚才告诉他，却一时没有想起的正确答案。这种现象被法国人称为“ｅｓｐｉｒｉｔ ｄ＇ｅｓｃａｌｉｅｒ（马后炮）”。\n我应该告诉那个司机意大利人是有敌人的。但那种敌人却不是外来的敌人，他们也根本无法确定谁是自己的敌人，因为他们总是在内部持续地争斗。意大利人之间总是在斗争：城市跟城市斗，邪教与正教斗，阶级跟阶级斗，政党与政党斗，同一政党中的成员相互斗，大区跟大区争，政府跟司法部门争，司法部门又与经济部门争，国家电视台与私人电视台争，联合政府之间的成员互相争，部门与部门争，报纸与报纸争。\n我不知道那个司机是否能听懂我这样的回答，但如果我刚才这样回答他，作为一个没有敌人的国家的公民，至少不会丢脸。\n"});index.add({'id':30,'href':'/posts/2016/09/28/%E8%AF%BB%E8%AF%84%E5%B0%8F%E7%99%BD%E5%85%94%E5%92%8C%E9%87%8E%E7%8B%97%E7%9A%84%E7%94%9F%E8%B7%AF%E4%BD%95%E5%9C%A8/','title':"读评：小白兔和野狗的生路何在？",'section':"Posts",'content':"最近被徐新女士的 《用人问题上，“野狗”和“小白兔”都要干掉》一文刷爆了朋友圈，有些很少转载鸡汤文的朋友也转发了这篇文章，且转载的朋友中几乎都是自己创业或做管理的朋友，看来此鸡汤很对大多数创业者、管理者的胃口。\n虽然大家普遍觉得这碗鸡汤营养很好，我还是觉得它鸡精放太多——鲜而犯腻，而在这个食材也就是观点上有偏颇。从篇幅上看，徐新女士演讲稿关于人才怎么用的篇幅并不大，演讲稿的书面内容与标题表达出来的笃定语气不太相符，猜想这个标题是标题党后来扣上去的。不过影响这么大的文章，我还是想忍不住说两句。\n首先要说的是分类的问题：什么是小白兔员工？什么是野狗员工？ #  按照前导文给出的答案，野狗员工业绩好，但价值观不好（人品不好，吃回扣等），小白兔员工则兢兢业业，勤勤恳恳什么都好，价值观和勤奋都没有关系，就是人没有什么贡献。相对应的，价值观好、业绩好的是明星员工。\n从定义中可以看出来，徐女士从价值观和业绩两个方面来评判一位员工属于哪一类型。虽然我并不觉得把所谓『价值观』列在对员工的评判维度——注意此处不是评价维度，评判带有判决或者盖棺定论的意味，因为这次评判是徐新女士建议对部分员工做处理的依据——里面是公平的，不过这个地方我就先不展开，姑且按照文中这个思路来。\n补充一下，我也并不认为那些会 把『猴子』抛给领导的员工属于小白兔员工，他们是小孩子和心机婊。我也不认为那些完全不能跟公司提供的平台和平共处、准备捞一票闪人的员工会是野狗，他们业绩再好也只是祸害。\n其次，我们做企业的目标到底是做事情还是甄选明星员工？ #  这个问题我想除了 HR 之外，大家应该都选择前者吧。如果两者有冲突，一定是先事情做好，活下来，再考虑打造明星团队。活下来，活得更好，才是我们创业的目的。专职打造明星团队是 MBA 做的事情。\n那么我反问两句。第一，那么能够创造业绩的野狗员工为什么不能留？因为野狗员工会带坏企业氛围？那你一个管理者创始人干嘛去了？你招聘的 HR 干嘛去了？这个问题瞄准一个目标，你的企业到底是谁在影响团队。在回答之前，先好好想一想这个问题，出了野狗，到底是野狗的错，还是你的管理策略有失误。第二，兢兢业业做好本职工作的小白兔员工为什么没有业绩？难道兢兢业业不对吗？到底出了什么问题？这个问题瞄准的是，到底谁该对公司的战略和战术负责，是老板还是中层管理还是员工。同样，想一想再回答这个问题。\n讲第三个问题之前，先要搞清楚职场岗位职责分工是怎么回事？以及为什么要有岗位职责的分工？全体员工动员起来，参与管理的『阿米巴模式』到底好不好？ #  包括我身边一些朋友，哪怕他们自己身居企业高管的位置，仍然没有把『岗位』和『岗位职责』区分开来。比较有代表性的观念包括：『我们一个创业小公司，搞那么多岗位干什么？谁意识到问题、谁有能力，谁补位就好了』，以及『「排除万难做好工作」、「创造条件也要上」是一线员工应该考虑的事情』。我认为一个团队之所以为团队，不是一个团伙，很重要一点是团队更有『规矩』：分工明确，配合可靠。理想情况下，应该能够放心地把后背交给你的队友。在一个完整的团队中，一定要有清晰的分工界面，明晰每个岗位对应的职责。哪怕团队成员不多，我们可以一人多岗，也一定不能模糊岗位职责。唯有此，每个人才能清楚自己的前后左右都由谁负责，才知道一旦出了问题自己应该找谁沟通，才能放心而专注地完成自己份内的工作。也唯有此，团队整体效率才有可能等于或大于个人效率之和，发挥出协同效应。\n有句话忘了谁说过，『没有做过好员工的老板都不是好老板』。这个『好老板』我理解不是指员工说老板好，而是这个老板能带领团队产出高业绩，带大家一起吃肉，这样的老板才配叫好老板。而一个做好过基层工作的老板，一定会给员工创造一个更专注本职工作的环境。在他的团队里，员工消耗在非工作沟通、管理甚至自我管理上的精力要尽可能地少，他的员工可以心无旁骛在本职工作上专注，全情投入，团队整体的价值是大于单个员工价值相加之和的。这样的团队，才是一个员工和领导各司其职的团队，才是一个上下层配合默契的团队，才能称得上是一个高效的团队。\n其实不论什么样的团队，它比个人单打独斗更高级的地方都在于：团队合作的效率高于个人价值。一个团队，如果不关注产出成果的效率，而注重它究竟要是一个怎样的存在，这叫『买椟还珠』。所以，无论是小白兔还是野狗，只要做到让他在团队中充分发挥价值，让他对团队利大于弊，完全可以留，这不是什么一定会有冲突的事情。反之，用不好这类人，觉得不能用，辞掉就好。完全没必要上纲上线到把员工做一个分门别类来设置教科书。\n至于最近看到有些公司又开始追捧 阿米巴模式，号称自己的团队平等、自经营和自管理等等，我想问的是：你的员工真的可以全情投入到你们的事业中去吗？你为创造这种全情投入的环境，做了些什么？假如他能全情投入工作，他的职业规划在你的设计中吗？社会的发展和同行的诱惑就在那里，总不能简单归结为个人差异，然后回避吧。\n最后，小白兔和野狗就一无是处了吗？一定要除掉小白兔和野狗吗？ #  我自己带过各种团队，有自己培养的嫡系，有空降切别人的团队，有作为甲方带外包做项目，也有在被甲方指挥的外包团队里面干过…… 这么多经历总结起来就是，一个团队成员一定要具备多样性，这个团队才是完整的，才能有成长的生命力。一个团队的领导如果眼睛里揉不进沙子，对下属像处女座选媳妇儿一样追求完美二字，这个团队的效率和克服困难的能力，一定不会强。\n所以还是上面表达的观点。『有教无类』，关键看你怎么用。野狗员工为了业绩无所不用其极，他们为团队做了不好的示范，但他们也能帮你发现新的业务增长点；小白兔员工为了自己的安稳两耳不闻窗外事，做老郝先生做自己份内的工作，但他们通常也会承担别人不愿意干的脏活儿累活儿。只要不是特别抵触工作，或者处处与人为敌，每个人都可以有他的位置，就看做领导的怎么安置而已。\n PS：抢救出来的一篇文章，险些烂尾。做教训，牢记。2016.09.28 于成都\n"});index.add({'id':31,'href':'/posts/2016/09/19/%E4%BB%8E%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86-title-%E7%9C%8B%E5%85%AC%E5%8F%B8%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/','title':"从技术管理 title 看公司的技术解题思路",'section':"Posts",'content':"互联网技术线的职业发展轨迹到今天已经很清晰，大体来说两个选择，要么继续深入走技术专家路线，当个架构师、研发专家，向计算机科学家方向迈进，要么转管理路线，从小组长做起，向 CTO 迈进。\n这是正向的。反向，从一家公司技术负责人的 title，也能看出这家公司在技术方面的解题思路及现状。\n1、招聘组长 / leader / 主管的，注意留意这家公司最近招聘攻城狮的岗位 JD。 #  通常直接在 JD 里面说招聘 leader 一类 title 的非大厂企业，通常的意思是：我们需要一名高级攻城狮。至于你能不能胜任 leader，需要在工作中观察。不过不管怎么说，能把 leader 提出来单独招聘，是有意识在补充团队的中坚力量，应该给个赞。\n这一类企业，留意他们最近招聘攻城狮的 JD，一个是 JD 中的任职要求，是否有侧重点，是否描述清晰，大致可以看出这个团队遇到了什么问题。第二是看看攻城狮 JD 中的薪资范围，可以从侧面了解这家公司攻城狮的待遇水平，也可以看出公司对这个角儿的期望，是个管培生，骨干，还是个救火队长。\n2、招技术总监的，企业是希望用管理手段来修补技术问题。 #  技术总监的职责偏管理而非技术，这是大家都有共识的。公司少一个技术总监，言下之意就是公司觉得技术管理上出了点问题，需要个人来补救。再换个角度翻译就是：希望通过技术管理来提（ya）高（zha）技术团队工作效率。\n走技术总监这条线，等于就是走技术管理路线了。而且，一定是管理工作大于技术工作。\n3、招架构师 / 首席架构师 / 研发专家的，通常是需要一个救火队长，少数是准备做大~~~项目。 #  架构师 / 首席架构师 / 研发专家这几个 title 是在技术线的，现实中很多企业里面已经是到技术线顶端了。\n需要这类角色的企业，不少是需要一个能带队、独当一面的技术骨干，有不少企业在招聘的当下还面临一堆代码腐烂的系统，和一个问题重重的团队。能应聘这个职位的，跟应聘技术总监类似，入职后都要面临非常大的挑战，不同的是管理层的期望。能放出这个 title 的空缺，企业管理层是期望用技术的手段来解决现阶段面临的问题。\n4、招 CTO 的，要么是一穷二白的创业小作坊，要么是高管层对产品的把控已经一筹莫展。 #  首先明确，CTO 在一家职能完备的企业里面，是高管角色，背的业务指标的，关心的是产品技术团队为公司业务增长提供多大的助力，对一个产品能不能实现、实现得好不好，他不负直接责任只负管理责任。同时，也意味着 CTO 对公司的主要业务必须非常熟悉。\n创业小作坊招 CTO，基本上都是期望用 title 吸引住人才；而稍大一点的企业招 CTO，释放出来的信号是，高管层希望有人能通过对产品工作全权负责，来保增长促发展。\n不管怎么说，就像 Fenng 自身遭遇的事情一样，CTO 这个角儿不好做。\n另外还有一种常见的技术高管 title，叫『技术 VP』。这个基本上是活儿照干，但是不享受最后胜利果实的意思。企业招这个角儿的意思通常是：需要这么一个背业务指标的技术高管，你很合适，但又觉得你对企业带来的收益不高，比如没有一个好履历不方便放出去拉融资，所以把 CTO 的位置空缺，等遇到更合适的人，随时把你一脚踢开。\n如果不是公司大到一定份儿上，招这个角儿的公司都是在耍流氓。\n 作为一名技术出身、想要升阶的求职者，首先搞清楚自己的期望，然后选择合适的职位去求职。不管最终选择什么样的岗位，都需要做好一件事：管理好别人的期望。而一个连自己的期望都管理不好的人，肯定没有办法管理好别人的期望。\n"});index.add({'id':32,'href':'/posts/2016/08/31/%E6%97%A5%E5%B8%B8%E9%9A%8F%E8%AE%B0/','title':"日常随记",'section':"Posts",'content':"今年 #  今年还真是一个特别的年份。夏季刚来不久，天还没到最热的时候，老丈人就过世了。等入了伏，我们听了一整个夏天的救护车呜呜声。吃饭的时候，『呜呜呜呜呜』；在街上散步的时候，『呜呜呜呜呜』；坐公交车上，『呜呜呜呜呜』…… 有一次在家吃饭，救护车从楼下过了四次。重庆婆婆家楼上有老俩口和小儿子同住，结果做保安的小儿子下班回家，发现老俩口热死在家里——他们家竟然没有装空调。还有最近心脏猝死的山东大学生们。没有熬过今年的人，好像特别多。\n另外，今年的蝉也特别多，多到建行放 ATM 的小门面里，小小不足十个平方，一到晚上，容纳了不下十只蝉，到处飞肆意闹。早晨出门，街边随处可见死掉的蝉，有些还趴在汽车前挡玻璃上，裸露在晨光里。鬼知道今年哪儿来这么多蝉。\n 自己动手 #   Homebrew 是 MacOS 下不错的工具，一个包管理器，码农最爱。不过人家一直没出稳定版，最新的好像才 0.9.9。最近就遇到一个不爽的事情：php56-grpc 这个包安装不上，编译阶段报错。仔细一看，原来用的扩展版本是 0.5.1 beta，人家扩展已经到了 1.0.0 stable，难怪。\n于是干脆， 自己修改 formular 升级，并提交了 PR。爽。中间顺带还解决了 ext-grpc 的一个 bug。\n同时也深深感觉谷子哥家的东西，还真不是一般人能够触碰的。你要用，你就得懂。各种依赖，甚至于对他家私有库的依赖路径，都大大咧咧放进来。一旦遇到报错，要是没耐心跟还真不知道该怎么弄。幸运的是，这次人家就犯了一个小错误， 改起来特别简单，顺手改完提交一下。\n 开放平台 #  蚂蚁金服成了互金行业名副其实的霸主，前段时间机构找个人投资者接盘蚂蚁金服股权的爆料显然并没有阻止它的快速成长。参照阿里系其它业务的发展轨迹，料想蚂蚁金服最近两三年会有个非常漂亮的成长曲线。\n昨天才发现，蚂蚁金服在这个月（八月十日）发布了 开放平台。\n互金的开放平台还真不多见。印象中支付宝的开放平台做了一段时间之后，很快也就不能完全『开放』，半遮半掩地走着，运营上也完全没有再推。微信的开放体系中，与互金有关、涉及到支付的部分一直就没稳定过，从我亲身经历的项目来看，貌似财付通的技术限制让人捉急，不过也从来没看到微信从运营上推这部分的业务，反而是申请相关权限的时候接受审核力度很大。其它家，像什么京东、百度、腾讯开平…… 几乎都很少放开与金融相关的功能。特别是创业以来，我自己接触互金行业之后，感受到如果真放开的话，这其中的问题非常多，实际操作的时候平台侧会承担相当大的风险。因此，看到蚂蚁金服（支付宝）在如今开放平台遍地开花的时候再次推出自己家的开放平台，怎么说呢，一方面吃瓜看个热闹，另外一方面还真想看看他们会怎么去做这个事情。搞不好，金融行业真能因此进入『互联网+』的时代。\n这是个不断触碰监管者 G 点来做创新的行业。希望蚂蚁金服能在除了『流量营销』和『会员管理』之外拿出更多有意思的玩儿法。\n"});index.add({'id':33,'href':'/posts/2016/08/31/grpc-for-php/','title':"PHP 的 GRPC 扩展的安装修复",'section':"Posts",'content':"php 的 grpc 扩展在八月十八日已经到了 1.0.0 stable。很高兴的，终于到了一个 stable 版本。这意味着，在 php 中将 grpc 应用到生产环境会安心许多。一些不太稳定的特性或功能，会被排除在发布版本之外，用起来顺很多。\n可惜的是，这个 stable 版本貌似在安装环节并不稳定，安装过程中分别会在 configure 和 make 环节报如下的警告与错误。\n在 configure 环节的警告：\n... checking whether to enable grpc support... yes, shared ./configure: line 4107: cd: ../../grpc: No such file or directory ./configure: line 4138: cd: ../../grpc/src/php/ext: No such file or directory ./configure: line 4169: cd: ../../grpc/third_party/boringssl: No such file or directory checking for ld used by cc... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld ...  在 make 环节就直接报错退出：\n... In file included from /Volumes/RamDisk/grpc-1.0.0/src/core/lib/security/credentials/google_default/google_default_credentials.c:46: In file included from ./src/core/lib/security/credentials/jwt/jwt_credentials.h:38: ./src/core/lib/security/credentials/jwt/json_token.h:38:10: fatal error: 'openssl/rsa.h' file not found #include \u0026lt;openssl/rsa.h\u0026gt; ^ 1 error generated. make: *** [src/core/lib/security/credentials/google_default/google_default_credentials.lo] Error 1  修正的方法也简单。用下面的步骤安装即可：\n1. 下载，解压 #  wget https://pecl.php.net/get/grpc-1.0.0.tgz tar zxf grpc-1.0.0.tgz cd grpc-1.0.0 2. 修正 m4 文件 #  在第 8-10 行，原本是这样的，删除它们，\nPHP_ADD_INCLUDE(../../grpc/include) PHP_ADD_INCLUDE(../../grpc/src/php/ext/grpc) PHP_ADD_INCLUDE(../../grpc/third_party/boringssl/include) 然后替换成下面这一行。\nPHP_ADD_INCLUDE(third_party/boringssl/include) 缩进最好严格按照文件本身的格式来，新增的一行使用两个空格缩进。\n3. 编译、安装，配置 #  phpize ./configure --with-php-config=\u0026lt;the_path_to_your_php-config_binary\u0026gt; make make install 然后修改 php.ini，新增一行\nextension=grpc.so 4. 搞定 #   PS：第二步本来想用脚本来完成的，烦人的是 MacOS 下面的 sed 命令和 Linux 下面的用法不太一样，做兼容很麻烦，索性算了，大家手动改吧。\n 再 PS：截至 2016-08-31。我已经把这个问题已经提交了 issue，开发组也已经 assign 到具体的开发者跟进，相信不久就会发布新版解决这个问题。1.0.0 版除了安装过程有些小问题，使用上是 OK 的。\n"});index.add({'id':34,'href':'/posts/2016/08/25/%E5%86%8D%E6%AC%A1%E9%97%AE%E5%80%99%E6%96%B9%E6%A0%A1%E9%95%BF%E6%88%91%E4%BB%AC%E5%8F%97%E5%A4%9F%E4%BA%86%E5%8A%9F%E5%A4%AB%E7%BD%91/','title':"再次问候方校长：我们受够了功夫网",'section':"Posts",'content':" (UPDATED) 2017-08-17: ssserver 提供服务器端的支持；sslocal 转本地 socks5 服务；再用 privoxy 提供 http/https proxy。 经过试验，这样的解决方案是最全面的了。\n至于梯子哪家强，你问我，我不会不告诉你。O(∩_∩)O哈哈~\n 对于功夫网不问青红皂白直接予以封杀的行为，程序猿的一贯态度是问候方校长。有些的确敏感的都不说了，facebook 旗下的工具网站 Nuclide 也被封，之前还有 Python 因为一个特定版本号被封的往事…… 各种搞笑和不能理解的规则，生活在兲朝的程序猿这种生物天生比国外的低矮一截——纯粹因为生存环境的关系，导致看世界不完整。\n前两天做 grpc 的调研，为了简洁，安装 php-grpc 时准备就直接用 homebrew 搞定。brew install homebrew/php/php56-grpc，一句命令安装，升级维护也省心。\n可是安装 php-grpc 的依赖却出了问题。 protobuf 在 homebrew 中是从源码开始安装，用的是 protobuf 自带的 autogen.sh 脚本，脚本中正好从 googlemock.googlecode.com 域下载 googlemock 一个特定版本的发布包，因为 shell 默认不会走系统代理（我用 shadowsocks 科学上网，这是我的梯子，这是下面所列方法的前提。如果你连梯子都没有，可以不用往下看，没戏），会导致下载失败。\n英雄汉不能被一泡尿憋死。折腾一会儿，终于找到办法。\n后来想想，自动化脚本里面其实挺多这种应用场景的，没谁写个脚本还要兼顾其它国家特色网络，那技术宅成天别干别的事儿，光跟堂吉诃德战斗好了。因此，记一下吧，以后用得着。\n下面提供两种办法供选用。两种都简洁，改动都不大，主要看应用场景和个人的习惯吧。\n方法一：修改下载程序配置 #  protobuf 安装脚本中的下载程序使用的是 curl，因此先得配置它。新增或修改 ~/.curlrc 这个文件，加入 socks5 这个选项（因为 shadowsocks 是用的 socks5）。\n# 我用的是影梭，所以设置 socks5 选项 socks5 = 127.0.0.1:1080 # 如果用的是 http，设置 proxy 选项 proxy = 127.0.0.1:8080 如果有用到 wget 的话，需要修改 ~/.wgetrc 这个配置文件。\n# proxy 配置按照类型设置。为了避免冲突，保留你需要的那个就好 https_proxy = http://proxy.yoyodyne.com:18023/ http_proxy = http://proxy.yoyodyne.com:18023/ ftp_proxy = http://proxy.yoyodyne.com:18023/ # 确保 proxy 生效 use_proxy = on 方法二：一次性方式 #  一次性方式有个好处是，能够让设置仅仅在当前 shell 中生效，既不影响别的 shell，退出当前 shell 之后设置自动清除，自动还原的无害小精灵。\n这是 curl 的。按照实际情况修改配置，然后直接在 shell 中运行即可。\n# socks5 proxy alias curl=\u0026#39;curl --socks5=127.0.0.1:1080\u0026#39; # http proxy alias curl=\u0026#39;curl -x 127.0.0.1:8080\u0026#39; alias curl=\u0026#39;curl -x username:password@127.0.0.1:8080\u0026#39; 下面是 wget 的。wget 用 socks5 的话要麻烦一点，因为 wget 本身不支持 socks5，需要使用一个工具做基础环境的转换， tsocks。我们假设用户解决了 tsocks 的安装问题。\n# 配置 tsocks 先 #cat /dev/null \u0026gt; /etc/tsocks.conf # 清空 tsocks 配置 echo \u0026#39;server = 127.0.0.1 server_type = 5 server_port = 1080 \u0026#39; \u0026gt; /etc/tsocks.conf # socks5 proxy。根据 tsocks 的使用方式做设置。 alias wget=\u0026#39;tsocks wget\u0026#39; # https/http/ftp proxy。根据需要选择其中一种 export https_proxy = http://proxy.yoyodyne.com:18023/ export http_proxy = http://proxy.yoyodyne.com:18023/ export ftp_proxy = http://proxy.yoyodyne.com:18023/ # 显式使用 proxy alias wget=\u0026#39;wget --proxy=on\u0026#39;  PS：搞定功夫网，发现 php-grpc 会在编译环节出问题，引用 grpc 的函数报参数数量有误，应该是 grpc 版本不对。也许是我之前为了省事不想翻墙，在 homebrew 之外自己安装了别的版本的 grpc 造成的。还没来得及追。功夫网害人呐！\n"});index.add({'id':35,'href':'/posts/2016/08/22/%E4%B8%80%E7%A7%8D%E6%B2%BB%E7%96%97%E7%96%96%E8%82%BF%E7%9A%84%E8%8D%AF%E5%89%82%E4%B8%93%E5%88%A9/','title':"一种治疗疖肿的药剂专利",'section':"Posts",'content':"今天在网上看到 一个方子，是治疗疖肿（肛周脓肿）的，还申请了国家专利。按照药物专利的申请流程，会要求药理实验。专利文末也确实提供了实验数据及数据来源。效果看起来非常不错（90 个案例，81 例痊愈，9 例好转），值得推荐。PS：拿来做商业用途的别忘了给人缴纳专利费用。\n 另外，肿节风胶囊治疗疖肿效果很明显，性价比非常不错，也很推荐哦。\n"});index.add({'id':36,'href':'/posts/2016/08/10/%E4%BA%92%E8%81%94%E7%BD%91%E5%88%9B%E4%B8%9A%E6%80%8E%E4%B9%88%E5%81%9A%E4%BA%A7%E5%93%81%E6%8A%80%E6%9C%AF%E8%A7%84%E5%88%92%E4%B8%80/','title':"互联网创业怎么做产品技术规划（一）",'section':"Posts",'content':" 从鹅厂出来之后的这几年，在创业公司做了很多产品技术方面的实践工作，得到一些关于产品技术管理方面的心得，这部分比实际完成一些什么样的系统设计和开发更加宝贵，这是有钱都买不来的。后面一段时间，我尽量将这些心得以博客文章的形式写出来。 之前尝试过大而全和分章节的描述手法，在废弃了十版左右的草稿之后，决定还是用随笔的手法吧，划定一个小范围，想到哪儿写到哪儿，不拘一格。大而全格局太大，自己荒废了很长时间没写文章，把控不住；章节形式专业性太强，没做好写论文的准备，就不拿一些带主观心得的东西贻笑大方了。\n 相较于我刚开始学互联网编程的那段时间，也就是二十一世纪初的那几年，现在的互联网盈利模式更加清晰，业务和产品趋于红海竞争，值得去尝试的蓝海领域越来越少。带来的一个好处是：产品技术方面能够复用的东西越来越多。\n举个现实中的例子。因为花椒、映客等等关系，最近遇到一些朋友想要做直播平台，要我给他们建议。我大致估了一下，质量上以产品原型计，大约有百分之八十以上的组件，包括比较难的 P2P、DHT、CDN、视频实时压缩等都有成熟的第三方解决方案，只有涉及到所谓『痛点』的大约百分之十几的那部分逻辑需要自己去做。这些成熟的第三方解决方案不管是开源软件也好，还是云服务的方式也罢，都能避免创业者重复造轮子，大幅降低开发维护成本，还能提高用户体验。\n然而更厉害，就算是差异化的那百分之十几的逻辑，我们现在也可以利用工程化的手段让它们的产出更加高效更加顺畅。\n最近一年我在创业公司积极推进一件事情，就是把初级工程师的成果有效化。出发点是帮助公司降低对工程师水平的依赖，用技术手段提高工程师的工作效率，提高输出成果的有效性。这事儿说透了也很好理解：既然创业公司的项目需求更多是原型实现，并且还有那么多可靠的第三方资源可用，技术团队也就更像是在做集成，而不是技术创新，对工程师的初始能力要求不应该特别高。当然，公司肯定也会同意，因为省钱嘛。o(╯□╰)o\n创业公司对初级工程师倒不一定有什么特别的偏好，不过创业公司的 boss 们大多对技术人才无法做到『准确识人』，这是事实。有时候哪怕他们自己想找一些大牛合作，也苦于无法辨别。就算找到真正的牛人，在工作方式方法上通常也会出问题，至少是让其能量发挥不出来。所以干脆的，很多创业公司 boss 与其花冤枉钱碰运气找大牛，不如直接找初级工程师先实现原型好了。很无奈，也是事实。既然是事实，我们首先得尊重它，而不是抱怨，然后才能往后考虑，怎么样改进。\n当然，先解释下：依靠初级工程师实现的原型在技术上是不是能够拥有可扩展性，今后是不是可以生长和健壮起来，是个问题。考虑到这是架构师在开工之前需要完成的设计工作来决定的，不可能指望初级工程师去完成，所以这点不在我们今天的讨论范围之内。所以首先，假设我们有一位有能力有担当并且对项目理解深刻的架构师吧。\n话说初级工程师的工作一般都不可靠，特别在他们工作拥有自由度的时候，自由度越高则可靠性越差。要提高初级工程师的工作有效性，首先考虑的是怎么『约束』他们，降低他们可以自由发挥的空间。这个思路跟现在流行的互联网『颠覆』的观点可能会有点相冲——你把空间限定死了再做事，还谈什么互联网颠覆呢。不过我认为，就现实中的中小公司创业环境，技术上的创新总是局部的，否则研发成本太高，就是作死，运营和产品上的创新才是具有颠覆性的关键。\n通常我给初级工程师『画地为牢』限定他们工作空间的办法有下面几种。\n **必须全程参与需求评审，独立完成功能设计文档。**会议和文档化是让很多工程师头痛的两件事情，但是在任何团队中，首先要保证的大家目标一致，花点精力在统一目标上，经验告诉我们，绝对值。 **统一的代码风格和注释要求。**每种语言都有好多种代码书写风格，团队统一采用一种就好，这没什么可争辩。至于注释，最好也要统一一下要求，以便工程师可以在代码中合理添加注释。代码风格可以通过 lint 来检验，而注释则只能通过代码审核的过程，人工指正。 **代码审核后才能合并到开发分支。**一方面是代码的质量控制，确保代码仓库里面的代码都是有效代码；另外一方面，代码审核恐怕是帮助这些初级工程师成长最快的方式。一个好的 reviewer 胜过任何职业培训学校里面的任何授课老师。 **一个严厉的非黑即白的框架。**我不会浪费时间跟初级工程师在技术方案的可行性上做探讨——你当然这样做也能实现功能那样做也能实现功能，但你就是得按照我说的做。整个团队都是这样。没得商量。而保证这一点的最佳手段，就是用一个非常严厉、越雷池半步就报错的框架。 **统一的开发环境和部署环境。**同样，我也不会在这方面跟工程师们有太多商量的余地，必须统一。部署环境由于涉及到运维的配合，与用框架不同一样，从一开始就必须大家都统一。不同的是，开发环境这方面我通常会给工程师们一个过渡期，过渡期内我会推荐我认为效率最高的系统、IDE 甚至 IDE 配置文件，并且提供支持。通常来说，一到三个月的过渡期之内，就能把这事儿统一下来。 **保持一致的沟通腔调。**技术上，各种专有名词和特定的描述方式很多，沟通中大量使用专有名词虽然有时候看起来很装逼，但这样的确可以大大提高沟通效率。对初级工程师，以及我们的产品经理同学，通过在文档、会议中不断加以引导的方式，来强化他们对一些常用名词和描述方式的概念，让他们既能懂也能用，从而提高整个团队的沟通效率。  这样执行之后，做执行的工程师基本上不再可能有什么自助发挥的余地，就像谷歌技术团队的风格：一千人写的代码，读起来就好像是一个人写的。无论是代码和注释的书写风格，功能实现的方式，都是一致的。这样的代码就算放个两三年换个人来维护，也没有障碍。\n另外一方面，想要提高工程师效率通常意味着激发个人的积极性，释放他们的工作热情，同时帮助他们扫清工作之外的障碍。从字面上理解，这和上面限定他们的空间相左。说细了，不矛盾。\n **统一的开发环境、沟通腔调，降低沟通中的障碍。**在拥抱变化的场景下，沟通随时随地都在发生，如果不能把沟通过程做顺畅，尽力消除沟通中的阻碍，工作效率自然没法儿提高。初级工程师最容易遇到的问题就是遇到问题表达不清晰，想帮助他也无从下手。统一开发环境、沟通腔调，团队成员基于一个场景在沟通，效率自然就提高了。 **把开发流程中重复的步骤工具化。**例如：分情况 pull 代码；根据事件和关键词创建新分支；检测代码风格；部署代码到线上之前跑单元测试；部署代码到线上服务器；排查应用日志…… 如果每次手动做这些事情，势必影响编码的连贯性，把它们做成工具，每次运行一两条命令就可以完成一件事情，不仅可以提升工作效率，还可以提高试错的次数，小步快跑、敏捷迭代。 **研发生命周期的管理从头到尾要做好，对工程师尽量友好。**工程师只有一个工作是有效的，就是编码，其余的工作都是辅助，不能直接产出价值。所以，工程师越能专注地编码，生产效率越高。除需求评审和写文档之外的必要开销，确保工程师大部分工作能够在两到三个界面完成，是最优的结果。这就需要团队能有一套很好的研发管理系统，不是松散的几个第三方工具，而是一个有机的整体，涵盖整个研发生命周期。听起来很高大上，可喜的是，对创业公司也有第三方的选择，只不过需要自己做集成。 **生产环境要有带检索的日志系统和调试工具。**这个就不说了，也可以看做是从第二点中延伸出来的。单独提是因为，线上排错不知道坑了多少工程师的时间，熬夜加班，专门等午夜人少时重现错误，说多了都是泪。浪费的时间不是一点半点。  能帮工程师把编码之外的工作梳理清楚，减少他们被干扰的次数和时长，对于提高生产效率，规避编码中的 bug 效果很好。虽然上面几点在创业公司里面实施起来有些难度，但做总好过不做。况且，其中一部分已经有第三方成熟的解决方案，具体实施的时候只需要做集成即可。\n在是给与工程师一个明确的施为空间，帮他们扫清编码障碍之后，技术团队在执行阶段的高效率，维护阶段的清爽，都是可以预料到的。这些准备工作虽然表面看不到有什么明显收益，但是对于公司在中期对外连续作战帮助非常之大。\n附录一：推荐的几个第三方工具和服务 #   代码仓库：gitlab。同时基于 gitlab 的 web service hook，还可以扩展出涵盖大半段研发生命周期的系统，以此完成工具化的搭建。 需求管理：tower。这个纯粹是个人习惯，其实 worktile、trello、teambition 等等都不错。tower 虽然也有 api，可以做信息流集成，但貌似只限于收费的 Pro 版。 OS + IDE：Linux + vim。作为后端码农，这是不二选择。在这个前端要会用 linux 的时代，不会 linux 不能作为理由，只能是工程师自己的耻辱。前端码农根据项目不同，酌情选择更优的 IDE，例如 xcode（iOS APP）、atom（React）、Android Studio（Android APP）等。 后端开发框架：Laravel（PHP）。作为一款大量应用现代语言特性的开发框架，laravel 的缺点也是它的优点：太多的新特性，让初级工程师困在它规划好的地盘里，只能照做。  "});index.add({'id':37,'href':'/posts/2016/08/05/%E7%9C%9F%E6%AD%A3%E8%AE%A9%E4%BD%A0%E7%96%B2%E6%83%AB%E7%9A%84%E6%98%AF%E8%84%9A%E5%BA%95%E7%9A%84%E7%A0%82%E7%9F%B3/','title':"真正让你疲惫的，是脚底的砂石",'section':"Posts",'content':"很早以前听到过一个小故事，大意是说，一群人兴高采烈去登高山。爬山的过程中慢慢开始疲惫起来，这种疲惫和累不一样，是无论怎么休息都无法缓过劲来的。大家一步一捱往前挪着，一点儿没有了刚开始的高兴劲儿。后来在一处岩石边休息的时候，遇到另外一个有经验的登山人，告诉他们：脱下鞋子，抖掉鞋子里面的砂石。他们按照登山人的提示，再出发果然舒服多了，感觉整个人清爽起来，疲惫也散去很多。原来这座山留在山路上的砂石较多，很容易溅到鞋子里，溜到鞋底去。砂石小，虽然硌脚但是不太严重，总去抖鞋子砂石麻烦，一般人也就忽略了。小砂石硌脚时间长了，人就容易疲惫，爬山也不得劲。虽然都是一群爱好爬山的人，爬起山来却觉得没有什么意思似的。\n这个故事最后告诉我们：真正让人止步的，其实不是险峰，而是脚底的砂石。\n 机械键盘 #  家里有黑轴和青轴两个机械键盘，因为是刚用机械键盘的新手，爱好青轴，噼哩吧啦，感觉挺带劲。但不知道为什么，用青轴的时候思维一旦出现停顿，很容易就分神。开始也没特别注意到这个问题，直到昨天晚上换了黑轴做事。忽然感觉思维的停顿在用黑轴的过程当中，是一件挺享受的过程，键盘就像不存在一样，你需要动手指头的时候，它在那里，你需要思考的时候，它也不吵你。不像青轴，连续打字的时候它的响应很及时很带劲，中间一旦有停顿，它的这种响应就成了吵吵。\n换了黑轴之后，明显感觉写东西的效率高了很多，尽管还是感觉黑轴偏硬，而且国产黑轴有粘滞感。\n看似差不多的键轴，区别大了。\n 饮水机 #  公司只有一台饮水机，坏了还没修，没热水，就先买了电烧水壶顶着。发现这两天时间里，喝水少了好多。\n电水壶的水烧开不用很快就凉，泡茶不能用凉水，每次续水之前都烧一次又嫌麻烦。之前是口渴就喝，喝完直接从饮水机续水。现在是口渴了喝，喝完烧水，烧完水之后有大约一半的概率会忘掉，电水壶的水接着又凉掉，等到又要喝水时发现，现烧已经来不及。\n常坐着的职业，喝水少了容易得肾结石，明明懂的道理、已经养成的习惯，却因为小小的饮水机坏掉而丢掉。\n今天带了家里的保温壶来，电水壶烧开水之后灌壶里待用。感觉世界又和平了。\n 有时候我们想尽量想避免这些烦人的情况，像登山人抖掉鞋底的砂石。费神费力不说，如果团队的搭档没有意识到砂石的威力，他们总会觉得多此一举，不理解你的行为，谈不上支持甚至会阻挠你。这种不理解和阻挠也是一种砂石，时间长了，不找到办法沟通协调，也会让你望险峰而止步。\n"});index.add({'id':38,'href':'/posts/2016/07/17/%E8%87%B4%E4%B8%80%E4%BD%8D%E9%80%9D%E5%8E%BB%E7%9A%84%E5%90%8C%E4%BA%8B/','title':"致一位逝去的同事",'section':"Posts",'content':"刚在写点东西，整理关于创业这一年的收获和感悟。朋友圈里面忽然看到龙哥转发的消息 《“在大陆互联网走得最远的台湾人”——胡同台妹去世》。\n讲真的，很惊讶。胡同台妹的称谓我是离职后很久才从网上知道，『哦，原来胡同台妹就是宫铃啊！』倒是她的本名我更熟悉一些。但也就是熟悉名字而已。\n零八年那会儿，我在凤凰网供职，农科院信息楼，工位在四楼格子间，封闭开发时经常占据二楼会议室。二楼的办公位因为不是凤凰网租用的，我们只在二楼有两间会议室和一间小小的编辑办公室。得因于此，二楼阳台是开放状态，直接与楼道连通，会议室和编辑办公室都直接与楼道相连。记得那会儿经常有抽烟的同事会在二楼的阳台上认识、聊天。\n经常看到宫铃女士也是在那种场合。我不抽烟，也闻不得烟味，就是进出会议室和楼道之间的时候经常碰到。他们那会儿好像经常因为选题开会，当然也是在二楼的会议室。开会久了，有烟瘾的同事就会三三两两出去阳台透气、抽烟，宫铃女士经常出现在他们之间。我印象中她是更喜欢独自一人去阳台的，很少招呼别人陪她去抽烟。若是在阳台上碰到同事也会交流两句，说的多是工作。除却工作的交流很少。有一次，她跟我们做技术的同事在阳台闲聊，讲些家长里短被我看到，那是我印象中绝无仅有的一次。\n我在凤凰网供职期间，跟宫铃女士可能总共说过不超过十句话。听别的同事说起，才知道这位『小个子，很礼貌很有修养，说话做事干练，有点时髦（指抽烟）』的女士是在帝都的台湾人，而且是在两岸话题上有些知名度的媒体人。严格说那时我算初入职场，对处在这样高度的同事，自然是敬佩有加。这种敬佩之情在我得到她『胡同台妹』的网名后更加一筹。\n认识宫铃女士那会儿，马英九还没当选。今天她离开，蔡英文已经完成就职演说快两个月。整八年有余。\n祝愿一路走好！天堂里面自有祥和。\n"});index.add({'id':39,'href':'/posts/2016/05/14/Windows7-%E8%BF%90%E8%A1%8C-VirtualBox-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E4%B8%80%E5%88%99%E9%94%99%E8%AF%AF/','title':"Windows7 运行 VirtualBox 虚拟机的一则错误",'section':"Posts",'content':"前段时间重装系统 Windows7 之后，在其上安装 VirtualBox 却总是无法启动虚拟机。最初是根据经验对 VirtualBox 版本进行降级，但是没有效果。后来问谷子哥问到了答案，修复之。\n因为网上的各种答案均需要重启进安全系统或者 PE 系统，还需要自行搜原版的系统文件覆盖系统中现有的，一个不小心用了不恰当版本的文件替换，导致无法进入系统才是杯具。大家都知道 windows 各种 SP 众多，各 SP 之间的文件不一定是通用的，这个问题还是需要小心的。\n而我的办法很简单，一句命令，一次重启，搞定（前提，你的系统没有被『优化 C 盘空间』，否则你还是折腾替换文件去吧）。\n先说错误的提示。关键是下面这一句\n Unable to load R3 Module\n 原因是：某些 Windows 的改良版本为了解决 Win7 第三方主题装不上的问题，把 uxtheme.dll 进行了『破解』，这种破解导致 VirtualBox 调用 WinAPI 失败。\n解决思路：将 uxtheme.dll 恢复成原版的即可。网上的思路是利用重启到安全模式或者 PE 系统中进行文件替换，我的办法是用 windows 自身的 system file scan 工具来完成（只需正常重启一次）。\n解决办法：\n 1、打开『命令提示符』，执行下面的命令： 2、sfc /scanfile=%systemroot%\\system32\\uxtheme.dll 3、正常重启，启动虚拟机，搞定。\n 当然，第三方主题应该是用不了。这个得失你得自己权衡。按说能玩儿虚拟机的主，对个把不产生生产力的主题，应该是可以放弃的。哈哈~~~\n"});index.add({'id':40,'href':'/posts/2016/04/11/%E4%B8%80%E5%88%99%E7%A7%91%E5%AD%A6%E9%B8%A1%E6%B1%A4/','title':"一则科学鸡汤",'section':"Posts",'content':"前段时间在朋友圈里面看到一篇文章，确切说是一篇鸡汤文，他介绍了『 最速曲线』的概念。\n最速曲线也叫『 最速降线』是用来描述物体怎样最快从一个高位点运动到低位点的。在最速曲线上的物体，其运动有一些特殊的特点，这些特点也给我们很大的启发。\n 生活中的事情，直线前进往往都不是最快的。太理想化。 从表象看，沿着最速曲线前进的过程，是一个不断调整目标的过程。 冷启动的时候要注意势能转化，顺大势而动，会省很多力。 但在冷启动的时候，太急于将势能转化为动能，反而会欲速不达。 无论从最速曲线上哪一个点启动，运动轨迹都是重合的（最省力的路径都是一定的）； 无论从曲线上哪一点出发，达到终点的时间都是一样的。但后出发的一方势能要更大才行。  下面是原文\n   送给大家，共勉之。\n"});index.add({'id':41,'href':'/posts/2016/03/26/%E8%A7%A3%E5%86%B3%E4%BA%86%E4%B8%80%E4%B8%AA-curl-%E5%BA%93%E5%AF%BC%E8%87%B4%E7%9A%84-https-%E8%AE%BF%E9%97%AE%E9%94%99%E8%AF%AF/','title':"解决了一个 curl 库导致的 https 访问错误",'section':"Posts",'content':"使用 EasyWeChat 库调用微信服务的时候，在 laravel tinker 里面调试，发现每次进入 tinker 之后，第一次调用接口没有问题，第二次之后，就会报一个很诡异的错误。\n$app = app(\u0026#39;wechat\u0026#39;); // EasyWeChat\\Foundation\\Application {#628}  $users = $app-\u0026gt;user-\u0026gt;lists(); // EasyWeChat\\Support\\Collection {#756}  $user = $app-\u0026gt;user-\u0026gt;get(\u0026#39;o7qrUviv1tkcDFMJ5wdXrpng9NNQ\u0026#39;); // GuzzleHttp\\Exception\\ConnectException with message \u0026#39;cURL error 35: A PKCS #11 module returned CKR_DEVICE_ERROR, indicating that a problem has occurred with the token or slot. (see http://curl.haxx.se/libcurl/c/libcurl-errors.html)\u0026#39; PKCS #11 返回的错误，好高端啊。\n中间的曲折就不说了。答案在一篇歪果仁的博客上找到，在 github 的评论上得到印证及解决问题的思路。\n  NSS error -8023 using AWS SDK for PHP  Consecutive API calls return curl error code 35 on CentOS 6.5 - github  很明显的，两篇在遇到跟我相同问题的同时，都提到了一个关键词 NSS，因此，我又看了一下我自己的 curl 库信息。\ncurl -V // curl 7.48.0 (x86_64-pc-linux-gnu) libcurl/7.29.0 NSS/3.19.1 Basic ECC zlib/1.2.7 libidn/1.28 libssh2/1.4.3 // Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp scp sftp smtp smtps telnet tftp // Features: AsynchDNS IDN IPv6 Largefile NTLM NTLM_WB SSL libz 果然我本地的 curl 是带 NSS 的。\n于是，用一个不带 NSS 的 curl 库来重新编译 php 吧。\nmkdir -p /data/soft # 编译并安装不带 nss 的 curl cd /data/soft wget \u0026#34;https://curl.haxx.se/download/curl-7.48.0.tar.bz2\u0026#34; tar zxf curl-7.48.0.tar.bz2 cd curl-7.48.0 ./configure --prefix=/usr --without-nss make \u0026amp;\u0026amp; make install # 重新编译 php cd /data/soft wget -O \u0026#34;php-5.6.19.tar.bz2\u0026#34; \u0026#34;http://cn2.php.net/get/php-5.6.19.tar.bz2/from/this/mirror\u0026#34; tar jxf php-5.6.19.tar.bz2 cd php-5.6.19 \u0026#39;./configure\u0026#39; \\  \u0026#39;--prefix=/usr/local/php-5.6.19\u0026#39; \\  \u0026#39;--with-libdir=lib64\u0026#39; \\  \u0026#39;--with-config-file-path=/usr/local/php-5.6.19/lib\u0026#39; \\  \u0026#39;--with-fpm-user=nobody\u0026#39; \\  \u0026#39;--with-fpm-group=nobody\u0026#39; \\  \u0026#39;--with-libxml-dir=/usr\u0026#39; \\  \u0026#39;--with-openssl=/usr\u0026#39; \\  \u0026#39;--with-openssl-dir=/usr\u0026#39; \\  \u0026#39;--with-zlib\u0026#39; \\  \u0026#39;--enable-bcmath\u0026#39; \\  \u0026#39;--with-bz2=/usr\u0026#39; \\  \u0026#39;--enable-calendar\u0026#39; \\  \u0026#39;--with-curl=/usr\u0026#39; \\  \u0026#39;--enable-dba\u0026#39; \\  \u0026#39;--with-gdbm=/usr\u0026#39; \\  \u0026#39;--enable-exif\u0026#39; \\  \u0026#39;--enable-ftp\u0026#39; \\  \u0026#39;--with-gd\u0026#39; \\  \u0026#39;--with-vpx-dir=/usr\u0026#39; \\  \u0026#39;--with-jpeg-dir=/usr\u0026#39; \\  \u0026#39;--with-png-dir=/usr\u0026#39; \\  \u0026#39;--with-xpm-dir=/usr\u0026#39; \\  \u0026#39;--with-zlib-dir=/usr\u0026#39; \\  \u0026#39;--with-freetype-dir=/usr\u0026#39; \\  \u0026#39;--with-gettext=/usr\u0026#39; \\  \u0026#39;--with-gmp=/usr\u0026#39; \\  \u0026#39;--with-mhash=/usr\u0026#39; \\  \u0026#39;--enable-intl\u0026#39; \\  \u0026#39;--enable-mbstring\u0026#39; \\  \u0026#39;--with-mcrypt=/usr\u0026#39; \\  \u0026#39;--with-mysql=/usr/local/mysql\u0026#39; \\  \u0026#39;--with-mysql-sock=/tmp/mysql.sock\u0026#39; \\  \u0026#39;--with-mysqli=/usr/local/mysql/bin/mysql_config\u0026#39; \\  \u0026#39;--enable-embedded-mysqli\u0026#39; \\  \u0026#39;--enable-pcntl\u0026#39; \\  \u0026#39;--enable-opcache\u0026#39; \\  \u0026#39;--with-pdo-mysql\u0026#39; \\  \u0026#39;--with-libedit=/usr\u0026#39; \\  \u0026#39;--with-readline=/usr\u0026#39; \\  \u0026#39;--enable-soap\u0026#39; \\  \u0026#39;--enable-mysqlnd\u0026#39; \\  \u0026#39;--enable-sockets\u0026#39; \\  \u0026#39;--enable-sysvmsg\u0026#39; \\  \u0026#39;--enable-sysvsem\u0026#39; \\  \u0026#39;--enable-sysvshm\u0026#39; \\  \u0026#39;--with-tidy=/usr\u0026#39; \\  \u0026#39;--enable-wddx\u0026#39; \\  \u0026#39;--with-xsl=/usr\u0026#39; \\  \u0026#39;--enable-fpm\u0026#39; make \u0026amp;\u0026amp; make install # 重新启动由 supervisor 管理的 php-fpm（非必须） supervisorctl restart php-fpm 检查 curl 的信息。\ncurl -V // curl 7.48.0 (x86_64-pc-linux-gnu) libcurl/7.48.0 OpenSSL/1.0.1e zlib/1.2.7 // Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp // Features: IPv6 Largefile NTLM NTLM_WB SSL libz UnixSockets 欧耶！NSS 不见了！\n再进 tinker 试试代码能否正常。\n$app = app(\u0026#39;wechat\u0026#39;); // EasyWeChat\\Foundation\\Application {#628}  $users = $app-\u0026gt;user-\u0026gt;lists(); // EasyWeChat\\Support\\Collection {#741}  $user = $app-\u0026gt;user-\u0026gt;get(\u0026#39;o7qrUvryjgQlQti0Cw1XeVw2PJKk\u0026#39;); // EasyWeChat\\Support\\Collection {#722}  // 世界终于和平了！  PS：一些心得\n 原来 CURL 之前一直有这个问题，见 这则 stackoverflow 上面的答复； 一个基础库的小问题，会因为依赖树的关系，被无限放大； AWS 在其它国家的普及程度还是相当高的啊。  "});index.add({'id':42,'href':'/posts/2016/03/21/%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%9C%80%E5%AE%B3%E6%80%95%E7%9A%84%E6%98%AF%E5%8A%A8%E6%80%81%E9%9C%80%E6%B1%82/','title':"工程师最害怕的是:动态需求",'section':"Posts",'content':"最近和朋友聊天，发现大家普遍遇到比较多下面一些情况。\n 『这个功能不是已经实现「差不多」了吗，再加个功能很快吧』； 『以前做过「类似的」功能，这次项目可以复用以前的模块咯』； 『怎么要这么长时间，这个功能以前不是做过的吗』； 『都快 deadline 了还没做完啊。再加个人，一定要按时发布』； 『我们团队已经这么多人了，怎么还完不成这么简单的功能』； ……  遇到上述情况之一，不仅管理者无奈，作为工程师其实也很无奈的。有些事情真的不容易解释清楚，比如：动态需求和动态需求管理。\n如果定义我们看到的产品需求是静态需求，那么从一个静态需求向另外一个静态需求迁移的过程，就会产生对应的动态需求。过去工程师们一般会将这种需求称为需求变更，不过这种说法容易导致产品经理的抵触，因为一个产品实际中总是充满各种变化的，不能很好执行需求变更的技术团队不是好的技术团队。为了避免这种误解，我们称呼其为动态需求更好一些。\n解释一下为什么通常动态需求会让工程师抓狂，这事儿就好理解了。\n一般来讲，完整的项目需求给到工程师，架构师会首先根据项目的需求进行系统架构设计，一方面尽量实现项目的需求，以满足各相关方的利益表达，另外一方面还需要结合项目的发展规划、团队实际情况、现有技术架构等情况，尽可能多地实现非功能性的目标，包括可维护、可扩展、安全性、稳定性、易用性、质量控制、灾备方案，甚至团队构成、成本核算。有句话叫『没有最好的解决方案，只有最适合的』。针对每个具体的场景和需求，一定会有一个相对合适的方案，而这个方案也就是具体到这个场景和需求的，如果简单地把方案挪用到其它场合，就配不上『最优』这个形容词了。\n所以，当一个适合某场景的方案产出了成果，我们要直接复用它，拿它为另外一个场景服务，这就是一次从『最优』到『次优』甚至『不优』的迁移。也许这两个场景中一些需求是存在一定程度的重复，因为各个因素的关联性，为了保证迁移之后的方案能相对『较优』，一定是需要额外付出劳动的，而且往往，这种付出对应的工作量还不小，很多迁移本身就是一次大工程。\n这也解释了为什么很多工程师往往愿意选择自己重新造轮子，也不愿意使用别人的代码，因为使用别人的代码需要读代码、抠细节、做迁移，当然也包括承担和消化前人遗留下来的谬误。\n对于很多创业公司来说，忽视动态需求的危害已经到了能够影响公司自身发展的地步，却很少有人能意识到。最近几年大家对非功能性需求普遍比较重视，因为有人通过技术债的概念将它抽象出来。可惜需求到需求的迁移产生的代价，还在水面之下，不为众人所见。\n 后面有时间再讲关于如何处理动态需求带来的问题，以及动态需求的管理。\n"});index.add({'id':43,'href':'/posts/2016/03/04/redis-supervisor-%E6%97%B6%E8%8B%A6%E5%A4%A7%E4%BB%87%E6%B7%B1%E7%9A%84%E9%97%AE%E9%A2%98/','title':"redis + supervisor 时苦大仇深的问题",'section':"Posts",'content':"在我记忆中，CentOS 从很早开始，就没有和各种的问题挂钩过。得益于它保守的升级策略，它自己几乎从来不是问题专业户，我对它的印象更多是因为太过保守导致的库升级不及时问题。\n可是最近，CentOS7 某个版本发行之后，偶尔的，会出现 supervisor 拉 redis 失败的问题。从日志的内容来看，全是 Permission denied 相关的问题，bind socket 的时候权限不够，write log 的时候权限不够，dump snapshot 的时候权限不够，只要跟写磁盘相关的，都有这个问题。\n单独执行 /usr/bin/redis-server /etc/redis.conf，又一点儿问题没有，命令本身没有问题，一切正常。\n关键，supervisor 是以 root 去拉 redis 的啊！表示很无辜 (o´・ェ・｀o)\nsupervisor 的配置如下：\n[program:redis] command = /usr/bin/redis-server /etc/redis.conf ;process_name=%(program_name)s ; process_name expr (default %(program_name)s) numprocs=1 ; number of processes copies to start (def 1) directory=/data ; directory to cwd to before exec (def no cwd) ;umask=022 ; umask for process (default None) ;priority=999 ; the relative start priority (default 999) autostart=true ; start at supervisord start (default: true) autorestart=true ; whether/when to restart (default: unexpected) startsecs=1 ; number of secs prog must stay running (def. 1) startretries=30 ; max # of serial start failures (default 3) exitcodes=0,2 ; 'expected' exit codes for process (default 0,2) stopsignal=QUIT ; signal used to kill process (default TERM) ;stopwaitsecs=10 ; max num secs to wait b4 SIGKILL (default 10) ;stopasgroup=false ; send stop signal to the UNIX process group (default false) ;killasgroup=false ; SIGKILL the UNIX process group (def false) user=root ; setuid to this UNIX account to run the program ;redirect_stderr=true ; redirect proc stderr to stdout (default false) stdout_logfile=/data/log/supervisor/redis.stdout.log ; stdout log path, NONE for none; default AUTO stdout_logfile_maxbytes=1MB ; max # logfile bytes b4 rotation (default 50MB) stdout_logfile_backups=10 ; # of stdout logfile backups (default 10) stdout_capture_maxbytes=1MB ; number of bytes in 'capturemode' (default 0) stdout_events_enabled=false ; emit events on stdout writes (default false) stderr_logfile=/data/log/supervisor/redis.stderr.log ; stderr log path, NONE for none; default AUTO stderr_logfile_maxbytes=1MB ; max # logfile bytes b4 rotation (default 50MB) stderr_logfile_backups=10 ; # of stderr logfile backups (default 10) stderr_capture_maxbytes=1MB ; number of bytes in 'capturemode' (default 0) stderr_events_enabled=false ; emit events on stderr writes (default false) ;environment=A=1,B=2 ; process environment additions (def no adds) ;serverurl=AUTO ; override serverurl computation (childutils) redis 的配置中，相关的配置选项如下：\ndaemonize no # 实际上，在出现问题的服务器上，pid 貌似一直没有落地成功，但所幸 redis 没有报错 pidfile /data/log/redis/redis.pid port 6379 tcp-backlog 128 bind 127.0.0.1 # 只要开启 socket 监听就一定报错。临时解决办法：不使用 socket 方式监听 unixsocket /dev/shm/redis.sock unixsocketperm 777 timeout 0 tcp-keepalive 0 loglevel notice # 只要开启 log 就一定报错。临时解决办法：日志路径改成黑洞 /dev/null logfile /data/log/redis/redis.log databases 16 save 900 1 save 300 10 save 60 10000 stop-writes-on-bgsave-error yes rdbcompression yes rdbchecksum yes # 出现问题时，dump 文件也没有落地成功，不过不影响 redis 继续执行 dbfilename dump.rdb dir /data/log/redis/ 因为 redis 的报错是通过 redis.stdout.log 来暴露，我们只用关注这个日志文件就可以了。下面我截几段。\n10640:M 01 Mar 18:04:10.932 # You requested maxclients of 10000 requiring at least 10032 max file descriptors. 10640:M 01 Mar 18:04:10.932 # Redis can't set maximum open files to 10032 because of OS error: Operation not permitted. 10640:M 01 Mar 18:04:10.932 # Current maximum open files is 4096. maxclients has been reduced to 4064 to compensate for low ulimit. If you need higher maxclients increase 'ulimit -n'. 10640:M 01 Mar 18:04:10.932 # Opening Unix socket: bind: Permission denied 10641:M 01 Mar 18:04:41.022 # You requested maxclients of 10000 requiring at least 10032 max file descriptors. 10641:M 01 Mar 18:04:41.023 # Redis can't set maximum open files to 10032 because of OS error: Operation not permitted. 10641:M 01 Mar 18:04:41.023 # Current maximum open files is 4096. maxclients has been reduced to 4064 to compensate for low ulimit. If you need higher maxclients increase 'ulimit -n'. 10641:M 01 Mar 18:04:41.023 # Opening Unix socket: bind: Permission denied _._ _.-``__ ''-._ _.-`` `. `_. ''-._ Redis 3.0.7 (00000000/0) 64 bit .-`` .-```. ```\\/ _.,_ ''-._ ( ' , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|'` _.-'| Port: 6379 | `-._ `._ / _.-' | PID: 12967 `-._ `-._ `-./ _.-' _.-' |`-._`-._ `-.__.-' _.-'_.-'| | `-._`-._ _.-'_.-' | http://redis.io `-._ `-._`-.__.-'_.-' _.-' |`-._`-._ `-.__.-' _.-'_.-'| | `-._`-._ _.-'_.-' | `-._ `-._`-.__.-'_.-' _.-' `-._ `-.__.-' _.-' `-._ _.-' `-.__.-' 11560:M 01 Mar 23:55:35.650 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128. 11560:M 01 Mar 23:55:35.650 # Server started, Redis version 3.0.7 11560:M 01 Mar 23:55:35.650 # Fatal error loading the DB: Permission denied. Exiting. 11580:M 01 Mar 23:55:44.691 # You requested maxclients of 10000 requiring at least 10032 max file descriptors. 11580:M 01 Mar 23:55:44.691 # Redis can't set maximum open files to 10032 because of OS error: Operation not permitted. 11580:M 01 Mar 23:55:44.692 # Current maximum open files is 4096. maxclients has been reduced to 4064 to compensate for low ulimit. If you need higher maxclients increase 'ulimit -n'. 11580:M 01 Mar 23:55:44.692 # Opening Unix socket (/dev/shm/redis.sock) and uid/gid (0/0): bind: Permission denied 3321:M 04 Mar 10:49:40.192 # You requested maxclients of 10000 requiring at least 10032 max file descriptors. 3321:M 04 Mar 10:49:40.192 # Redis can't set maximum open files to 10032 because of OS error: Operation not permitted. 3321:M 04 Mar 10:49:40.192 # Current maximum open files is 4096. maxclients has been reduced to 4064 to compensate for low ulimit. If you need higher maxclients increase 'ulimit -n'. 3321:M 04 Mar 10:49:40.193 # Opening Unix socket (/dev/shm/redis.sock) and uid/gid (0/0): bind: Permission denied. | uid: 0 | gid: 0 | sock family: 1 | sock path: /dev/shm/redis.sock | eno: 101 3322:M 04 Mar 10:50:10.264 # You requested maxclients of 10000 requiring at least 10032 max file descriptors. 3322:M 04 Mar 10:50:10.264 # Redis can't set maximum open files to 10032 because of OS error: Operation not permitted. 3322:M 04 Mar 10:50:10.264 # Current maximum open files is 4096. maxclients has been reduced to 4064 to compensate for low ulimit. If you need higher maxclients increase 'ulimit -n'. 3322:M 04 Mar 10:50:10.264 # Opening Unix socket (/dev/shm/redis.sock) and uid/gid (0/0): bind: Permission denied. | uid: 0 | gid: 0 | sock family: 1 | sock path: /dev/shm/redis.sock | eno: 101 第二段日志中，socket 具体的路径和 uid/gid 是我修改源码之后打印出来的，用来证实 supervisor 确实是在指定的位置拉起 redis socket，并且确实使用的是指定的用户（root）身份。\n实际上，无论是用 getuid 还是 geteuid 都是一样的结果，确定 redis 的用户 ID 是 root（uid == 0）。\n因为不是每台电脑都能重现这个问题，而且有时候重做系统，两台服务器同时重做，一台 OK ，另外一台能重现此问题。只要重现一次，就能反复重现，100% 概率。\n此外还有一点需要注意的是，第二段和第三段都提示说需要用 ulimit -n 重新设置 file descriptors limit，可实际情况是，/etc/profile 里面已经设置了该值到 102400，而且肯定是已经生效的。\nulimit -n # 1024000  supervisord 是 root 身份启动的，而且的确是以 root 身份拉 redis； redis 本身没有问题，shell 里面启动是 OK 的； supervisord + redis 就会在磁盘落地时报权限问题； redis 报错时，似乎还取到不合实际情况的系统变量； 并不是每个 CentOS7 环境都报错，但报错的都是 CentOS7。服务器的差异点还没找到，有时候两台同时重做的服务器，一台不行一台行；  直到现在还没找到问题根源以及解决办法。\n大写的囧……\n (UPDATED) 2017-08-17: 还没找到原因。不过相信大概率和 supervisor 的配置有关。 supervisor 拉起来的进程，系统环境不再是 euid 对应的环境，这点已经确认。 至于这样的变化是怎样导致 redis 的 socket 无法读写的，确实就不知道了。\n "});index.add({'id':44,'href':'/posts/2015/12/19/%E5%8A%A0%E9%80%9F-Laravel-%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%8A%9E%E6%B3%95/','title':"加速 Laravel 新建项目的办法",'section':"Posts",'content':" 2017-08-17 更新：因为服务器到期，下述方法已经失效。加速的方法 请参照这里的方法设置 composer 镜像源，并使用下面的方式创建项目。\ncomposer create-project --prefer-dist laravel/laravel [project_name]\n这样创建项目时，将使用镜像源下载框架，而不会从墙外的 cabinet.laravel.com 下载。\n 前段时间有个项目用到了 laravel 框架。laravel 本身是个很优秀的框架，OOP 的思想贯穿始终，大量使用已经开源的第三方类库，用反向控制（IoC）的思想对服务进行抽象和隔离，帮助程序员完成对服务的分治，大大提高了架构效率和开发效率、后期维护效率。\nlaravel 目前最新的稳定版是 laravel 5.1。因为我是从 5.1 开始使用 laravel 的，对 5.0 及 4.x 版本并不熟悉。但从网上大家的反馈来看，laravel 4.x 的使用方法和 5.x 相差较多，甚至 5.0 和 5.1 在细节处也有很多大的改进。我这里针对的主要是使用 laravel 5.1 的朋友，下面如果未明确提及版本，也默认指代 laravel ^5.1。\nlaravel 中新建项目的方法如下：\nlaravel new [project_name] 但是这个命令很慢，原因在于每次执行这个命令，laravel installer 都会从 http://cabinet.laravel.com/latest.zip 下载最新的稳定版 laravel 空项目代码，用以创新新项目。\n# ~/.composer/vendor/laravel/installer/src/NewCommand.php (Line.97)  // ......  /** * Download the temporary Zip to the given file. * * @param string $zipFile * @return $this */ protected function download($zipFile) { $response = (new Client)-\u0026gt;get(\u0026#39;http://cabinet.laravel.com/latest.zip\u0026#39;); file_put_contents($zipFile, $response-\u0026gt;getBody()); return $this; } // ....... 恰好因为『你懂的』原因，我们访问 cabinet.laravel.com 这个站点的时候会比较慢，由此造成了新建项目的时候很慢。\n我们自己做了一个 mirror 来解决这个问题。\n修改 /etc/hosts（*nux / Mac OSX）或 %SYSTEMROOT%\\System32\\drivers\\etc\\hosts（Windows） 文件，新增下面一行：\n123.59.41.89 cabinet.laravel.com 这样新建项目的时候，就可以直接从我们的 mirror 上拉取最新的 laravel 发布版，很快完成新项目创建。\n"});index.add({'id':45,'href':'/posts/2015/12/09/%E6%8E%A8%E8%8D%90%E6%96%87%E7%AB%A0%E8%A7%A3%E8%AF%BBCardinality-Estimation%E7%AE%97%E6%B3%95/','title':"推荐文章《解读Cardinality Estimation算法》",'section':"Posts",'content':"推荐一篇文章 《解读Cardinality Estimation算法》。\n文章讲得很酷，还附带了一个电商数据统计的实际应用案例。\n鉴于文章写得太好，明显是博主原创，所以我就不转载了，大家直接光顾原处看吧。下面是系列文章的目录：\n  解读Cardinality Estimation算法（第一部分：基础概念）  解读Cardinality Estimation算法（第二部分：Linear Counting）  解读Cardinality Estimation算法（第三部分：LogLog Counting）  解读Cardinality Estimation算法（第四部分：HyperLogLog Counting 和 Adaptive Counting）  另外，作者还有一篇 《网站统计中的数据收集原理及实现》的科普文章，同样不错，有想了解数据统计基础原理的同学也可以看看。\n"});index.add({'id':46,'href':'/posts/2015/12/05/%E5%8F%91%E7%8E%B0-Gitlab-%E7%9A%84%E4%B8%80%E4%B8%AA%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/','title':"发现 Gitlab 的一个权限问题",'section':"Posts",'content':"用了好几年的 gitlab，前前后后搭建了好几次系统，解决了不少问题，还是非常熟悉了。昨天又遇到 gitlab 搭建中的一个新的问题。\n现象 #  gitlab 搭建好之后，建账号，加 ssh key，建项目，本地 push，然后就遇到 gitlab 问我要密码。\n git@some.domain.name password:\n 项目是我创建的，ssh key 也有添加，还找我要密码，明显不科学。\n尝试解决 #  首先，检查了服务器的 sshd 设定，确认启用了 ssh 登录。\ncat /etc/ssh/sshd_config | grep PubkeyAuthentication  PubkeyAuthentication yes\n 以为是缓存，分别重启了 redis 和 gitlab。（PS：我的 redis 用 supervisor 管理起来的）\nsupervisorctl restart redis service gitlab restart 然后等了五分钟再试（其实没有必要），还是不行。\n上网查，stackoverflow 上有一个非推荐答案说，重启服务器之后就好了。于是，又重启了服务器。\nshutdown -r now 还是不行……\n用 ssh -T 命令测试一下，看看结果。\nssh -vvvT git@some.domain.name …… 一串无关的日志我就省略了，只说重点。\n …… debug3: send_pubkey_test debug2: we sent a publickey packet, wait for reply debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,password debug2: we did not send a packet, disable method debug3: authmethod_lookup password debug3: remaining preferred: ,password debug3: authmethod_is_enabled password debug1: Next authentication method: password git@some.domain.name\u0026rsquo;s password:\n 请注意省略号下面第四行，以 debug2 打头的那行。一次正确的、以 ssh publickey 方式登录的行为，应该是下面这样的：\n …… debug3: send_pubkey_test debug2: we sent a publickey packet, wait for reply debug1: Server accepts key: pkalg ssh-rsa blen 279 debug2: input_userauth_pk_ok: fp 14:8a:99:ec:b4:XX:XX:XX:XX:XX:67:1d:31:bb:fe debug3: sign_and_send_pubkey: RSA 14:8a:99:ec:b4:XX:XX:XX:XX:XX:67:1d:31:bb:fe debug1: key_parse_private2: missing begin marker debug1: read PEM private key done: type RSA debug1: Authentication succeeded (publickey). Authenticated to some.domain.name ([XXX.XX.XX.69]:XXXX).\n 很明显，还是 ssh publickey 方式过程中出了问题。\n那就上服务器看看吧，到底能有什么问题。\n找到问题 #  登录服务器，tail /var/log/secure 查看 ssh 的登录情况，果然发现一些情况。\n Dec 5 15:41:54 dev sshd[9417]: Authentication refused: bad ownership or modes for directory /home/git\n /home/git 目录是按照 manually installation 里面 step by step 安装生成的，所有里面的内容都是原装，不可能出现意外啊。/home/git 也很委屈——『怪我咯』。\nls -la /home/git  total 84 drwxrwx\u0026mdash; 13 git git 4096 Dec 5 16:03 . drwxr-xr-x. 3 root root 4096 Nov 28 23:38 .. -rw\u0026mdash;\u0026mdash;- 1 git git 2239 Dec 5 15:57 .bash_history -rw-r\u0026ndash;r\u0026ndash; 1 git git 18 Mar 6 2015 .bash_logout -rw-r\u0026ndash;r\u0026ndash; 1 git git 193 Mar 6 2015 .bash_profile -rw-r\u0026ndash;r\u0026ndash; 1 git git 537 Nov 29 13:03 .bashrc drwxrwxr-x 2 git git 4096 Nov 29 09:35 bin drwxrwxr-x 2 git git 4096 Nov 29 01:01 .bundle drwxrwxr-x 3 git git 4096 Nov 28 23:38 .cache drwxrwxr-x 3 git git 4096 Nov 28 23:38 .config -rw-r\u0026ndash;r\u0026ndash; 1 git git 25 Nov 29 00:34 .gitconfig drwxrwxr-x 20 git git 4096 Nov 29 09:44 gitlab drwxrwxr-x 8 git git 4096 Dec 5 16:34 gitlab-shell drwxrwxr-x 5 git git 4096 Nov 29 09:48 gitlab-workhorse -rw\u0026mdash;\u0026mdash;- 1 git git 13 Nov 29 09:53 .mysql_history drwxr-xr-x 8 git git 4096 Nov 29 09:39 n drwxrw\u0026mdash;- 3 git git 4096 Nov 28 23:38 .pki drwxrwx\u0026mdash; 12 git git 4096 Nov 30 19:49 repositories drwx\u0026mdash;\u0026mdash; 2 git git 4096 Dec 5 16:13 .ssh -rw\u0026mdash;\u0026mdash;- 1 git git 4938 Dec 5 16:03 .viminfo\n /home/git 目录是 0770，不是应该是 0700 吗？\n解决办法 #  想一想，gitlab 和它附属的组件都是以 git 用户的身份启动的吧，git 用户组除了 git 用户之外，没有别的用户了。于是，动手将 /home/git 的权限修改为 0700\nchmod g-rwx /home/git 结果还是悲剧了，ssh -T 通过，但是 git push 的时候报错了。\ngit push -u origin master  GitLab: API is not accessible fatal: Could not read from remote repository.\nPlease make sure you have the correct access rights and the repository exists.\n 看来 /home/git 的权限还是修改不得，虽然是非安全的权限，但是非它不可。gitlab 这点太 low 了，竟然依赖于非安全的权限配置。\n最后还是万能的 stackoverflow 提点，帮忙解决了 sshd 安全限制的问题。\nvim /etc/ssh/sshd_config 查找 StrictModes，修改。\n StrictModes no\n 保存，退出，重启 sshd，service sshd restart。再试，Ok。\n后记 #  为了能用 gitlab，将 sshd 的权限修改为不推荐的安全配置，实在是不情愿。考虑到服务器目前只有我一个人操作，因此暂时接受了这种方案。但在生产环境，这点应该是不能允许的吧。\n因为时间问题没有仔细去跟修改 home 目录权限后报错的原因，不知道是哪个 gitlab 的组件需要这个目录下的权限。跟踪之后也许可以不依赖 gitlab 完成修正。有兴趣的同学可以试一下。\nPS：补充各部分的版本号\n CentOS=7.2 Gitlab=8.2.1 Redis=2.8.19  "});index.add({'id':47,'href':'/posts/2015/10/31/%E7%BD%91%E6%98%93%E9%82%AE%E7%AE%B1%E5%B7%B2%E6%AD%BB%E6%9C%89%E4%BA%8B%E8%AF%B7%E7%83%A7%E7%BA%B8/','title':"网易邮箱已死,有事请烧纸",'section':"Posts",'content':"有这么割裂和相互冲突的产品功能，有这么拙劣的安全事故应对机制，有这差的客户服务，还秉承了做安全『就是让你改不了密码和个人信息』的核心思想…… 就连想安安静静收发个邮件都不让了。网易邮箱已死，有事，请烧纸。\n前段时间传出 网易邮箱被拖库以后（科普： 什么是拖库），我咨询过网易邮箱内部的资深人士，结果发现他们也不知道具体什么情况。从一开始跟我说不可能骂乌云不厚道，到后来让我赶紧去改密码，他们在网易邮箱内部工作的，比我这个外人还警醒得晚。网易邮箱有些事情把上下里外都瞒得棒棒哒，实际怎么样没人能知道。\n当初为了所谓『安全』，网易邮箱引导我设置了生日及密码问题、保密邮箱、关联手机、安全码，还引导我申请了密保卡（8X8 矩阵那种），设置了身份信息、关联了手机，最近还申请了结果修改个密码都只能去走『申诉』途径。\n我用邮箱无非希望（一）安全（二）无遗漏（三）服务稳定（四）收发及时，其余都属于次要需求。网易现在第一点没保证，第三点不能提供，四点要求出脱一半。关键是，我们还有可替代的方案。网易邮箱不死没天理。\n实在不知道网易到底要跟时代脱节到什么地步，到现在了，还固步自封在自己的小世界里，想着跟用户做生意吗？！\n只能从此不再用网易邮箱。\n"});index.add({'id':48,'href':'/posts/2015/10/29/Gitlab-%E5%A4%87%E4%BB%BD%E6%97%B6%E5%87%BA%E7%8E%B0-Dumping-MySQL-FAILED-%E7%9A%84%E9%94%99%E8%AF%AF/','title':"Gitlab 备份时出现 Dumping MySQL FAILED 的错误",'section':"Posts",'content':"用 gitlab 很长一段时间了，从 2013 年开始，一直到现在，在每一个团队中都在推广使用 gitlab-ce 做版本管理和项目管理。本来一切好好的，一直到今天。\n今天我要做备份的时候。\nsudo -u git -H bundle exec rake gitlab:backup:create RAILS_ENV=production 命令不灵了。\n Dumping database \u0026hellip; Dumping MySQL database gitlabhq_production \u0026hellip; [FAILED] Backup failed\n  谷歌了解决办法，无非下面几个情况：\n 没有装 mysql client library。   解决办法：安装一个 mysql client library 就好。  git 用户没有写入 config/gitlab.yml 中设定的备份目录的权限   解决办法：修改备份目录所有者为 git 用户就好。  官网上有 issue 是关于 PostgreSQL 的，没有结论，参考价值不大  我挨个排查了一下，上面几种情况都排除了。\n首先，我的 gitlab 站点完全正常访问， 所以第一种情况可以排除。\n其次，tmp/backups/db/ 目录下还有一个空文件 database.sql，我删除之后再试，它还能生成，证明备份 DB 的效果是有的，就是不知道为什么，没有取到 DB 里面的内容，备份成空文件了。顺便检查了下备份目录的磁盘空间，完全充足，用下面的命令证明 git 写入文件到备份目录是完全没有问题的。\nsudo -u git -H cat VERSION \u0026gt; tmp/backups/db/test_VERSION 最后，运行 check 命令检查了 gitlab 的环境，一点儿问题都没有。\nsudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production 很奇怪对吧？仔细看了遍文档，没有答案。很明显几乎没人会遇到这种问题，因为大家提的 issue 就上面那几个，不是已经被证明与我遇到的情况不符，就是与我的实际情况无关。\n然后，开动大脑，仔细想。。。\nsudo -u git -H echo `which mysqldump`  /usr/bin/which: no mysqldump in (blabla\u0026hellip;)\n 不知道对不对，试了下这个。\nln -s /usr/local/mysql/bin/mysqldump /usr/bin/mysqldump OK了！\n我就特别不喜欢那种假设各种工具都可以不需要指定路径直接调用的产品。特别是 gitlab 你都要我在配置文件里面指定 git 的全路径了，会用到 mysqldump 你也不说一声，悄悄咪咪地调用，出错也不直接出提示，只说『FAILED』。我去！\n 后记：\n 一开始还仔细检查了 mysql 的账号权限，才确信排除了数据库的问题； 对 mysqldump 的设置一开始是通过修改 .bashrc + 添加 PATH 到 visudo 的 env_keep 变量的方法来实现，最终确认问题的根源。建立软链接的方式从安全性上不太可取，不过实现成本最低，性价比高； 假如还不行，十多分钟后，我就准备开始读源码了。大约四五年前读过 Ruby 的代码，感觉不来电，倒是也不至于折磨人就是了。  "});index.add({'id':49,'href':'/posts/2015/10/27/angularjs-%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3%E5%8F%8A%E9%83%A8%E5%88%86%E5%AE%98%E6%96%B9%E8%B5%84%E6%96%99/','title':"angularjs 的设计文档及部分官方资料",'section':"Posts",'content':" Angularjs 是伟大的 Google 贡献的 JS 框架。自问世以来，angularjs 以其独特的开发思维方式鹤立于 web 前端开发的圈子，并且以其出众的实际效果赢得大家的喜爱。\nAngularjs 自己提供了一整套的学习文档、设计文档、会议材料等等资料，帮助大家逐步深入了解和学习。可惜这些资料存放在谷歌自己的云盘（Google Drive）中，因为一些众所周知的原因，很不方便下载。我在这里把这些资料打包放在这里，以备不时之需，希望对大家有用。\n Angular_Public_Design_Docs_And_Notes-2015-10-26（七牛空间失效）  PS：最爱 Google 系的一点就是不论是库、框架还是业务代码，文档总是有的，你能从中了解到工程师的初衷和思路，加以消化学习。哈哈！\n"});index.add({'id':50,'href':'/posts/2015/10/22/%E5%86%8D%E5%AD%A6%E4%B9%A0-Linux-%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/','title':"再学习 Linux 下的文件权限",'section':"Posts",'content':"最近遇到一个比较搞的问题，有关 linux 下的文件权限。因为发现解决问题之后的答案是我们很多工作多年的攻城狮以前都没有重视过的，所以特别写下来，帮助加深记忆。\n【背景】 #  同事学习 lnmp，搭好 CentOS 6.5 的环境之后，新建了一个用户组 test，在该组别下新建了一个用户 test，然后准备用这个用户模拟 nginx 和 php-fpm 进程的启动用户，跟着手册上做实践。\n【关键信息】 #   用户：test:test 目录：/www/test 目录权限：drwxrwxrwx. 2 root root 40 Oct 21 16:43 test 文件：/www/test/index.html 文件权限：-rw-r--r--. 1 root root 0 Oct 22 10:04 index.html  【现象】 #   先用 root 的身份 touch 了一个空文件 index.html； su test，然后以 test 用户的身份去删除这个空文件； WTF！！！ 竟然删除文件成功了？？？！！！  普通用户删除了 root 用户的文件，我保证，刚看到这个现象的时候，我内心绝对是崩溃的。\n【解决的途径】 #  首先，检查了 test 用户的用户组，确认的确是 test 组。\n其次，检查文件和目录的权限，除了 test 目录没有按照惯例，被设置成 0777 之外，没有什么特别的。不可能一个 0777 还能捣蛋吧？！\n再次，visudo 命令检查有没有给 test 做高规格的授权。结论是：否。默认配置，没有可疑的配置。\n接下来检查 rm 命令有没有被动过手脚。考虑到这是一台从 min 发行版正常安装起来的测试机，到这里我觉得已经有点儿过了。不过没关系，面对系统『问题』，谨慎一些总是好的。\n之后又检查了 uid 和 gid，确保 test:test 没有占用一些有特殊作用的保留 id。\n最后，还找不到问题，已经过去了半个多小时。猛然想起什么，试了一下除开 test 的其它用户，发现都能重现这个问题。至此发现问题的源头不在 test 这个用户身上。\n【答案】 #  发现源头不在 test 用户身上之后，就走上了正路。如果不是用户或者用户组本身拥有超级权限，那么多半的多半，是权限本身的设计问题。\n按经验，对客观存在的东西，不是 bug，就是一个 feature。\n于是开始 谷歌 Linux 文件权限相关的手册，终于终于找到了 鸟哥 Linux 私房菜——第六章、Linux 的文件权限及目录配置（很奇怪，鸟哥的文档以简体形式放在宝岛学校的官网上），以及 Sticky bit 的维基页。算是为这件事情做了一个注解。\n鸟哥说：\n  权限对目录的重要性  r (read contents in directory)： …… w (modify contents of directory)： 这个可写入的权限对目录来说，是很了不起的！ 因为他表示你具有异动该目录结构列表的权限，也就是底下这些权限：  建立新的文件与目录； 删除已经存在的文件与目录(不论该文件的权限为何！) 将已存在的文件或目录进行更名； 搬移该目录内的文件、目录位置。 总之，目录的w权限就与该目录底下的文件名异动有关就对了啦！   x (access directory)： ……     维基说：\n \u0026hellip; When a directory\u0026rsquo;s sticky bit is set, the filesystem treats the files in such directories in a special way so only the file\u0026rsquo;s owner, the directory\u0026rsquo;s owner, or root can rename or delete the file. Without the sticky bit set, any user with write and execute permissions for the directory can rename or delete contained files, regardless of the file\u0026rsquo;s owner.\n 【解决办法】 #   一定不要给多余的权限。这件事要养成习惯！任何可能接触到系统的人都要培养出来。 对于共用目录，一定要对这个目录激活 sticky bit。比如 /tmp 目录就默认激活了 sticky bit 的，这样大家共用这个目录也不会混乱。 sticky bit 的限制不能继承，也就是说只对激活了 sticky bit 的当前目录有用。  "});})();